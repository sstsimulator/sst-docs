"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[78541],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(96540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}},38725:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"core/statoutput/getFieldTypeShortName","title":"getFieldTypeShortName","description":"Returns a short version of the type name for the field type type. This function wraps the static getFieldTypeShortName provided in the StatisticFieldInfo class and can be used as an alternative.","source":"@site/../docs/core/statoutput/getFieldTypeShortName.md","sourceDirName":"core/statoutput","slug":"/core/statoutput/getFieldTypeShortName","permalink":"/sst-docs/docs/core/statoutput/getFieldTypeShortName","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/statoutput/getFieldTypeShortName.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"getFieldTypeShortName"},"sidebar":"core","previous":{"title":"getFieldInfoArray","permalink":"/sst-docs/docs/core/statoutput/getFieldInfoArray"},"next":{"title":"getNumRanks","permalink":"/sst-docs/docs/core/statoutput/getNumRanks"}}');var r=n(74848),i=n(28453);const a={title:"getFieldTypeShortName"},o=void 0,d={},l=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function c(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"const char* getFieldTypeShortName(fieldType_t type);\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Returns a short version of the type name for the field type ",(0,r.jsx)(t.code,{children:"type"}),". This function wraps the static ",(0,r.jsx)(t.code,{children:"getFieldTypeShortName"})," provided in the ",(0,r.jsx)(t.code,{children:"StatisticFieldInfo"})," class and can be used as an alternative."]}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"type"})," (fieldType_t) A field type"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"returns"})," (const char*) A short name for the specified field type"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:'// Print a list of fields with their types registered to this stat output\nFieldInfoArray_t::iterator it_v = getFieldInfoArray().begin();\nwhile ( it_v != getFieldInfoArray().end() ) {\n    StatisticFieldInfo* statField    = *it_v;\n    //highlight-next-line\n    printf("%s.%s", statField->getFieldName(), getFieldTypeShortName(statField->getFieldType()));\n\n    it_v++;\n    if ( it_v != getFieldInfoArray().end() ) {\n        printf(", ");\n    } else {\n        printf("\\n");\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/statapi/statoutput.h>\n"})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);