"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[55584],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var r=t(96540);const s={},a=r.createContext(s);function l(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(a.Provider,{value:n},e.children)}},72866:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"core/iface/StandardMem/poll","title":"poll","description":"Receive an event (request or response) from the interface. Use this method for polling-based applications.","source":"@site/../docs/core/iface/StandardMem/poll.md","sourceDirName":"core/iface/StandardMem","slug":"/core/iface/StandardMem/poll","permalink":"/sst-docs/docs/core/iface/StandardMem/poll","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/poll.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"poll"},"sidebar":"core","previous":{"title":"getLineSize","permalink":"/sst-docs/docs/core/iface/StandardMem/getLineSize"},"next":{"title":"recvUntimedData","permalink":"/sst-docs/docs/core/iface/StandardMem/recvUntimedData"}}');var s=t(74848),a=t(28453);const l={title:"poll"},i=void 0,o={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing poll() in a StandardMem interface",id:"example-1-implementing-poll-in-a-standardmem-interface",level:3},{value:"Example 2: Using poll from an endpoint",id:"example-2-using-poll-from-an-endpoint",level:3},{value:"Header",id:"header",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"virtual Request* poll() = 0;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Receive an event (request or response) from the interface. Use this method for polling-based applications.\nRegister a ",(0,s.jsx)(n.a,{href:"handler",children:"handler"})," for push-based notification of responses."]}),"\n",(0,s.jsx)(n.p,{children:"Upon receipt of a Request, the receiver takes responsibility for subsequently deleting the Request."}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Memory interface"})," \xa0",(0,s.jsx)(n.br,{}),"\n","Return a waiting Request. If no Request is available, return ",(0,s.jsx)(n.code,{children:"nullptr"}),". If a ",(0,s.jsx)(n.a,{href:"constructor",children:"response handler was registered"})," with the interface, then this function may always return ",(0,s.jsx)(n.code,{children:"nullptr"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Endpoint"})," \xa0",(0,s.jsx)(n.br,{}),"\n","Use this function to get messages from the interface if no handler was registered with the interface."]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"returns"})," (Request*) A Request that was delivered to the interface from the memory system, or ",(0,s.jsx)(n.code,{children:"nullptr"})," if no Request is available."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"example-1-implementing-poll-in-a-standardmem-interface",children:"Example 1: Implementing poll() in a StandardMem interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/memHierarchy/standardInterface.cc"',children:"// MemHierarchy's StandardInterface requires a handler so poll() always returns nullptr\nRequest* StandardInterface::poll()\n{\n    return nullptr;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-2-using-poll-from-an-endpoint",children:"Example 2: Using poll from an endpoint"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"Request* req = mem_iface->poll();\n\nif ( req != nullptr )\n{\n    /* Handle request here */\n    delete req;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/interfaces/stdMem.h>\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);