"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[45363],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var o=t(96540);const s={},r=o.createContext(s);function c(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(r.Provider,{value:n},e.children)}},41879:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"core/component/info/getType","title":"getType","description":"Availability: Component, SubComponent, ComponentExtension","source":"@site/../docs/core/component/info/getType.md","sourceDirName":"core/component/info","slug":"/core/component/info/getType","permalink":"/sst-docs/docs/core/component/info/getType","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/component/info/getType.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"getType"},"sidebar":"core","previous":{"title":"getName","permalink":"/sst-docs/docs/core/component/info/getName"},"next":{"title":"getNumRanks","permalink":"/sst-docs/docs/core/component/info/getNumRanks"}}');var s=t(74848),r=t(28453);const c={title:"getType"},i=void 0,p={},a=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function l(e){const n={code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const std::string& getType() const;\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Availability:"})," Component, SubComponent, ComponentExtension"]}),"\n",(0,s.jsxs)(n.p,{children:["Returns the type of the (Sub)Component or ComponentExtension. This is the SST type in ",(0,s.jsx)(n.code,{children:"lib.name"})," format."]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"returns"})," (string) Type of Component, SubComponent, or ComponentExtension"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'std::string mytype = getType();\noutput.output("I am a component of type %s\\n", mytype.c_str());\n'})}),"\n",(0,s.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h>\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);