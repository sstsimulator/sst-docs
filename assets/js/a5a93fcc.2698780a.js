"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[98094],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var s=t(96540);const i={},r=s.createContext(i);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(r.Provider,{value:n},e.children)}},78891:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"core/iface/SimpleNetwork/spaceToSend","title":"spaceToSend","description":"Checks if there is sufficient space to send the specified number of bits on the specified virtual network.","source":"@site/../docs/core/iface/SimpleNetwork/spaceToSend.md","sourceDirName":"core/iface/SimpleNetwork","slug":"/core/iface/SimpleNetwork/spaceToSend","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/spaceToSend","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/spaceToSend.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"spaceToSend"},"sidebar":"core","previous":{"title":"setNotifyOnSend","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/setNotifyOnSend"},"next":{"title":"Handler","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/handler"}}');var i=t(74848),r=t(28453);const c={title:"spaceToSend"},o=void 0,a={},l=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing spaceToSend in a SimpleNetwork",id:"example-1-implementing-spacetosend-in-a-simplenetwork",level:3},{value:"Example 2: Using spaceToSend in an Endpoint",id:"example-2-using-spacetosend-in-an-endpoint",level:3},{value:"Header",id:"header",level:2}];function d(e){const n={br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"virtual bool spaceToSend(int vn, int num_bits) = 0;\n"})}),"\n",(0,i.jsx)(n.p,{children:"Checks if there is sufficient space to send the specified number of bits on the specified virtual network."}),"\n",(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Network interface"})," \xa0",(0,i.jsx)(n.br,{}),"\n","Return whether the network interface can accept a Request of size ",(0,i.jsx)(n.code,{children:"num_bits"})," on virtual network ",(0,i.jsx)(n.code,{children:"vn"}),". Returning ",(0,i.jsx)(n.code,{children:"true"})," implies that an immediately subsequent call to ",(0,i.jsx)(n.code,{children:"send()"})," for a Request with this same number of bits and virtual network should succeed and return ",(0,i.jsx)(n.code,{children:"true"})," as well."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Endpoint"})," \xa0",(0,i.jsx)(n.br,{}),"\n","May optionally use this function to query available buffer space."]}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"vn"})," (int) Virtual network to check"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"num_bits"})," (int) Number of bits to check for. If this number of bits can be accepted by the interface, the interface has space to send."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"returns"})," ",(0,i.jsx)(n.code,{children:"true"})," if space exists, ",(0,i.jsx)(n.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"example-1-implementing-spacetosend-in-a-simplenetwork",children:"Example 1: Implementing spaceToSend in a SimpleNetwork"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"',children:"bool LinkControl::spaceToSend(int vn, int bits) \n{\n    if ( vn_remap_out[vn]->credits * flit_size < bits )\n    {\n        return false;\n    }\n    return true;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-2-using-spacetosend-in-an-endpoint",children:"Example 2: Using spaceToSend in an Endpoint"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'SimpleNetwork::Request *req = new SimpleNetwork::Request();\nSST::Interfaces::StringEvent *strEv = new SST::Interfaces::StringEvent("hi!");\nreq->src = my_endpoint_id;\nreq->dest = a_destination_id;\nreq->size_in_bits = sizeof(strEv->getString()) * 8;\nreq->vn = vn;\nreq->givePayload(strEv);\n\n//highlight-next-line\nif ( net_iface->spaceToSend(req->vn, req->num_bits) )\n{\n    // Do not need to check return value of send()\n    // since we already checked that the request\n    // can be accepted\n    net_iface->send(req, req->vn);\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/interfaces/simpleNetwork.h>\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);