"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[59769],{28453:(t,e,n)=>{n.d(e,{R:()=>r,x:()=>i});var s=n(96540);const o={},c=s.createContext(o);function r(t){const e=s.useContext(c);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:r(t.components),s.createElement(c.Provider,{value:e},t.children)}},89013:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"core/component/stat/performStatisticOutput","title":"performStatisticOutput","description":"Availability: Component, SubComponent, ComponentExtension","source":"@site/../docs/core/component/stat/performStatisticOutput.md","sourceDirName":"core/component/stat","slug":"/core/component/stat/performStatisticOutput","permalink":"/sst-docs/docs/core/component/stat/performStatisticOutput","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/component/stat/performStatisticOutput.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"performStatisticOutput"},"sidebar":"core","previous":{"title":"performGlobalStatisticOutput","permalink":"/sst-docs/docs/core/component/stat/performGlobalStatisticOutput"},"next":{"title":"Output and Debug","permalink":"/sst-docs/docs/category/output-and-debug"}}');var o=n(74848),c=n(28453);const r={title:"performStatisticOutput"},i=void 0,a={},p=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function l(t){const e={code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-cpp",children:"void performStatisticOutput(Statistics::StatisticBase* stat);\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.em,{children:"Availability:"})," Component, SubComponent, ComponentExtension"]}),"\n",(0,o.jsx)(e.p,{children:"Trigger the output of a specific statistic."}),"\n",(0,o.jsx)(e.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"statName"})," (StatisticBase*) Statistic to output"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"returns"})," None"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-cpp",children:'example::example(ComponentId_t id, Params& params) : Component(id) {\n    stat_occupancy = registerStatistic<uint64_t>("queue_occupancy");\n\n    /** Rest of configuration */\n}\n\nbool clockHandler(Cycle_t cycle) {\n    // Record the size of the queue on every cycle\n    stat_occupancy.addData(queue.size());\n\n    // Print the size of the queue occasionally\n    if (cycle % 1000 == 0)\n    //highlight-next-line\n        performStatisticOutput(stat_occupancy);\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"header",children:"Header"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-cpp",children:"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h>\n"})})]})}function u(t={}){const{wrapper:e}={...(0,c.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(l,{...t})}):l(t)}}}]);