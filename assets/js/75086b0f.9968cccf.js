"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[35337],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(96540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},42172:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"core/events/serialize_order","title":"serialize_order","description":"This function is used by SST when events need to be serialized for transmission over non-local Links.","source":"@site/../docs/core/events/serialize_order.md","sourceDirName":"core/events","slug":"/core/events/serialize_order","permalink":"/sst-docs/docs/core/events/serialize_order","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/events/serialize_order.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"serialize_order"},"sidebar":"core","previous":{"title":"destructor","permalink":"/sst-docs/docs/core/events/destructor"},"next":{"title":"clone","permalink":"/sst-docs/docs/core/events/clone"}}');var t=s(74848),i=s(28453);const a={title:"serialize_order"},o=void 0,l={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function c(e){const n={code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"virtual void serialize_order(SST::Core::Serialization::serializer& ser) override;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This function is used by SST when events need to be serialized for transmission over non-local Links.\nEvents that are serializable ",(0,t.jsx)(n.em,{children:"must"})," implement this function. The function should first call\n",(0,t.jsx)(n.code,{children:"Event::serialize_order(ser)"})," and then append any class members that need to be serialized (generally, all of them)\nto the serializer using the overloaded ",(0,t.jsx)(n.code,{children:"&"})," operation. SST's serializer can serialize POD types, pointers (but not the data pointed to), and many standard containers (e.g., std::vector). Other types may need to be manually serialized."]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ser"})," (SST::Core::Serialization::serializer) serializer to add the event class members to"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"/* simpleElementExample/basicEvent.h */\nclass basicEvent : public SST::Event\n{\npublic:\n    // Constructor\n    basicEvent() : SST::Event(), last(false) { }\n    \n    // Example data members\n    std::vector<char> payload;\n    bool last;\n\n    // Events must provide a serialization function that serializes\n    // all data members of the event\n    //highlight-start\n    void serialize_order(SST::Core::Serialization::serializer &ser)  override {\n        Event::serialize_order(ser);\n        ser & payload;\n        ser & last;\n    }\n    //highlight-end\n\n    // Register this event as serializable\n    ImplementSerializable(SST::simpleElementExample::basicEvent);\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/component.h>\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);