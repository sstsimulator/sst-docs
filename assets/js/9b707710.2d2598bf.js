"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[30062],{28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>a});var t=o(96540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},88580:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"core/component/load/loadComponentExtension","title":"loadComponentExtension","description":"Availability: Component, SubComponent, ComponentExtension","source":"@site/../docs/core/component/load/loadComponentExtension.md","sourceDirName":"core/component/load","slug":"/core/component/load/loadComponentExtension","permalink":"/sst-docs/docs/core/component/load/loadComponentExtension","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/component/load/loadComponentExtension.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"loadComponentExtension"},"sidebar":"core","previous":{"title":"doesSubComponentExist","permalink":"/sst-docs/docs/core/component/load/doesSubComponentExist"},"next":{"title":"loadModule","permalink":"/sst-docs/docs/core/component/load/loadModule"}}');var s=o(74848),i=o(28453);const r={title:"loadComponentExtension"},a=void 0,l={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const n={code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"template <class T, class... ARGS>\nT* loadComponentExtension(ARGS... args);\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Availability:"})," Component, SubComponent, ComponentExtension"]}),"\n",(0,s.jsx)(n.p,{children:"Load an SST ComponentExtension. The extension will be loaded as if it were part of the parent (Sub)Component and will share the parent's ELI information. This functions similarly to creating a new instance of the templated type, except that the instance has access to the (Sub)Component API as if it were part of the (Sub)Component itself."}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"args"})," (ARGS) ComponentExtension-specific arguments for the extension's constructor"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"returns"})," (bool) A pointer to the newly-created extension"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/ember/emberengine.cc"',children:'EmberEngine::EmberEngine(ComponentId_t id, Params& params) : Component(id),\n    currentMotif(0), m_motifDone(false), m_detailedCompute(NULL)\n{\n    /** Configuration here */\n    std::string motifLogFile = params.find<std::string>("motifLog", "");\n    if ("" != motifLogFile) {\n        //highlight-next-line\n        m_motifLogger = loadComponentExtension<EmberMotifLog>(motifLogFile, m_jobId);\n    } else {\n        m_motifLogger = nullptr;\n    }\n\n    /** Rest of configuration here */\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h>\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);