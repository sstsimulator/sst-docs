"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[12758],{17095:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"core/portmodule/registerLinkAttachTool","title":"registerLinkAttachTool","description":"This function should not need to be overridden. It is called when SST registers a PortModule on the send side of a port and is inherited from the underlying APIs that PortModules use to attach themselves to a port. Typically it would be used to differentiate when a tool is registered to multiple types of AttachPoints, but as PortModules are only attachable to ports, the base PortModule implementation is sufficient.","source":"@site/../docs/core/portmodule/registerLinkAttachTool.md","sourceDirName":"core/portmodule","slug":"/core/portmodule/registerLinkAttachTool","permalink":"/sst-docs/docs/core/portmodule/registerLinkAttachTool","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/portmodule/registerLinkAttachTool.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"registerLinkAttachTool"},"sidebar":"core","previous":{"title":"registerHandlerIntercept","permalink":"/sst-docs/docs/core/portmodule/registerHandlerIntercept"},"next":{"title":"serializeEventAttachPointKey","permalink":"/sst-docs/docs/core/portmodule/serializeEventAttachPointKey"}}');var n=o(74848),s=o(28453);const a={title:"registerLinkAttachTool"},i=void 0,l={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function c(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"virtual uintptr_t registerLinkAttachTool(const AttachPointMetaData& mdata);\n"})}),"\n",(0,n.jsx)(t.p,{children:"This function should not need to be overridden. It is called when SST registers a PortModule on the send side of a port and is inherited from the underlying APIs that PortModules use to attach themselves to a port. Typically it would be used to differentiate when a tool is registered to multiple types of AttachPoints, but as PortModules are only attachable to ports, the base PortModule implementation is sufficient."}),"\n",(0,n.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"mdata"})," (AttachPointMetaData&) Metadata indicating the type of attach point a tool is attached to. For PortModules, they are always attached to ports."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"returns"})," (uintptr_t) A key that can be used to differentiate the specific AttachPoint that generates a callback into the PortModule. As PortModules can only attach to one AttachPoint, this is unused and set to 0. If overridden however, the returned value will be passed to ",(0,n.jsx)(t.code,{children:"eventSent"})," via the ",(0,n.jsx)(t.code,{children:"key"})," parameter."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"uintptr_t\nPortModule::registerLinkAttachTool(const AttachPointMetaData& UNUSED(mdata))\n{\n    return 0;\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/portModule.h>\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>i});var r=o(96540);const n={},s=r.createContext(n);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);