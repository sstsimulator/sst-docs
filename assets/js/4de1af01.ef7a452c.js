"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[11065],{28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>c});var r=t(96540);const a={},s=r.createContext(a);function d(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),r.createElement(s.Provider,{value:n},e.children)}},40390:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>d,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"core/iface/StandardMem/constructor","title":"constructor","description":"This constructor is called when a (Sub)Component loads a StandardMem interface.","source":"@site/../docs/core/iface/StandardMem/constructor.md","sourceDirName":"core/iface/StandardMem","slug":"/core/iface/StandardMem/constructor","permalink":"/sst-docs/docs/core/iface/StandardMem/constructor","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/constructor.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"constructor"},"sidebar":"core","previous":{"title":"SST::Interfaces::StandardMem","permalink":"/sst-docs/docs/core/iface/StandardMem/class"},"next":{"title":"destructor","permalink":"/sst-docs/docs/core/iface/StandardMem/destructor"}}');var a=t(74848),s=t(28453);const d={title:"constructor"},c=void 0,o={},i=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Example 1: Implementing a StandardMem constructor",id:"example-1-implementing-a-standardmem-constructor",level:3},{value:"Example 2: Loading a StandardMem interface",id:"example-2-loading-a-standardmem-interface",level:3},{value:"Header",id:"header",level:2}];function l(e){const n={br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"StandardMem(SST::ComponentId_t id, Params& params, TimeConverter* time, HandlerBase* handler);\n"})}),"\n",(0,a.jsx)(n.p,{children:"This constructor is called when a (Sub)Component loads a StandardMem interface."}),"\n",(0,a.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Memory interface"})," \xa0",(0,a.jsx)(n.br,{}),"\n","No specific requirements beyond constructing the object."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Endpoint"})," \xa0",(0,a.jsx)(n.br,{}),"\n","Do not call this function directly. The functions for loading SubComponents invoke this constructor."]}),"\n",(0,a.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"id"})," (ComponentId_t) A unique ID generated by SST for each SubComponent"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"params"})," (Params&) The parameter set passed into the StandardMem SubComponent by the simulation configuration file if user-defined or by the parent (Sub)Component if anonymous"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"time"})," (TimeConverter*) A time base to use for the SubComponent's links if needed"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"handler"})," (HandlerBase*) A function callback for returning responses"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"returns"})," (StandardMem) The newly constructed StandardMem SubComponent"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.h3,{id:"example-1-implementing-a-standardmem-constructor",children:"Example 1: Implementing a StandardMem constructor"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/memHierarchy/standardInterface.h"',children:'#include <sst/core/interfaces/stdMem.h>\n\nclass StandardInterface : public SST::Interfaces::StandardMem {\npublic:\n    // Tell SST that this class is a SubComponent API\n    SST_ELI_REGISTER_SUBCOMPONENT(StandardInterface, "memHierarchy", "standardInterface", SST_ELI_ELEMENT_VERSION(1,0,0), "Interface to memory hierarchy between endpoint and cache. COnverts StandardMem requests into MemEventBases.", SST::Interfaces::StandardMem)\n\n    /* Rest of ELI macros */\n\n    StandardInterface(ComponentId_t cid, Params &params, TimeConverter* time, HandlerBase* handler = NULL);\n\n    ~StandardInterface();\n\n    /* Rest of class */\n};\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/memHierarchy/standardInterface.cc"',children:'#include <sst_config.h>\n#include "standardInterface.h"\n\nStandardInterface::StandardInterface(ComponentId_t cid, Params &params, TimeConverter* time, HandlerBase* handler) :\n    StandardMem(id, params, time, handler)\n    {\n        setDefaultTimeBase(time); // Links are required to have a timebase\n\n        /** Rest of constructor implementation **/\n    }\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-2-loading-a-standardmem-interface",children:"Example 2: Loading a StandardMem interface"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/memHierarchy/testcpu/standardCPU.cc"',children:'standardCPU::standardCPU(ComponentId_t id, Params& params) : Component(id), rng(id, 13)\n{\n    /* Other standardCPU constructor code */\n\n    // Load interface subcomponent\n    // clockTC is standardCPU\'s clock timeconverter\n    memory = loadUserSubComponent<StandardMem>("memory", ComponentInfo::SHARE_NONE, clockTC,\n        new StandardMem::Handler<standardCPU>(this, &standardCPU::handleEvent));\n    \n    if (!memory) \n    {\n        out.fatal(CALL_INFO, -1, "Unable to load StandardMem subcomponent. Check that \'memory\' slot is filled in input.\\n");\n    }\n\n    /* Some more standardCPU constructor code */\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/interfaces/stdMem.h>\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);