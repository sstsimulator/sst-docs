"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8373],{75724:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var t=s(74848),r=s(28453);const i={title:"Shared::SharedSet"},a=void 0,l={id:"core/sharedobj/sharedSet",title:"Shared::SharedSet",description:"SharedSet constructs a set of shared elements. The set is replicated globally across SST's ranks and threads. The set can be written during SST's construction and/or init stages and becomes read-only either when all the components that have initialized the set also publish it or when the setup stage begins, whichever is first.",source:"@site/../docs/core/sharedobj/sharedSet.md",sourceDirName:"core/sharedobj",slug:"/core/sharedobj/sharedSet",permalink:"/sst-docs/docs/core/sharedobj/sharedSet",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/sharedobj/sharedSet.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1729787241e3,frontMatter:{title:"Shared::SharedSet"},sidebar:"core",previous:{title:"Shared::SharedMap",permalink:"/sst-docs/docs/core/sharedobj/sharedMap"},next:{title:"SST::Statistic",permalink:"/sst-docs/docs/core/statistics/class"}},d={},o=[{value:"Constructor",id:"constructor",level:2},{value:"initialize",id:"initialize",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Error conditions",id:"error-conditions",level:4},{value:"begin",id:"begin",level:2},{value:"Parameters",id:"parameters-1",level:4},{value:"count",id:"count",level:2},{value:"Parameters",id:"parameters-2",level:4},{value:"empty",id:"empty",level:2},{value:"Parameters",id:"parameters-3",level:4},{value:"end",id:"end",level:2},{value:"Parameters",id:"parameters-4",level:4},{value:"find",id:"find",level:2},{value:"Parameters",id:"parameters-5",level:4},{value:"insert",id:"insert",level:2},{value:"Parameters",id:"parameters-6",level:4},{value:"isFullyPublished",id:"isfullypublished",level:2},{value:"Parameters",id:"parameters-7",level:4},{value:"mutex_find",id:"mutex_find",level:2},{value:"Parameters",id:"parameters-8",level:4},{value:"publish",id:"publish",level:2},{value:"Parameters",id:"parameters-9",level:4},{value:"rbegin",id:"rbegin",level:2},{value:"Parameters",id:"parameters-10",level:4},{value:"rend",id:"rend",level:2},{value:"Parameters",id:"parameters-11",level:4},{value:"size",id:"size",level:2},{value:"Parameters",id:"parameters-12",level:4},{value:"Header",id:"header",level:2}];function h(e){const n={code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"SharedSet constructs a set of shared elements. The set is replicated globally across SST's ranks and threads. The set can be written during SST's construction and/or init stages and becomes read-only either when all the components that have initialized the set also publish it or when the setup stage begins, whichever is first."}),"\n",(0,t.jsx)(n.p,{children:"Before the set becomes read-only, components should use caution with functions that are not thread-safe as the set may be modified by other threads concurrently."}),"\n",(0,t.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"Shared::SharedSet<T>();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The template type ",(0,t.jsx)(n.code,{children:"T"})," must be a non-pointer type and must be serializable."]}),"\n",(0,t.jsx)(n.h2,{id:"initialize",children:"initialize"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"int initialize(const std::string& obj_name, verify_type v_type = FE_VERIFY);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Initializes the SharedSet and returns the number of components (on the current rank) that have already initialized the set."}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"obj_name"})," (std::string) The name of the object to initialize."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"v_type"})," (verify_type) A conflict resolution policy: INIT_VERIFY, FE_VERIFY (default), or NO_VERIFY. INIT_VERIFY and FE_VERIFY are equivalent for SharedSet."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," (int) The number of components on the current rank that have already initialized the set."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"error-conditions",children:"Error conditions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Components may only call initialize once on each object."}),"\n",(0,t.jsx)(n.li,{children:"Components may not initialize the same object with different verify_type arguments."}),"\n",(0,t.jsx)(n.li,{children:"Initialize must be called prior to SST's setup stage."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"begin",children:"begin"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"const_iterator begin();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns a const iterator to the beginning of the set. Thread-safe, though using this iterator to iterate the set before it becomes read-only is not safe as new elements may be added concurrently."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," (const_iterator) A const iterator to the beginning of the set."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"count",children:"count"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"size_t count(const T& key);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns the number of set elements that match key. Because this is not a multiset, it can return only 0 or 1. Thread-safe."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"key"})," (const T) Key to search."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," (size_t) 1 if ",(0,t.jsx)(n.code,{children:"key"})," matches an element in the set, 0 otherwise."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"empty",children:"empty"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"bool empty();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns whether set is empty. Thread-safe."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," (bool) True if set is empty, false otherwise."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"end",children:"end"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"const_iterator end();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns a const iterator to the end of the set. Thread-safe, though using this iterator to iterate the set before it becomes read-only is not safe as new elements may be added concurrently."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," (const_iterator) A const iterator to the end of the set."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"find",children:"find"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"const_iterator find(const T& key);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Searches the set for an element equivalent to ",(0,t.jsx)(n.code,{children:"key"})," and returns a const iterator to it if found. Otherwise, returns ",(0,t.jsx)(n.code,{children:"SharedSet::end"}),". This is not thread-safe. Prior to the set becoming read-only, use ",(0,t.jsx)(n.code,{children:"mutex_find()"})," instead."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"key"})," (const T) Key to find."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," (const_iterator) A const iterator to the element in the set or ",(0,t.jsx)(n.code,{children:"SharedSet::end"})," if not found."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"insert",children:"insert"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void insert(const T& key);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Adds ",(0,t.jsx)(n.code,{children:"key"})," to the set. This function can be used after calling initialize and prior to calling publish. It is thread-safe."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"key"})," (const T) Key to add."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," None"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"isfullypublished",children:"isFullyPublished"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"bool isFullyPublished();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns whether every component that has initialized the set has also published it. Note that it is possible for ",(0,t.jsx)(n.code,{children:"isFullyPublished()"})," to return ",(0,t.jsx)(n.code,{children:"true"})," in one phase of init and return ",(0,t.jsx)(n.code,{children:"false"})," in a subsequent phase if a component initializes the set between the calls to ",(0,t.jsx)(n.code,{children:"isFullyPublished()"})," (e.g., during the init stage)."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," (bool) True if every component that has initialized the SharedSet has also published it, false otherwise."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"mutex_find",children:"mutex_find"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"const_iterator mutex_find(const T& key);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Searches the set for an element equivalent to ",(0,t.jsx)(n.code,{children:"key"})," and returns a const iterator to it if found. Otherwise, returns ",(0,t.jsx)(n.code,{children:"SharedSet::end"}),". This is thread-safe and can be used prior to the set becoming read-only."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"index"})," (const T) Key to find."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," (const_iterator) A const iterator to the element in the set or ",(0,t.jsx)(n.code,{children:"SharedSet::end"})," if not found."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"publish",children:"publish"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void publish();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Changes the state of the SharedSet to read-only for the calling component. A component may not update the set after publishing it."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," None."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"rbegin",children:"rbegin"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"const_reverse_iterator rbegin();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns a const reverse_iterator to the beginning of the set. Thread-safe, though using this iterator to iterate the set before it becomes read-only is not safe as new elements may be added concurrently."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," (const_reverse_iterator) A const reverse_iterator to the beginning of the set."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"rend",children:"rend"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"const_reverse_iterator rend();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns a const reverse_iterator to the end of the set. Thread-safe, though using this iterator to iterate the set before it becomes read-only is not safe as new elements may be added concurrently."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," (const_reverse_iterator) A const reverse_iterator to the end of set."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"size",children:"size"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"size_t size();\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns the size of the set. Thread safe."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"returns"})," (size_t) Size of the set."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/shared/sharedSet.h\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(96540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);