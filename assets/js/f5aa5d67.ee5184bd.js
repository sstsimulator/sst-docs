"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[14256],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(96540);const a={},s=r.createContext(a);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:t},e.children)}},30334:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"core/unitalgebra/operatoradd","title":"operator+=","description":"Add something to this UnitAlgebra. If the argument is a UnitAlgebra and the units do not match, an error will occur. Otherwise, if the value is unitless (e.g., an int), it will be added to the value of this UnitAlgebra.","source":"@site/../docs/core/unitalgebra/operatoradd.md","sourceDirName":"core/unitalgebra","slug":"/core/unitalgebra/operatoradd","permalink":"/sst-docs/docs/core/unitalgebra/operatoradd","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/unitalgebra/operatoradd.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"operator+="},"sidebar":"core","previous":{"title":"operator=","permalink":"/sst-docs/docs/core/unitalgebra/operatoreq"},"next":{"title":"operator-=","permalink":"/sst-docs/docs/core/unitalgebra/operatorsub"}}');var a=n(74848),s=n(28453);const o={title:"operator+="},i=void 0,l={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function c(e){const t={code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:"UnitAlgebra& operator+=(const UnitAlgebra& v);\ntemplate <typename T> UnitAlgebra& operator+= (const T& v);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Add something to this UnitAlgebra. If the argument is a UnitAlgebra and the units do not match, an error will occur. Otherwise, if the value is unitless (e.g., an ",(0,a.jsx)(t.code,{children:"int"}),"), it will be added to the value of this UnitAlgebra."]}),"\n",(0,a.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"v"})," (UnitAlgebra) value to add."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"v"})," (typename T) value to add"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"returns"})," (UnitAlgebra&) This UnitAlgebra after the addition operation."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"throws"})," ",(0,a.jsx)(t.em,{children:"NonMatchingUnits"})," If object ",(0,a.jsx)(t.code,{children:"v"})," is a UnitAlgebra and its units do not match this UnitAlgebra's units."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:'SST::UnitAlgebra num0("3s");\nSST::UnitAlgebra num1("4s");\nnum0 += num1;\n// num0 = 7s\n'})}),"\n",(0,a.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/unitalgebra.h>\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);