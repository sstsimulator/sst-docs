"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[95749],{28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var r=n(96540);const s={},o=r.createContext(s);function l(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(o.Provider,{value:t},e.children)}},89395:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"core/portmodule/eventSent","title":"eventSent","description":"This function must be implemented. When a PortModule is installed on the send side of a port, this function will be called whenever an event is sent. The function may do the following with the event.","source":"@site/../docs/core/portmodule/eventSent.md","sourceDirName":"core/portmodule","slug":"/core/portmodule/eventSent","permalink":"/sst-docs/docs/core/portmodule/eventSent","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/portmodule/eventSent.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"eventSent"},"sidebar":"core","previous":{"title":"destructor","permalink":"/sst-docs/docs/core/portmodule/destructor"},"next":{"title":"interceptHandler","permalink":"/sst-docs/docs/core/portmodule/interceptHandler"}}');var s=n(74848),o=n(28453);const l={title:"eventSent"},i=void 0,d={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function a(e){const t={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"virtual void eventSent(uintptr_t key, Event*& ev) override = 0;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This function must be implemented. When a PortModule is installed on the ",(0,s.jsx)(t.em,{children:"send"})," side of a port, this function will be called whenever an event is sent. The function may do the following with the event."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Monitor"})," The PortModule may leave ",(0,s.jsx)(t.code,{children:"ev"})," unchanged."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Modify"})," The PortModule may modify ",(0,s.jsx)(t.code,{children:"ev"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Replace"})," If the PortModule replaces the event with another, it must use ",(0,s.jsx)(t.a,{href:"/sst-docs/docs/core/events/copyAllDeliveryInfo",children:"copyAllDeliveryInfo"})," to transfer metadata between the original and new events. The function must then delete the original event and set ",(0,s.jsx)(t.code,{children:"ev"})," to the new event."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Delete"})," If the PortModule deletes the event, it must set ",(0,s.jsx)(t.code,{children:"ev"})," to ",(0,s.jsx)(t.code,{children:"nullptr"})," so that SST knows to cancel the send."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"key"})," parameter is inherited from a generic underlying base API that PortModules use and can be ignored in PortModules."]}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"key"})," (uintptr_t) A key that identifies the PortModule attach site. This can be ignored and will always be 0 for PortModules."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"ev"})," (Event*&) A pointer to the event being sent."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"void DropEvent::eventSent(uintptr_t key, Event*& ev)\n{\n    uint32_t prob = (rng->getNextUInt32() % 100);\n    if (prob <= probability) { // Where 0 <= probability <= 100\n        delete ev;\n        ev = nullptr;\n    }\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/portModule.h>\n"})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);