"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[69787],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},92167:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"core/iface/SimpleNetwork/setNotifyOnReceive","title":"setNotifyOnReceive","description":"An endpoint uses this function to register a functor of the appropriate form. This functor will be called when a Request is received by the interface. The registered function is a notification only and the endpoint must subsequently call recv() to acquire the received Request.","source":"@site/../docs/core/iface/SimpleNetwork/setNotifyOnReceive.md","sourceDirName":"core/iface/SimpleNetwork","slug":"/core/iface/SimpleNetwork/setNotifyOnReceive","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/setNotifyOnReceive","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/setNotifyOnReceive.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"setNotifyOnReceive"},"sidebar":"core","previous":{"title":"sendUntimedData","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/sendUntimedData"},"next":{"title":"setNotifyOnSend","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/setNotifyOnSend"}}');var r=t(74848),s=t(28453);const a={title:"setNotifyOnReceive"},c=void 0,l={},o=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Registering a callback handler in a SimpleNetwork interface",id:"example-1-registering-a-callback-handler-in-a-simplenetwork-interface",level:3},{value:"Example 2: Registering a callback handler from an Endpoint",id:"example-2-registering-a-callback-handler-from-an-endpoint",level:3},{value:"Header",id:"header",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"virtual void setNotifyOnReceive(HandlerBase* functor) = 0;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["An endpoint uses this function to register a functor of the appropriate ",(0,r.jsx)(n.a,{href:"handler",children:"form"}),". This functor will be called when a Request is received by the interface. The registered function is a notification only and the endpoint must subsequently call ",(0,r.jsx)(n.a,{href:"recv",children:(0,r.jsx)(n.code,{children:"recv()"})})," to acquire the received Request."]}),"\n",(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Network interface"})," \xa0",(0,r.jsx)(n.br,{}),"\n","Must support registering this functor. If a functor is registered, it must be called when a Request is received at the interface during simulation (i.e., during SST's run loop). During ",(0,r.jsx)(n.code,{children:"init()"})," and ",(0,r.jsx)(n.code,{children:"complete()"}),", links are polling only and this functor should not be called."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Endpoint"})," \xa0",(0,r.jsx)(n.br,{}),"\n","May optionally use this function to be notified when requests arrive."]}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"functor"})," (HandlerBase*) A ",(0,r.jsx)(n.a,{href:"handler",children:"handler functor"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.p,{children:["These examples show the registration only, for more information see the ",(0,r.jsx)(n.a,{href:"handler",children:"handler"})," documentation."]}),"\n",(0,r.jsx)(n.h3,{id:"example-1-registering-a-callback-handler-in-a-simplenetwork-interface",children:"Example 1: Registering a callback handler in a SimpleNetwork interface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"void NetworkInterfaceImplementation::setNotifyOnReceive(HandlerBase* functor)\n{\n    // receiveFunctor is defined as:\n    // HandlerBase* receiveFunctor;\n    receiveFunctor = functor;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"example-2-registering-a-callback-handler-from-an-endpoint",children:"Example 2: Registering a callback handler from an Endpoint"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Assuming this is in a class named 'Endpoint' with a HandlerBase function named 'handler'\nnet_iface->setNotifyOnReceive(new SST::Interfaces::SimpleNetwork::Handler<Endpoint>(this, &Endpoint::handler));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/interfaces/simpleNetwork.h>\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);