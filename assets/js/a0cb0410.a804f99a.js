"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[75008],{28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>o});var s=r(96540);const n={},a=s.createContext(n);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(a.Provider,{value:t},e.children)}},64642:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"core/params/print_all_params","title":"print_all_params","description":"Print all key/value pairs in the Params object to the specified std::Output. Optionally, prepend each printed key with the given prefix.","source":"@site/../docs/core/params/print_all_params.md","sourceDirName":"core/params","slug":"/core/params/print_all_params","permalink":"/sst-docs/docs/core/params/print_all_params","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/params/print_all_params.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"print_all_params"},"sidebar":"core","previous":{"title":"is_value_array","permalink":"/sst-docs/docs/core/params/is_value_array"},"next":{"title":"PortModule","permalink":"/sst-docs/docs/core/portmodule/class"}}');var n=r(74848),a=r(28453);const i={title:"print_all_params"},o=void 0,l={},p=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function c(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'void print_all_params(std::ostream& os, const std::string& prefix = "") const;\nvoid print_all_params(Output& out, const std::string& prefix = "") const;\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Print all key/value pairs in the Params object to the specified ",(0,n.jsx)(t.code,{children:"std::ostream"})," or ",(0,n.jsx)(t.code,{children:"SST::Output"}),". Optionally, prepend each printed key with the given prefix."]}),"\n",(0,n.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"os"})," (std::ostream&) Where to print the parameters to"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"out"})," (SST::Output) Where to print the parameters to"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"prefix"})," (std::string) A prefix to prepend to each key"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'example::example(ComponentId_t id, Params& params) : Component(id)\n{\n    SST::Output* out = new Output("", 1, 0, Output::STDOUT);\n    //highlight-next-line\n    params.print_all_params(out);\n}\n'})}),"\n",(0,n.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,n.jsx)(t.p,{children:"The Params header file is included with any SST object that supports Params."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h> // or\n#include <sst/core/params.h> // if not included in base class\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}}}]);