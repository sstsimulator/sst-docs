"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[35823],{25669:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"elements/balar/QuickStart","title":"QuickStart","description":"This page provides instructions to setup balar and run test examples.","source":"@site/../docs/elements/balar/QuickStart.md","sourceDirName":"elements/balar","slug":"/elements/balar/QuickStart","permalink":"/sst-docs/docs/elements/balar/QuickStart","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/elements/balar/QuickStart.md","tags":[],"version":"current","lastUpdatedBy":"William-An","lastUpdatedAt":1728153731000,"frontMatter":{"title":"QuickStart"},"sidebar":"elements","previous":{"title":"balar","permalink":"/sst-docs/docs/elements/balar/intro"},"next":{"title":"Tracing CUDA Program","permalink":"/sst-docs/docs/elements/balar/TracingCUDAProgram"}}');var i=s(74848),l=s(28453);const a={title:"QuickStart"},o=void 0,r={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"CUDA",id:"cuda",level:3},{value:"GPGPU-Sim",id:"gpgpu-sim",level:3},{value:"LLVM + RISCV GNU Toolchain",id:"llvm--riscv-gnu-toolchain",level:3},{value:"GPU App Collection",id:"gpu-app-collection",level:3},{value:"Compilation",id:"compilation",level:2},{value:"Testing",id:"testing",level:2},{value:"Running examples",id:"running-examples",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This page provides instructions to setup balar and run test examples."}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.h3,{id:"cuda",children:"CUDA"}),"\n",(0,i.jsxs)(n.p,{children:["Please refer to ",(0,i.jsx)(n.a,{href:"https://developer.nvidia.com/cuda-downloads",children:"NVIDIA's website"})," for setting up CUDA."]}),"\n",(0,i.jsxs)(n.p,{children:["After CUDA is installed, you would need to set this environment variable ",(0,i.jsx)(n.code,{children:"CUDA_INSTALL_PATH"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Assuming CUDA is installed at /usr/local/cuda\nexport CUDA_INSTALL_PATH=/usr/local/cuda\n"})}),"\n",(0,i.jsx)(n.h3,{id:"gpgpu-sim",children:"GPGPU-Sim"}),"\n",(0,i.jsx)(n.p,{children:"First, we shall install the prerequisites for GPGPU-Sim:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo apt-get install cmake build-essential xutils-dev bison zlib1g-dev flex libglu1-mesa-dev\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then to build GPGPU-Sim:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/accel-sim/gpgpu-sim_distribution.git\ncd gpgpu-sim_distribution\nsource setup_environment\nmake -j4\n"})}),"\n",(0,i.jsx)(n.h3,{id:"llvm--riscv-gnu-toolchain",children:"LLVM + RISCV GNU Toolchain"}),"\n",(0,i.jsxs)(n.p,{children:["If you wish to run CUDA binary with ",(0,i.jsx)(n.a,{href:"/sst-docs/docs/elements/vanadis/intro",children:"vanadis"})," and balar, you will need to clone LLVM and RISCV GNU toolchain to compile CUDA source code."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create installation dirs\nmkdir llvm-install\nmkdir riscv-gnu-install\n\n# Set up environment vars to LLVM and RISCV GCC installation folders\nexport LLVM_INSTALL_PATH=$(pwd)/llvm-install\nexport RISCV_TOOLCHAIN_INSTALL_PATH=$(pwd)/riscv-gnu-install\n\n# Build LLVM with RISC-V, x86, and CUDA support from source\n# x86 is included for testing purpose, you can remove it if\n# you will only run the CUDA binary with SST\ngit clone https://github.com/llvm/llvm-project.git\n\ncd llvm-project\nmkdir build && cd build\ncmake -DLLVM_TARGETS_TO_BUILD="RISCV;X86;NVPTX" -DLLVM_DEFAULT_TARGET_TRIPLE=riscv64-unknown-linux-gnu \\\n      -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang;lld" -DCMAKE_INSTALL_PREFIX=$LLVM_INSTALL_PATH ../llvm\ncmake --build . -j8\ncmake --build . --target install\ncd ..\n\n# Build RISC-V GCC toolchain\ngit clone https://github.com/riscv-collab/riscv-gnu-toolchain.git\n\ncd riscv-gnu-toolchain\n./configure --prefix=$RISCV_INSTALL_PATH\nmake linux -j8\ncd ..\n\n# Match with the GPU config file we have (V100)\nexport GPU_ARCH=sm_70\n'})}),"\n",(0,i.jsx)(n.h3,{id:"gpu-app-collection",children:"GPU App Collection"}),"\n",(0,i.jsxs)(n.p,{children:["In order to run balar's unittest, we would need to clone the ",(0,i.jsx)(n.a,{href:"https://github.com/accel-sim/gpu-app-collection/tree/sst_support",children:"GPU app collection repo"}),". The unittest script will handle compilation for these kernels with the custom CUDA runtime lib."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone git@github.com:accel-sim/gpu-app-collection.git\ncd gpu-app-collection\ngit checkout sst_support\n\n# Setup environ vars for apps, need to have\n# env var LLVM_INSTALL_PATH and RISCV_TOOLCHAIN_INSTALL_PATH\n# If you plan to compile the apps directly, you will \n# also need to set SST_CUSTOM_CUDA_LIB_PATH to \n# the directory of the custom CUDA library,\n# which normally will be `SST_ELEMENTS_SRC/src/sst/elements/balar/tests/vanadisLLVMRISCV`\nsource ./src/setup_environment sst\n"})}),"\n",(0,i.jsxs)(n.admonition,{title:"Manual Compilation",type:"note",children:[(0,i.jsxs)(n.p,{children:["If you want to compile the Rodinia benchmarks manually or want to tested out other kernels in the gpu-app-collection repo, you will need to set the ",(0,i.jsx)(n.code,{children:"SST_CUSTOM_CUDA_LIB_PATH"})," env var and compile the custom CUDA runtime first."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Set SST_CUSTOM_CUDA_LIB_PATH\nexport SST_CUSTOM_CUDA_LIB_PATH=SST_ELEMENTS_SRC/src/sst/elements/balar/tests/vanadisLLVMRISCV\n\n# Build custom CUDA runtime\ncd SST_ELEMENTS_SRC/src/sst/elements/balar/tests/vanadisLLVMRISCV\nmake\n\n# Compile Rodinia 2.0 and pull data\ncd PATH_TO/gpu-app-collection\nmake rodinia_2.0-ft -i -j4 -C ./src\nmake data -C ./src\n\n# The compiled binaries would be located\n# PATH_TO/gpu-app-collection/bin/CUDA_VERSION_NUM/release\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"compilation",children:"Compilation"}),"\n",(0,i.jsxs)(n.p,{children:["There are some subtle details need to be taken care of for ",(0,i.jsx)(n.em,{children:"sst-core"})," and ",(0,i.jsx)(n.em,{children:"sst-elements"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# For sst-core, you will need to disable MPI and mempools\ncd PATH_TO/SST_CORE_SOURCE/\n./configure --prefix=$SST_CORE_HOME --disable-mpi --disable-mem-pools\nmake -j4\nmake install\n\n# For sst-elements, you will need to specify CUDA and GPGPU-Sim path\n# GPGPUSIM_ROOT will be set by sourcing the setup_environment script\ncd PATH_TO/SST_ELEMENTS_SOURCE/\n./configure --prefix=$SST_ELEMENTS_HOME --with-sst-core=$SST_CORE_HOME --with-cuda=$CUDA_INSTALL_PATH --with-gpgpusim=$GPGPUSIM_ROOT\nmake -j4\nmake install\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After configuring ",(0,i.jsx)(n.em,{children:"sst-elements"}),", you should have a command line output stating balar will be built. If not, you would need to check if you have CUDA and GPGPU-Sim installed and compiled properly."]}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.p,{children:"Balar divides its testcases into three testsuites based on time cost:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"simple"}),": takes about 10 mins to complete"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"medium"}),": takes about 1 hr to complete"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"long"}),": takes 1~2 hrs to complete"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Each All of them can be run in parallel with ",(0,i.jsx)(n.code,{children:"-c NUM_CORES"})," flags."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Run simple tests sequentially\n$SST_CORE_HOME/bin/sst-test-elements -w "*balar*simple*"\n\n# Run medium testcases with 2 processes\n$SST_CORE_HOME/bin/sst-test-elements -c 2 -w "*balar*medium*"\n\n# Run long tests with 4 processes\n$SST_CORE_HOME/bin/sst-test-elements -c 4 -w "*balar*long*"\n\n# Run all tests with 8 processes\n$SST_CORE_HOME/bin/sst-test-elements -c 8 -w "*balar*"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When running each testsuite, it will first compiled the custom CUDA library under at ",(0,i.jsx)(n.code,{children:"SST_ELEMENT_SOURCE/src/sst/elements/balar/tests/vanadisLLVMRISCV/"})," and link this with Rodinia 2.0 kernels in ",(0,i.jsx)(n.a,{href:"https://github.com/accel-sim/gpu-app-collection/tree/sst_support",children:"gpu-app-collection"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"running-examples",children:"Running examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# cd into balar's tests folder\ncd SST_ELEMENT_SOURCE/src/sst/elements/balar/tests\n\n# With testcpu\nmake -C vectorAdd\nsst testBalar-testcpu.py --model-options=\"-c gpu-v100-mem.cfg -x ./vectorAdd/vectorAdd -t cuda_calls.trace\"\n\n# With vanadis \n# Run helloworld example, pure CPU code, no CUDA calls\nmake -C vanadisLLVMRISCV\nvanadis_EXE=./vanadisLLVMRISCV/helloworld \\\nvanadis_ISA=RISCV64 \\\nsst testBalar-vanadis.py --model-options='-c gpu-v100-mem.cfg'\n\n# Run a simple integer vector add example\nvanadis_EXE=./vanadisLLVMRISCV/vecadd \\\nvanadis_ISA=RISCV64 \\\nBALAR_CUDA_EXE_PATH=./vanadisLLVMRISCV/vecadd \\\nsst testBalar-vanadis.py --model-options='-c gpu-v100-mem.cfg'\n"})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(96540);const i={},l=t.createContext(i);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);