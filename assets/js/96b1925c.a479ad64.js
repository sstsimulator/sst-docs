"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[43972],{28453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>o});var n=r(96540);const i={},a=n.createContext(i);function s(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(a.Provider,{value:t},e.children)}},64418:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"core/unitalgebra/operatordiv","title":"operator/=","description":"Divide this UnitAlgebra by the argument. The units will also be divided if the argument is a UnitAlgebra, otherwise only the value is divided.","source":"@site/../docs/core/unitalgebra/operatordiv.md","sourceDirName":"core/unitalgebra","slug":"/core/unitalgebra/operatordiv","permalink":"/sst-docs/docs/core/unitalgebra/operatordiv","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/unitalgebra/operatordiv.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"operator/="},"sidebar":"core","previous":{"title":"operator*=","permalink":"/sst-docs/docs/core/unitalgebra/operatormul"},"next":{"title":"operator==","permalink":"/sst-docs/docs/core/unitalgebra/compeq"}}');var i=r(74848),a=r(28453);const s={title:"operator/="},o=void 0,l={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function c(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"UnitAlgebra& operator/=(const UnitAlgebra& v);\ntemplate <typename T> UnitAlgebra& operator/= (const T& v);\n"})}),"\n",(0,i.jsx)(t.p,{children:"Divide this UnitAlgebra by the argument. The units will also be divided if the argument is a UnitAlgebra, otherwise only the value is divided."}),"\n",(0,i.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"v"})," (UnitAlgebra) value to divide by"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"v"})," (typename T) value to divide by"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"returns"})," (UnitAlgebra&) This UnitAlgebra after the division operation."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'SST::UnitAlgebra num0("100B");\nSST::UnitAlgebra num1("50s");\nnum0 /= num1;\n// num0 = 2B/s\n'})}),"\n",(0,i.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/unitalgebra.h>\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);