"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[30210],{28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>a});var n=s(96540);const r={},c=n.createContext(r);function i(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(c.Provider,{value:t},e.children)}},86048:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"core/iface/TestEvent/class","title":"SST::Interfaces::TestEvent","description":"The TestEvent class is an Event, derived from SST::Event. It is targeted for early prototyping and testing use cases. The event contains two fields, a count and a boolean value indicating whether the event should print a message when it is deleted. The event is serializable.","source":"@site/../docs/core/iface/TestEvent/class.md","sourceDirName":"core/iface/TestEvent","slug":"/core/iface/TestEvent/class","permalink":"/sst-docs/docs/core/iface/TestEvent/class","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/TestEvent/class.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"SST::Interfaces::TestEvent","sidebar_label":"TestEvent"},"sidebar":"core","previous":{"title":"StringEvent","permalink":"/sst-docs/docs/core/iface/StringEvent/class"},"next":{"title":"SST::Link","permalink":"/sst-docs/docs/core/link/class"}}');var r=s(74848),c=s(28453);const i={title:"SST::Interfaces::TestEvent",sidebar_label:"TestEvent"},a=void 0,o={},l=[{value:"Member variables",id:"member-variables",level:2},{value:"Member functions",id:"member-functions",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Destructor",id:"destructor",level:3},{value:"Header",id:"header",level:2}];function d(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["The TestEvent class is an Event, derived from SST::Event. It is targeted for early prototyping and testing use cases. The event contains two fields, a ",(0,r.jsx)(t.em,{children:"count"})," and a boolean value indicating whether the event should print a message when it is deleted. The event is serializable."]}),"\n",(0,r.jsx)(t.h2,{id:"member-variables",children:"Member variables"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"count"})," (int) A count. Has no default value."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"print_on_delete"})," (bool) Whether the event should print a message from its destructor. Default value is ",(0,r.jsx)(t.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"member-functions",children:"Member functions"}),"\n",(0,r.jsx)(t.h3,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"TestEvent::TestEvent();\n"})}),"\n",(0,r.jsx)(t.h3,{id:"destructor",children:"Destructor"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"TestEvent::~TestEvent();\n"})}),"\n",(0,r.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/interfaces/TestEvent.h>\n"})})]})}function u(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);