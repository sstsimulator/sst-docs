"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[51417],{28453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>t});var r=n(96540);const l={},i=r.createContext(l);function c(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),r.createElement(i.Provider,{value:s},e.children)}},44401:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>t,default:()=>o,frontMatter:()=>c,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"core/iface/StandardMem/req/flushcache","title":"FlushCache","description":"Response Type StandardMem::FlushResp  &nbsp;","source":"@site/../docs/core/iface/StandardMem/req/flushcache.md","sourceDirName":"core/iface/StandardMem/req","slug":"/core/iface/StandardMem/req/flushcache","permalink":"/sst-docs/docs/core/iface/StandardMem/req/flushcache","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/req/flushcache.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"FlushCache"},"sidebar":"core","previous":{"title":"FlushAddr","permalink":"/sst-docs/docs/core/iface/StandardMem/req/flushaddr"},"next":{"title":"FlushResp","permalink":"/sst-docs/docs/core/iface/StandardMem/req/flushresp"}}');var l=n(74848),i=n(28453);const c={title:"FlushCache"},t=void 0,d={},a=[{value:"Member variables",id:"member-variables",level:2},{value:"Member functions",id:"member-functions",level:2},{value:"Defined in <code>Request</code> base class",id:"defined-in-request-base-class",level:3},{value:"Virtual functions inherited from the <code>Request</code> base class",id:"virtual-functions-inherited-from-the-request-base-class",level:3},{value:"makeResponse",id:"makeresponse",level:4},{value:"needsResponse",id:"needsresponse",level:4},{value:"convert",id:"convert",level:4},{value:"handle",id:"handle",level:4},{value:"getString",id:"getstring",level:4},{value:"Header",id:"header",level:2}];function h(e){const s={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"// Constructor\nSST::Interfaces::StandardMem::FlushCache( uint32_t depth=std::numeric_limits<uint32_t>::max(), \n    flags_t flags = 0, Addr iPtr = 0, uint32_t tid = 0);\n"})}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.strong,{children:"Response Type"})," ",(0,l.jsx)(s.a,{href:"flushresp",children:"StandardMem::FlushResp"}),"  \xa0",(0,l.jsx)(s.br,{}),"\n",(0,l.jsx)(s.strong,{children:"Needs Response"})," ",(0,l.jsx)(s.code,{children:"true"})]}),"\n",(0,l.jsxs)(s.p,{children:["The StandardMem::FlushCache request class defines a request to flush the entire cache hierarchy. An interface that receives this request should return an acknowledgement response once the flush is complete. The ",(0,l.jsx)(s.code,{children:"depth"})," field indicates how many components deep the flush should propagate. For example, in a system with an L1, L2, and L3: a value of 1 indicates that the flush should flush data from the L1 only whereas a value of 2 indicates the flush should flush data from both the L1 and L2 caches."]}),"\n",(0,l.jsx)(s.h2,{id:"member-variables",children:"Member variables"}),"\n",(0,l.jsxs)(s.p,{children:["Including those inherited from the ",(0,l.jsx)(s.code,{children:"StandardMem::Request"})," base class, ",(0,l.jsx)(s.code,{children:"StandardMem::FlushCache"})," includes the following member variables."]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"id"})," (id_t) A request or response identifier. A request and its response contain the same identifier."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"flags"})," (flags_t) A 32-bit vector indicating any special flags added to the request"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"depth"})," (uint32_t)  How many levels down the memory hierarchy the flush should propagate"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"iPtr"})," (Addr) An instruction pointer. This is optional metadata."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"tid"})," (uint32_t) An optional thread ID, can be used by memory systems if needed"]}),"\n"]}),"\n",(0,l.jsx)(s.h2,{id:"member-functions",children:"Member functions"}),"\n",(0,l.jsxs)(s.h3,{id:"defined-in-request-base-class",children:["Defined in ",(0,l.jsx)(s.a,{href:"class",children:(0,l.jsx)(s.code,{children:"Request"})})," base class"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"getId"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"setNoncacheable"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"unsetNoncacheable"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"getNoncacheable"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"setSuccess"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"unsetSuccess"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"getSuccess"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"setFail"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"unsetFail"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"getFail"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"setTrace"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"unsetTrace"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"getTrace"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"setFlag"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"unsetFlag"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"getFlag"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"clearAllFlags"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"getAllFlags"})}),"\n",(0,l.jsx)(s.li,{children:(0,l.jsx)(s.code,{children:"getFlagString"})}),"\n"]}),"\n",(0,l.jsxs)(s.h3,{id:"virtual-functions-inherited-from-the-request-base-class",children:["Virtual functions inherited from the ",(0,l.jsx)(s.a,{href:"class",children:(0,l.jsx)(s.code,{children:"Request"})})," base class"]}),"\n",(0,l.jsx)(s.h4,{id:"makeresponse",children:"makeResponse"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"Request* makeResponse();\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Creates a ",(0,l.jsx)(s.a,{href:"flushresp",children:"FlushResp"})," initialized as a response to this FlushCache request. If the memory system implementation allows flushes to fail, the memory interface should subsequently set the F_FAIL flag on the response if necessary."]}),"\n",(0,l.jsx)(s.h4,{id:"needsresponse",children:"needsResponse"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"bool needsResponse();\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Returns ",(0,l.jsx)(s.code,{children:"true"}),"."]}),"\n",(0,l.jsx)(s.h4,{id:"convert",children:"convert"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"SST::Event* convert(RequestConverter* converter);\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Invokes ",(0,l.jsx)(s.code,{children:"convert()"})," on the supplied ",(0,l.jsx)(s.code,{children:"converter"})," visitor class to return an SST::Event in an implementation-specific format."]}),"\n",(0,l.jsx)(s.h4,{id:"handle",children:"handle"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"virtual void handle(RequestHandler* handler) =0;\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Invokes ",(0,l.jsx)(s.code,{children:"handle()"})," on the supplied ",(0,l.jsx)(s.code,{children:"handler"})," visitor class to handle the event according to type."]}),"\n",(0,l.jsx)(s.h4,{id:"getstring",children:"getString"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"virtual std::string getString() =0;\n"})}),"\n",(0,l.jsx)(s.p,{children:"Returns a formatted string listing all fields of the FlushCache."}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-sh",children:"Example Outputs:\nID: 133, Type: FlushCache, Flags: [], Depth: 2, InstPtr: 0x10176, ThreadID: 0\n"})}),"\n",(0,l.jsx)(s.h2,{id:"header",children:"Header"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"#include <sst/core/interfaces/stdMem.h>\n"})})]})}function o(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}}}]);