"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6651],{57426:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var s=n(74848),t=n(28453);const i={title:"Shared::SharedMap"},a=void 0,l={id:"core/sharedobj/sharedMap",title:"Shared::SharedMap",description:"SharedMap constructs a map of shared elements. The map is replicated globally across SST's ranks and threads. The map can be written during SST's construction and/or init stages and becomes read-only either when all the components that have initialized the map also publish it or when the setup stage begins, whichever is first.",source:"@site/../docs/core/sharedobj/sharedMap.md",sourceDirName:"core/sharedobj",slug:"/core/sharedobj/sharedMap",permalink:"/sst-docs/docs/core/sharedobj/sharedMap",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/sharedobj/sharedMap.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1729787241e3,frontMatter:{title:"Shared::SharedMap"},sidebar:"core",previous:{title:"Shared::SharedArray",permalink:"/sst-docs/docs/core/sharedobj/sharedArray"},next:{title:"Shared::SharedSet",permalink:"/sst-docs/docs/core/sharedobj/sharedSet"}},d={},o=[{value:"Constructor",id:"constructor",level:2},{value:"initialize",id:"initialize",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Error conditions",id:"error-conditions",level:4},{value:"begin",id:"begin",level:2},{value:"Parameters",id:"parameters-1",level:4},{value:"count",id:"count",level:2},{value:"Parameters",id:"parameters-2",level:4},{value:"empty",id:"empty",level:2},{value:"Parameters",id:"parameters-3",level:4},{value:"end",id:"end",level:2},{value:"Parameters",id:"parameters-4",level:4},{value:"find",id:"find",level:2},{value:"Parameters",id:"parameters-5",level:4},{value:"isFullyPublished",id:"isfullypublished",level:2},{value:"Parameters",id:"parameters-6",level:4},{value:"lower_bound",id:"lower_bound",level:2},{value:"Parameters",id:"parameters-7",level:4},{value:"mutex_read",id:"mutex_read",level:2},{value:"Parameters",id:"parameters-8",level:4},{value:"operator[]",id:"operator",level:2},{value:"Parameters",id:"parameters-9",level:4},{value:"publish",id:"publish",level:2},{value:"Parameters",id:"parameters-10",level:4},{value:"rbegin",id:"rbegin",level:2},{value:"Parameters",id:"parameters-11",level:4},{value:"rend",id:"rend",level:2},{value:"Parameters",id:"parameters-12",level:4},{value:"size",id:"size",level:2},{value:"Parameters",id:"parameters-13",level:4},{value:"upper_bound",id:"upper_bound",level:2},{value:"Parameters",id:"parameters-14",level:4},{value:"write",id:"write",level:2},{value:"Parameters",id:"parameters-15",level:4},{value:"Header",id:"header",level:2}];function c(e){const r={code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.p,{children:"SharedMap constructs a map of shared elements. The map is replicated globally across SST's ranks and threads. The map can be written during SST's construction and/or init stages and becomes read-only either when all the components that have initialized the map also publish it or when the setup stage begins, whichever is first."}),"\n",(0,s.jsx)(r.p,{children:"Before the map becomes read-only, components should use caution with functions that are not thread-safe as the map may be modified by other threads concurrently."}),"\n",(0,s.jsx)(r.h2,{id:"constructor",children:"Constructor"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"Shared::SharedMap<keyT,valT>();\n"})}),"\n",(0,s.jsxs)(r.p,{children:["The template types ",(0,s.jsx)(r.code,{children:"keyT"})," and ",(0,s.jsx)(r.code,{children:"valT"})," must both be a non-pointer types and must be serializable."]}),"\n",(0,s.jsx)(r.h2,{id:"initialize",children:"initialize"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"int initialize(const std::string& obj_name, verify_type v_type = FE_VERIFY);\n"})}),"\n",(0,s.jsx)(r.p,{children:"Initializes the SharedMap and returns the number of components (on the current rank) that have already initialized the map."}),"\n",(0,s.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"obj_name"})," (std::string) The name of the object to initialize."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"v_type"})," (verify_type) A conflict resolution policy: INIT_VERIFY, FE_VERIFY (default), or NO_VERIFY. INIT_VERIFY and FE_VERIFY are equivalent for SharedMap."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," (int) The number of components on the current rank that have already initialized the map."]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"error-conditions",children:"Error conditions"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Components may only call initialize once on each object."}),"\n",(0,s.jsx)(r.li,{children:"Components may not initialize the same object with different verify_type arguments."}),"\n",(0,s.jsx)(r.li,{children:"Initialize must be called prior to SST's setup stage."}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"begin",children:"begin"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"const_iterator begin();\n"})}),"\n",(0,s.jsx)(r.p,{children:"Returns a const iterator to the beginning of the map. If called prior to the SharedMap becoming read-only, the returned iterator could become invalid if the map is resized."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," (const_iterator) A const iterator to the beginning of the map."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"count",children:"count"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"size_t count(const keyT& key);\n"})}),"\n",(0,s.jsx)(r.p,{children:"Returns the number of map elements with the provided key. Because this is not a multimap, it can return only 0 or 1. Thread-safe."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"key"})," (const keyT) Key to search."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," (size_t) 1 if ",(0,s.jsx)(r.code,{children:"key"})," matches a key in the map, 0 otherwise."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"empty",children:"empty"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"bool empty();\n"})}),"\n",(0,s.jsx)(r.p,{children:"Returns whether map is empty. Thread-safe."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," (bool) True if map is empty, false otherwise."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"end",children:"end"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"const_iterator end();\n"})}),"\n",(0,s.jsx)(r.p,{children:"Returns a const iterator to the end of the map. If called prior to the SharedMap becoming read-only, the returned iterator could become invalid if the map is resized."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," (const_iterator) A const iterator to the end of the map."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"find",children:"find"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"const_iterator find(const keyT& key);\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Searches the map for an element with a key equivalent to ",(0,s.jsx)(r.code,{children:"key"})," and returns a const iterator to it if found. Otherwise, returns ",(0,s.jsx)(r.code,{children:"SharedMap::end"}),". This is not thread-safe."]}),"\n",(0,s.jsx)(r.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"key"})," (const keyT) Key to find."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," (const_iterator) A const iterator to the element in the map or ",(0,s.jsx)(r.code,{children:"SharedMap::end"})," if not found."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"isfullypublished",children:"isFullyPublished"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"bool isFullyPublished();\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns whether every component that has initialized the map has also published it. Note that it is possible for ",(0,s.jsx)(r.code,{children:"isFullyPublished()"})," to return ",(0,s.jsx)(r.code,{children:"true"})," in one phase of init and return ",(0,s.jsx)(r.code,{children:"false"})," in a subsequent phase if a component initializes the map between the calls to ",(0,s.jsx)(r.code,{children:"isFullyPublished()"})," (e.g., during the init stage)."]}),"\n",(0,s.jsx)(r.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," (bool) True if every component that has initialized the SharedMap has also published it, false otherwise."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"lower_bound",children:"lower_bound"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"const_iterator lower_bound(const keyT& key);\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns an iterator pointing to the first element in the map whose key is not considered to go before ",(0,s.jsx)(r.code,{children:"key"})," (i.e., it is equivalent or goes after)."]}),"\n",(0,s.jsx)(r.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"key"})," (const keyT) Key to compare to."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," (const_iterator) A const iterator to the first element whose key is not considered to go before ",(0,s.jsx)(r.code,{children:"key"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"mutex_read",children:"mutex_read"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"const valT& mutex_read(const keyT& key);\n"})}),"\n",(0,s.jsx)(r.p,{children:"Returns the value of the specified key. This is thread-safe and can be used prior to the map becoming read-only."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"key"})," (const keyT) Key to read from."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," (const valT) A const reference to the value of the specified key."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"operator",children:"operator[]"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"const valT& operator[](const keyT& key);\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns the value of the specified key. This is not thread-safe. Prior to the array becoming read-only, use ",(0,s.jsx)(r.code,{children:"mutex_read()"})," instead."]}),"\n",(0,s.jsx)(r.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"key"})," (const keyT) Key to read from."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," (const valT) A const reference to the value of the specified key."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"publish",children:"publish"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"void publish();\n"})}),"\n",(0,s.jsx)(r.p,{children:"Changes the state of the SharedMap to read-only for the calling component. A component may not update the map after publishing it."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," None."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"rbegin",children:"rbegin"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"const_reverse_iterator rbegin();\n"})}),"\n",(0,s.jsx)(r.p,{children:"Returns a const reverse_iterator to the beginning of the map. If called prior to the SharedMap becoming read-only, the returned iterator could become invalid if the map is resized."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," (const_reverse_iterator) A const reverse_iterator to the beginning of the map."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"rend",children:"rend"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"const_reverse_iterator rend();\n"})}),"\n",(0,s.jsx)(r.p,{children:"Returns a const reverse_iterator to the end of the map. If called prior to the SharedMap becoming read-only, the returned iterator could become invalid if the map is resized."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," (const_reverse_iterator) A const reverse_iterator to the end of map."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"size",children:"size"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"size_t size();\n"})}),"\n",(0,s.jsx)(r.p,{children:"Returns the size of the map. Thread safe."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," (size_t) Size of the map."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"upper_bound",children:"upper_bound"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"const_iterator upper_bound(const keyT& key);\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Returns an iterator to the first element in the map whose key is considered to go after ",(0,s.jsx)(r.code,{children:"key"}),"."]}),"\n",(0,s.jsx)(r.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"key"})," (const keyT) Key to compare to."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," (const_iterator) A const iterator to the first element whose key is considered to go after ",(0,s.jsx)(r.code,{children:"key"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"write",children:"write"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"void write(const keyT& key, const valT& value);\n"})}),"\n",(0,s.jsx)(r.p,{children:"Write the key-value pair to the map. This function can be used after calling initialize and prior to calling publish. It is thread-safe."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"key"})," (const keyT) Key to insert."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"value"})," (const valT) Value to insert."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"returns"})," None"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include <sst/core/shared/sharedMap.h\n"})})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>l});var s=n(96540);const t={},i=s.createContext(t);function a(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);