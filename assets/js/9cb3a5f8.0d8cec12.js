"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[56750],{28453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>c});var n=t(96540);const r={},i=n.createContext(r);function l(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(i.Provider,{value:s},e.children)}},44899:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"core/output/setPrefix","title":"setPrefix","description":"Sets the Output\'s prefix.","source":"@site/../docs/core/output/setPrefix.md","sourceDirName":"core/output","slug":"/core/output/setPrefix","permalink":"/sst-docs/docs/core/output/setPrefix","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/output/setPrefix.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"setPrefix"},"sidebar":"core","previous":{"title":"getPrefix","permalink":"/sst-docs/docs/core/output/getPrefix"},"next":{"title":"getVerboseLevel","permalink":"/sst-docs/docs/core/output/getVerboseLevel"}}');var r=t(74848),i=t(28453);const l={title:"setPrefix"},c=void 0,o={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function a(e){const s={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:"void setPrefix(const std::string& prefix);\n"})}),"\n",(0,r.jsx)(s.p,{children:"Sets the Output's prefix."}),"\n",(0,r.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"prefix"})," (std::string) Prefix to be prepended to all strings emitted by calls to ",(0,r.jsx)(s.a,{href:"debug",children:(0,r.jsx)(s.code,{children:"debug()"})}),", ",(0,r.jsx)(s.a,{href:"verbose",children:(0,r.jsx)(s.code,{children:"verbose()"})}),", ",(0,r.jsx)(s.a,{href:"fatal",children:(0,r.jsx)(s.code,{children:"fatal()"})})," and ",(0,r.jsx)(s.a,{href:"../output",children:(0,r.jsx)(s.code,{children:"output()"})})," (depends on which variant of ",(0,r.jsx)(s.code,{children:"output()"})," is used). No space will be inserted between the prepended prefix string and the normal output string. The following escape codes may be used in prefixes:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"\\@f"})," Name of the file in which output call was made."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"\\@l"})," Line number in the file in which output call was made."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"\\@p"})," Name of the function from which output call was made."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"\\@r"})," MPI rank of the calling process.  Will be empty if MPI_COMM_WORLD size is 1."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"\\@R"})," MPI rank of the calling process.  Will be 0 if MPI_COMM_WORLD size is 1."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"\\@i"})," Thread Id of the calling process.  Will be empty if number of threads is 1."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"\\@I"})," Thread Id of the calling process.  Will be 0 if number of threads is 1."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"\\@x"})," Rank information of the calling process.  Will be empty if number of MPI ranks and number of threads are both 1. Same as [",(0,r.jsx)(s.code,{children:"\\@r:\\@i"}),"]"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"\\@X"})," Rank information of the calling process.  Will be [0.0] if number of MPI ranks and number of threads are both 1. Same as [",(0,r.jsx)(s.code,{children:"\\@R:\\@I"}),"]"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"\\@t"})," Simulation time.  Will be the raw simulation cycle time."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:'out->setPrefix("All output begins with this ");\n'})}),"\n",(0,r.jsx)(s.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:"#include <sst/core/output.h>\n"})})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);