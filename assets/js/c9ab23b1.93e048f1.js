"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[83676],{77189:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"guides":[{"type":"link","label":"Getting Started","href":"/sst-docs/docs/guides/start","docId":"guides/start","unlisted":false},{"type":"link","label":"How to Run SST","href":"/sst-docs/docs/guides/runningSST","docId":"guides/runningSST","unlisted":false},{"type":"category","label":"Configuring SST","items":[{"type":"link","label":"Configuring your first simulation","href":"/sst-docs/docs/guides/configuration/configTutorial","docId":"guides/configuration/configTutorial","unlisted":false},{"type":"link","label":"Simulation configuration file","href":"/sst-docs/docs/guides/configuration/pythonConfigGuide","docId":"guides/configuration/pythonConfigGuide","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/configuring-sst"},{"type":"category","label":"Concepts","items":[{"type":"link","label":"Types of SST elements","href":"/sst-docs/docs/guides/concepts/elementtypes","docId":"guides/concepts/elementtypes","unlisted":false},{"type":"link","label":"Simulation lifecycle","href":"/sst-docs/docs/guides/concepts/lifecycle","docId":"guides/concepts/lifecycle","unlisted":false},{"type":"link","label":"Time in SST","href":"/sst-docs/docs/guides/concepts/time","docId":"guides/concepts/time","unlisted":false},{"type":"link","label":"Glossary of SST Terms","href":"/sst-docs/docs/guides/concepts/glossary","docId":"guides/concepts/glossary","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/concepts"},{"type":"category","label":"Features","items":[{"type":"link","label":"Checkpoint and restart","href":"/sst-docs/docs/guides/features/checkpoint","docId":"guides/features/checkpoint","unlisted":false},{"type":"link","label":"Signal handling","href":"/sst-docs/docs/guides/features/signal","docId":"guides/features/signal","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/features"},{"type":"category","label":"Tips and Tricks","items":[{"type":"link","label":"Compilation tips","href":"/sst-docs/docs/guides/tips/compilation","docId":"guides/tips/compilation","unlisted":false},{"type":"link","label":"Debugging tips","href":"/sst-docs/docs/guides/tips/debugging","docId":"guides/tips/debugging","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/tips-and-tricks"},{"type":"category","label":"Development","items":[{"type":"link","label":"Creating a component","href":"/sst-docs/docs/guides/dev/devtutorial","docId":"guides/dev/devtutorial","unlisted":false},{"type":"link","label":"Element Naming Conventions","href":"/sst-docs/docs/guides/dev/naming","docId":"guides/dev/naming","unlisted":false},{"type":"link","label":"Contributing to SST","href":"/sst-docs/docs/guides/dev/contrib","docId":"guides/dev/contrib","unlisted":false},{"type":"link","label":"AutoTesting","href":"/sst-docs/docs/guides/dev/autotest","docId":"guides/dev/autotest","unlisted":false},{"type":"link","label":"Running SST tests","href":"/sst-docs/docs/guides/dev/testing","docId":"guides/dev/testing","unlisted":false},{"type":"link","label":"Testing FAQ","href":"/sst-docs/docs/guides/dev/testfaq","docId":"guides/dev/testfaq","unlisted":false},{"type":"link","label":"Creating test suites","href":"/sst-docs/docs/guides/dev/testframework","docId":"guides/dev/testframework","unlisted":false},{"type":"link","label":"Test framework API","href":"/sst-docs/docs/guides/dev/testframeworkapi","docId":"guides/dev/testframeworkapi","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/development"}],"core":[{"type":"category","label":"Clocks","items":[{"type":"link","label":"Clock Handlers","href":"/sst-docs/docs/core/clock/clock_handler","docId":"core/clock/clock_handler","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/clock/class"},{"type":"category","label":"Component","items":[{"type":"category","label":"Component","items":[{"type":"link","label":"constructor","href":"/sst-docs/docs/core/component/component/constructor","docId":"core/component/component/constructor","unlisted":false},{"type":"link","label":"destructor","href":"/sst-docs/docs/core/component/component/destructor","docId":"core/component/component/destructor","unlisted":false},{"type":"link","label":"primaryComponentDoNotEndSim","href":"/sst-docs/docs/core/component/component/primaryComponentDoNotEndSim","docId":"core/component/component/primaryComponentDoNotEndSim","unlisted":false},{"type":"link","label":"primaryComponentOKToEndSim","href":"/sst-docs/docs/core/component/component/primaryComponentOKToEndSim","docId":"core/component/component/primaryComponentOKToEndSim","unlisted":false},{"type":"link","label":"registerAsPrimaryComponent","href":"/sst-docs/docs/core/component/component/registerAsPrimaryComponent","docId":"core/component/component/registerAsPrimaryComponent","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/component/component/class"},{"type":"category","label":"SubComponent","items":[{"type":"link","label":"constructor","href":"/sst-docs/docs/core/component/subcomponent/constructor","docId":"core/component/subcomponent/constructor","unlisted":false},{"type":"link","label":"destructor","href":"/sst-docs/docs/core/component/subcomponent/destructor","docId":"core/component/subcomponent/destructor","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/component/subcomponent/class"},{"type":"category","label":"ComponentExtension","items":[{"type":"link","label":"constructor","href":"/sst-docs/docs/core/component/componentext/constructor","docId":"core/component/componentext/constructor","unlisted":false},{"type":"link","label":"destructor","href":"/sst-docs/docs/core/component/componentext/destructor","docId":"core/component/componentext/destructor","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/component/componentext/class"},{"type":"category","label":"LifeCycle","items":[{"type":"link","label":"init","href":"/sst-docs/docs/core/component/lifecycle/init","docId":"core/component/lifecycle/init","unlisted":false},{"type":"link","label":"setup","href":"/sst-docs/docs/core/component/lifecycle/setup","docId":"core/component/lifecycle/setup","unlisted":false},{"type":"link","label":"complete","href":"/sst-docs/docs/core/component/lifecycle/complete","docId":"core/component/lifecycle/complete","unlisted":false},{"type":"link","label":"finish","href":"/sst-docs/docs/core/component/lifecycle/finish","docId":"core/component/lifecycle/finish","unlisted":false},{"type":"link","label":"emergencyShutdown","href":"/sst-docs/docs/core/component/lifecycle/emergencyShutdown","docId":"core/component/lifecycle/emergencyShutdown","unlisted":false},{"type":"link","label":"printStatus","href":"/sst-docs/docs/core/component/lifecycle/printStatus","docId":"core/component/lifecycle/printStatus","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/lifecycle"},{"type":"category","label":"Introspection","items":[{"type":"link","label":"getId","href":"/sst-docs/docs/core/component/info/getId","docId":"core/component/info/getId","unlisted":false},{"type":"link","label":"getName","href":"/sst-docs/docs/core/component/info/getName","docId":"core/component/info/getName","unlisted":false},{"type":"link","label":"getType","href":"/sst-docs/docs/core/component/info/getType","docId":"core/component/info/getType","unlisted":false},{"type":"link","label":"getNumRanks","href":"/sst-docs/docs/core/component/info/getNumRanks","docId":"core/component/info/getNumRanks","unlisted":false},{"type":"link","label":"getRank","href":"/sst-docs/docs/core/component/info/getRank","docId":"core/component/info/getRank","unlisted":false},{"type":"link","label":"getParentComponentName","href":"/sst-docs/docs/core/component/info/getParentComponentName","docId":"core/component/info/getParentComponentName","unlisted":false},{"type":"link","label":"isAnonymous","href":"/sst-docs/docs/core/component/info/isAnonymous","docId":"core/component/info/isAnonymous","unlisted":false},{"type":"link","label":"isUser","href":"/sst-docs/docs/core/component/info/isUser","docId":"core/component/info/isUser","unlisted":false},{"type":"link","label":"requireLibrary","href":"/sst-docs/docs/core/component/info/requireLibrary","docId":"core/component/info/requireLibrary","unlisted":false},{"type":"link","label":"getCoordinates","href":"/sst-docs/docs/core/component/info/getCoordinates","docId":"core/component/info/getCoordinates","unlisted":false},{"type":"link","label":"getCurrentPriority","href":"/sst-docs/docs/core/component/info/getCurrentPriority","docId":"core/component/info/getCurrentPriority","unlisted":false},{"type":"link","label":"isSimulationRunModeBoth","href":"/sst-docs/docs/core/component/info/isSimulationRunModeBoth","docId":"core/component/info/isSimulationRunModeBoth","unlisted":false},{"type":"link","label":"isSimulationRunModeInit","href":"/sst-docs/docs/core/component/info/isSimulationRunModeInit","docId":"core/component/info/isSimulationRunModeInit","unlisted":false},{"type":"link","label":"isSimulationRunModeRun","href":"/sst-docs/docs/core/component/info/isSimulationRunModeRun","docId":"core/component/info/isSimulationRunModeRun","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/introspection"},{"type":"category","label":"Time, Clocks","items":[{"type":"link","label":"registerClock","href":"/sst-docs/docs/core/component/time/registerClock","docId":"core/component/time/registerClock","unlisted":false},{"type":"link","label":"unregisterClock","href":"/sst-docs/docs/core/component/time/unregisterClock","docId":"core/component/time/unregisterClock","unlisted":false},{"type":"link","label":"reregisterClock","href":"/sst-docs/docs/core/component/time/reregisterClock","docId":"core/component/time/reregisterClock","unlisted":false},{"type":"link","label":"getNextClockCycle","href":"/sst-docs/docs/core/component/time/getNextClockCycle","docId":"core/component/time/getNextClockCycle","unlisted":false},{"type":"link","label":"registerTimeBase","href":"/sst-docs/docs/core/component/time/registerTimeBase","docId":"core/component/time/registerTimeBase","unlisted":false},{"type":"link","label":"setDefaultTimeBase","href":"/sst-docs/docs/core/component/time/setDefaultTimeBase","docId":"core/component/time/setDefaultTimeBase","unlisted":false},{"type":"link","label":"getDefaultTimeBase","href":"/sst-docs/docs/core/component/time/getDefaultTimeBase","docId":"core/component/time/getDefaultTimeBase","unlisted":false},{"type":"link","label":"getTimeConverter","href":"/sst-docs/docs/core/component/time/getTimeConverter","docId":"core/component/time/getTimeConverter","unlisted":false},{"type":"link","label":"getCoreTimeBase","href":"/sst-docs/docs/core/component/time/getCoreTimeBase","docId":"core/component/time/getCoreTimeBase","unlisted":false},{"type":"link","label":"getCurrentSimCycle","href":"/sst-docs/docs/core/component/time/getCurrentSimCycle","docId":"core/component/time/getCurrentSimCycle","unlisted":false},{"type":"link","label":"getCurrentSimTime","href":"/sst-docs/docs/core/component/time/getCurrentSimTime","docId":"core/component/time/getCurrentSimTime","unlisted":false},{"type":"link","label":"getCurrentSimTimeMicro","href":"/sst-docs/docs/core/component/time/getCurrentSimTimeMicro","docId":"core/component/time/getCurrentSimTimeMicro","unlisted":false},{"type":"link","label":"getCurrentSimTimeMilli","href":"/sst-docs/docs/core/component/time/getCurrentSimTimeMilli","docId":"core/component/time/getCurrentSimTimeMilli","unlisted":false},{"type":"link","label":"getCurrentSimTimeNano","href":"/sst-docs/docs/core/component/time/getCurrentSimTimeNano","docId":"core/component/time/getCurrentSimTimeNano","unlisted":false},{"type":"link","label":"getElapsedSimTime","href":"/sst-docs/docs/core/component/time/getElapsedSimTime","docId":"core/component/time/getElapsedSimTime","unlisted":false},{"type":"link","label":"getEndSimCycle","href":"/sst-docs/docs/core/component/time/getEndSimCycle","docId":"core/component/time/getEndSimCycle","unlisted":false},{"type":"link","label":"getEndTime","href":"/sst-docs/docs/core/component/time/getEndTime","docId":"core/component/time/getEndTime","unlisted":false},{"type":"link","label":"getInitPhaseElapsedRealTime","href":"/sst-docs/docs/core/component/time/getInitPhaseElapsedRealTime","docId":"core/component/time/getInitPhaseElapsedRealTime","unlisted":false},{"type":"link","label":"getRunPhaseElapsedRealTime","href":"/sst-docs/docs/core/component/time/getRunPhaseElapsedRealTime","docId":"core/component/time/getRunPhaseElapsedRealTime","unlisted":false},{"type":"link","label":"getCompletePhaseElapsedRealTime","href":"/sst-docs/docs/core/component/time/getCompletePhaseElapsedRealTime","docId":"core/component/time/getCompletePhaseElapsedRealTime","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/time-clocks"},{"type":"category","label":"Links","items":[{"type":"link","label":"configureLink","href":"/sst-docs/docs/core/component/link/configureLink","docId":"core/component/link/configureLink","unlisted":false},{"type":"link","label":"configureSelfLink","href":"/sst-docs/docs/core/component/link/configureSelfLink","docId":"core/component/link/configureSelfLink","unlisted":false},{"type":"link","label":"isPortConnected","href":"/sst-docs/docs/core/component/link/isPortConnected","docId":"core/component/link/isPortConnected","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/links"},{"type":"category","label":"Loadable Objects","items":[{"type":"link","label":"loadUserSubComponent","href":"/sst-docs/docs/core/component/load/loadUserSubComponent","docId":"core/component/load/loadUserSubComponent","unlisted":false},{"type":"link","label":"loadAnonymousSubComponent","href":"/sst-docs/docs/core/component/load/loadAnonymousSubComponent","docId":"core/component/load/loadAnonymousSubComponent","unlisted":false},{"type":"link","label":"getSubComponentSlotInfo","href":"/sst-docs/docs/core/component/load/getSubComponentSlotInfo","docId":"core/component/load/getSubComponentSlotInfo","unlisted":false},{"type":"link","label":"isUserSubComponentLoadableUsingAPI","href":"/sst-docs/docs/core/component/load/isUserSubComponentLoadableUsingAPI","docId":"core/component/load/isUserSubComponentLoadableUsingAPI","unlisted":false},{"type":"link","label":"isSubComponentLoadableUsingAPI","href":"/sst-docs/docs/core/component/load/isSubComponentLoadableUsingAPI","docId":"core/component/load/isSubComponentLoadableUsingAPI","unlisted":false},{"type":"link","label":"doesSubComponentExist","href":"/sst-docs/docs/core/component/load/doesSubComponentExist","docId":"core/component/load/doesSubComponentExist","unlisted":false},{"type":"link","label":"loadComponentExtension","href":"/sst-docs/docs/core/component/load/loadComponentExtension","docId":"core/component/load/loadComponentExtension","unlisted":false},{"type":"link","label":"loadModule","href":"/sst-docs/docs/core/component/load/loadModule","docId":"core/component/load/loadModule","unlisted":false},{"type":"link","label":"registerProfilePoint","href":"/sst-docs/docs/core/component/load/registerProfilePoint","docId":"core/component/load/registerProfilePoint","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/loadable-objects"},{"type":"category","label":"Statistics","items":[{"type":"link","label":"registerStatistic","href":"/sst-docs/docs/core/component/stat/registerStatistic","docId":"core/component/stat/registerStatistic","unlisted":false},{"type":"link","label":"registerMultiStatistic","href":"/sst-docs/docs/core/component/stat/registerMultiStatistic","docId":"core/component/stat/registerMultiStatistic","unlisted":false},{"type":"link","label":"doesComponentInfoStatisticExist","href":"/sst-docs/docs/core/component/stat/doesComponentInfoStatisticExist","docId":"core/component/stat/doesComponentInfoStatisticExist","unlisted":false},{"type":"link","label":"getComponentInfoStatisticEnableLevel","href":"/sst-docs/docs/core/component/stat/getComponentInfoStatisticEnableLevel","docId":"core/component/stat/getComponentInfoStatisticEnableLevel","unlisted":false},{"type":"link","label":"getStatisticLoadLevel","href":"/sst-docs/docs/core/component/stat/getStatisticLoadLevel","docId":"core/component/stat/getStatisticLoadLevel","unlisted":false},{"type":"link","label":"isStatisticShared","href":"/sst-docs/docs/core/component/stat/isStatisticShared","docId":"core/component/stat/isStatisticShared","unlisted":false},{"type":"link","label":"performGlobalStatisticOutput","href":"/sst-docs/docs/core/component/stat/performGlobalStatisticOutput","docId":"core/component/stat/performGlobalStatisticOutput","unlisted":false},{"type":"link","label":"performStatisticOutput","href":"/sst-docs/docs/core/component/stat/performStatisticOutput","docId":"core/component/stat/performStatisticOutput","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/statistics"},{"type":"category","label":"Output and Debug","items":[{"type":"link","label":"fatal","href":"/sst-docs/docs/core/component/output/fatal","docId":"core/component/output/fatal","unlisted":false},{"type":"link","label":"getOutputDirectory","href":"/sst-docs/docs/core/component/output/getOutputDirectory","docId":"core/component/output/getOutputDirectory","unlisted":false},{"type":"link","label":"getSimulationOutput","href":"/sst-docs/docs/core/component/output/getSimulationOutput","docId":"core/component/output/getSimulationOutput","unlisted":false},{"type":"link","label":"initiateInteractive","href":"/sst-docs/docs/core/component/output/initiateInteractive","docId":"core/component/output/initiateInteractive","unlisted":false},{"type":"link","label":"sst_assert","href":"/sst-docs/docs/core/component/output/sst_assert","docId":"core/component/output/sst_assert","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/output-and-debug"},{"type":"category","label":"Serialization","items":[{"type":"link","label":"serialize_order","href":"/sst-docs/docs/core/component/serialization/serialize_order","docId":"core/component/serialization/serialize_order","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/serialization"}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/component/introduction"},{"type":"category","label":"ELI","items":[{"type":"category","label":"Register","items":[{"type":"link","label":"Component","href":"/sst-docs/docs/core/eli/register/sst_eli_register_component","docId":"core/eli/register/sst_eli_register_component","unlisted":false},{"type":"link","label":"Component Base","href":"/sst-docs/docs/core/eli/register/sst_eli_register_component_base","docId":"core/eli/register/sst_eli_register_component_base","unlisted":false},{"type":"link","label":"Component Derived Base","href":"/sst-docs/docs/core/eli/register/sst_eli_register_component_derived_base","docId":"core/eli/register/sst_eli_register_component_derived_base","unlisted":false},{"type":"link","label":"SubComponent","href":"/sst-docs/docs/core/eli/register/sst_eli_register_subcomponent","docId":"core/eli/register/sst_eli_register_subcomponent","unlisted":false},{"type":"link","label":"SubComponent API","href":"/sst-docs/docs/core/eli/register/sst_eli_register_subcomponent_api","docId":"core/eli/register/sst_eli_register_subcomponent_api","unlisted":false},{"type":"link","label":"SubComponent Derived API","href":"/sst-docs/docs/core/eli/register/sst_eli_register_subcomponent_derived_api","docId":"core/eli/register/sst_eli_register_subcomponent_derived_api","unlisted":false},{"type":"link","label":"Module","href":"/sst-docs/docs/core/eli/register/sst_eli_register_module","docId":"core/eli/register/sst_eli_register_module","unlisted":false},{"type":"link","label":"Module API","href":"/sst-docs/docs/core/eli/register/sst_eli_register_module_api","docId":"core/eli/register/sst_eli_register_module_api","unlisted":false},{"type":"link","label":"Module Derived API","href":"/sst-docs/docs/core/eli/register/sst_eli_register_module_derived_api","docId":"core/eli/register/sst_eli_register_module_derived_api","unlisted":false},{"type":"link","label":"Profile Tool","href":"/sst-docs/docs/core/eli/register/sst_eli_register_profiletool","docId":"core/eli/register/sst_eli_register_profiletool","unlisted":false},{"type":"link","label":"Python Module","href":"/sst-docs/docs/core/eli/register/sst_eli_register_python_module","docId":"core/eli/register/sst_eli_register_python_module","unlisted":false},{"type":"link","label":"RealTimeAction","href":"/sst-docs/docs/core/eli/register/sst_eli_register_realtimeaction","docId":"core/eli/register/sst_eli_register_realtimeaction","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/register"},{"type":"category","label":"Document","items":[{"type":"link","label":"Attributes","href":"/sst-docs/docs/core/eli/document/sst_eli_document_attributes","docId":"core/eli/document/sst_eli_document_attributes","unlisted":false},{"type":"link","label":"Parameters","href":"/sst-docs/docs/core/eli/document/sst_eli_document_params","docId":"core/eli/document/sst_eli_document_params","unlisted":false},{"type":"link","label":"Ports","href":"/sst-docs/docs/core/eli/document/sst_eli_document_ports","docId":"core/eli/document/sst_eli_document_ports","unlisted":false},{"type":"link","label":"Profile points","href":"/sst-docs/docs/core/eli/document/sst_eli_document_profile_points","docId":"core/eli/document/sst_eli_document_profile_points","unlisted":false},{"type":"link","label":"Statistics","href":"/sst-docs/docs/core/eli/document/sst_eli_document_statistics","docId":"core/eli/document/sst_eli_document_statistics","unlisted":false},{"type":"link","label":"SubComponent Slots","href":"/sst-docs/docs/core/eli/document/sst_eli_document_subcomponent_slots","docId":"core/eli/document/sst_eli_document_subcomponent_slots","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/document"},{"type":"category","label":"Delete","items":[{"type":"link","label":"Attributes","href":"/sst-docs/docs/core/eli/delete/sst_eli_delete_attribute","docId":"core/eli/delete/sst_eli_delete_attribute","unlisted":false},{"type":"link","label":"Parameters","href":"/sst-docs/docs/core/eli/delete/sst_eli_delete_param","docId":"core/eli/delete/sst_eli_delete_param","unlisted":false},{"type":"link","label":"Ports","href":"/sst-docs/docs/core/eli/delete/sst_eli_delete_port","docId":"core/eli/delete/sst_eli_delete_port","unlisted":false},{"type":"link","label":"Profile points","href":"/sst-docs/docs/core/eli/delete/sst_eli_delete_profile_point","docId":"core/eli/delete/sst_eli_delete_profile_point","unlisted":false},{"type":"link","label":"Statistics","href":"/sst-docs/docs/core/eli/delete/sst_eli_delete_stat","docId":"core/eli/delete/sst_eli_delete_stat","unlisted":false},{"type":"link","label":"SubComponent Slots","href":"/sst-docs/docs/core/eli/delete/sst_eli_delete_subcomponent_slot","docId":"core/eli/delete/sst_eli_delete_subcomponent_slot","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/delete"},{"type":"category","label":"Other","items":[{"type":"link","label":"Component Categories","href":"/sst-docs/docs/core/eli/other/sst_eli_category_info","docId":"core/eli/other/sst_eli_category_info","unlisted":false},{"type":"link","label":"Versioning","href":"/sst-docs/docs/core/eli/other/sst_eli_element_version","docId":"core/eli/other/sst_eli_element_version","unlisted":false},{"type":"link","label":"Export ELI","href":"/sst-docs/docs/core/eli/other/sst_eli_export","docId":"core/eli/other/sst_eli_export","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/other"}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/eli/overview"},{"type":"category","label":"Events","items":[{"type":"link","label":"SST::Event::Handler","href":"/sst-docs/docs/core/events/event_handler","docId":"core/events/event_handler","unlisted":false},{"type":"link","label":"constructor","href":"/sst-docs/docs/core/events/constructor","docId":"core/events/constructor","unlisted":false},{"type":"link","label":"destructor","href":"/sst-docs/docs/core/events/destructor","docId":"core/events/destructor","unlisted":false},{"type":"link","label":"serialize_order","href":"/sst-docs/docs/core/events/serialize_order","docId":"core/events/serialize_order","unlisted":false},{"type":"link","label":"clone","href":"/sst-docs/docs/core/events/clone","docId":"core/events/clone","unlisted":false},{"type":"link","label":"generateUniqueId","href":"/sst-docs/docs/core/events/generateUniqueId","docId":"core/events/generateUniqueId","unlisted":false},{"type":"link","label":"toString","href":"/sst-docs/docs/core/events/toString","docId":"core/events/toString","unlisted":false},{"type":"link","label":"copyAllDeliveryInfo","href":"/sst-docs/docs/core/events/copyAllDeliveryInfo","docId":"core/events/copyAllDeliveryInfo","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/events/class"},{"type":"category","label":"Interfaces","items":[{"type":"category","label":"SimpleNetwork","items":[{"type":"link","label":"constructor","href":"/sst-docs/docs/core/iface/SimpleNetwork/constructor","docId":"core/iface/SimpleNetwork/constructor","unlisted":false},{"type":"link","label":"destructor","href":"/sst-docs/docs/core/iface/SimpleNetwork/destructor","docId":"core/iface/SimpleNetwork/destructor","unlisted":false},{"type":"link","label":"init","href":"/sst-docs/docs/core/iface/SimpleNetwork/init","docId":"core/iface/SimpleNetwork/init","unlisted":false},{"type":"link","label":"setup","href":"/sst-docs/docs/core/iface/SimpleNetwork/setup","docId":"core/iface/SimpleNetwork/setup","unlisted":false},{"type":"link","label":"complete","href":"/sst-docs/docs/core/iface/SimpleNetwork/complete","docId":"core/iface/SimpleNetwork/complete","unlisted":false},{"type":"link","label":"finish","href":"/sst-docs/docs/core/iface/SimpleNetwork/finish","docId":"core/iface/SimpleNetwork/finish","unlisted":false},{"type":"link","label":"getEndpointID","href":"/sst-docs/docs/core/iface/SimpleNetwork/getEndpointID","docId":"core/iface/SimpleNetwork/getEndpointID","unlisted":false},{"type":"link","label":"getLinkBW","href":"/sst-docs/docs/core/iface/SimpleNetwork/getLinkBW","docId":"core/iface/SimpleNetwork/getLinkBW","unlisted":false},{"type":"link","label":"isNetworkInitialized","href":"/sst-docs/docs/core/iface/SimpleNetwork/isNetworkInitialized","docId":"core/iface/SimpleNetwork/isNetworkInitialized","unlisted":false},{"type":"link","label":"recv","href":"/sst-docs/docs/core/iface/SimpleNetwork/recv","docId":"core/iface/SimpleNetwork/recv","unlisted":false},{"type":"link","label":"recvUntimedData","href":"/sst-docs/docs/core/iface/SimpleNetwork/recvUntimedData","docId":"core/iface/SimpleNetwork/recvUntimedData","unlisted":false},{"type":"link","label":"requestToReceive","href":"/sst-docs/docs/core/iface/SimpleNetwork/requestToReceive","docId":"core/iface/SimpleNetwork/requestToReceive","unlisted":false},{"type":"link","label":"send","href":"/sst-docs/docs/core/iface/SimpleNetwork/send","docId":"core/iface/SimpleNetwork/send","unlisted":false},{"type":"link","label":"sendUntimedData","href":"/sst-docs/docs/core/iface/SimpleNetwork/sendUntimedData","docId":"core/iface/SimpleNetwork/sendUntimedData","unlisted":false},{"type":"link","label":"setNotifyOnReceive","href":"/sst-docs/docs/core/iface/SimpleNetwork/setNotifyOnReceive","docId":"core/iface/SimpleNetwork/setNotifyOnReceive","unlisted":false},{"type":"link","label":"setNotifyOnSend","href":"/sst-docs/docs/core/iface/SimpleNetwork/setNotifyOnSend","docId":"core/iface/SimpleNetwork/setNotifyOnSend","unlisted":false},{"type":"link","label":"spaceToSend","href":"/sst-docs/docs/core/iface/SimpleNetwork/spaceToSend","docId":"core/iface/SimpleNetwork/spaceToSend","unlisted":false},{"type":"link","label":"Handler","href":"/sst-docs/docs/core/iface/SimpleNetwork/handler","docId":"core/iface/SimpleNetwork/handler","unlisted":false},{"type":"link","label":"NetworkInspector","href":"/sst-docs/docs/core/iface/SimpleNetwork/NetworkInspector","docId":"core/iface/SimpleNetwork/NetworkInspector","unlisted":false},{"type":"link","label":"Request","href":"/sst-docs/docs/core/iface/SimpleNetwork/Request","docId":"core/iface/SimpleNetwork/Request","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/iface/SimpleNetwork/class"},{"type":"category","label":"StandardMem","items":[{"type":"link","label":"constructor","href":"/sst-docs/docs/core/iface/StandardMem/constructor","docId":"core/iface/StandardMem/constructor","unlisted":false},{"type":"link","label":"destructor","href":"/sst-docs/docs/core/iface/StandardMem/destructor","docId":"core/iface/StandardMem/destructor","unlisted":false},{"type":"link","label":"init","href":"/sst-docs/docs/core/iface/StandardMem/init","docId":"core/iface/StandardMem/init","unlisted":false},{"type":"link","label":"setup","href":"/sst-docs/docs/core/iface/StandardMem/setup","docId":"core/iface/StandardMem/setup","unlisted":false},{"type":"link","label":"complete","href":"/sst-docs/docs/core/iface/StandardMem/complete","docId":"core/iface/StandardMem/complete","unlisted":false},{"type":"link","label":"finish","href":"/sst-docs/docs/core/iface/StandardMem/finish","docId":"core/iface/StandardMem/finish","unlisted":false},{"type":"link","label":"getLineSize","href":"/sst-docs/docs/core/iface/StandardMem/getLineSize","docId":"core/iface/StandardMem/getLineSize","unlisted":false},{"type":"link","label":"poll","href":"/sst-docs/docs/core/iface/StandardMem/poll","docId":"core/iface/StandardMem/poll","unlisted":false},{"type":"link","label":"recvUntimedData","href":"/sst-docs/docs/core/iface/StandardMem/recvUntimedData","docId":"core/iface/StandardMem/recvUntimedData","unlisted":false},{"type":"link","label":"send","href":"/sst-docs/docs/core/iface/StandardMem/send","docId":"core/iface/StandardMem/send","unlisted":false},{"type":"link","label":"sendUntimedData","href":"/sst-docs/docs/core/iface/StandardMem/sendUntimedData","docId":"core/iface/StandardMem/sendUntimedData","unlisted":false},{"type":"link","label":"setMemoryMappedAddressRegion","href":"/sst-docs/docs/core/iface/StandardMem/setMemoryMappedAddressRegion","docId":"core/iface/StandardMem/setMemoryMappedAddressRegion","unlisted":false},{"type":"category","label":"Request","items":[{"type":"link","label":"Read","href":"/sst-docs/docs/core/iface/StandardMem/req/read","docId":"core/iface/StandardMem/req/read","unlisted":false},{"type":"link","label":"ReadResp","href":"/sst-docs/docs/core/iface/StandardMem/req/readresp","docId":"core/iface/StandardMem/req/readresp","unlisted":false},{"type":"link","label":"Write","href":"/sst-docs/docs/core/iface/StandardMem/req/write","docId":"core/iface/StandardMem/req/write","unlisted":false},{"type":"link","label":"WriteResp","href":"/sst-docs/docs/core/iface/StandardMem/req/writeresp","docId":"core/iface/StandardMem/req/writeresp","unlisted":false},{"type":"link","label":"ReadLock","href":"/sst-docs/docs/core/iface/StandardMem/req/readlock","docId":"core/iface/StandardMem/req/readlock","unlisted":false},{"type":"link","label":"WriteUnlock","href":"/sst-docs/docs/core/iface/StandardMem/req/writeunlock","docId":"core/iface/StandardMem/req/writeunlock","unlisted":false},{"type":"link","label":"LoadLink","href":"/sst-docs/docs/core/iface/StandardMem/req/loadlink","docId":"core/iface/StandardMem/req/loadlink","unlisted":false},{"type":"link","label":"StoreConditional","href":"/sst-docs/docs/core/iface/StandardMem/req/storeconditional","docId":"core/iface/StandardMem/req/storeconditional","unlisted":false},{"type":"link","label":"FlushAddr","href":"/sst-docs/docs/core/iface/StandardMem/req/flushaddr","docId":"core/iface/StandardMem/req/flushaddr","unlisted":false},{"type":"link","label":"FlushCache","href":"/sst-docs/docs/core/iface/StandardMem/req/flushcache","docId":"core/iface/StandardMem/req/flushcache","unlisted":false},{"type":"link","label":"FlushResp","href":"/sst-docs/docs/core/iface/StandardMem/req/flushresp","docId":"core/iface/StandardMem/req/flushresp","unlisted":false},{"type":"link","label":"MoveData","href":"/sst-docs/docs/core/iface/StandardMem/req/movedata","docId":"core/iface/StandardMem/req/movedata","unlisted":false},{"type":"link","label":"InvNotify","href":"/sst-docs/docs/core/iface/StandardMem/req/invnotify","docId":"core/iface/StandardMem/req/invnotify","unlisted":false},{"type":"link","label":"CustomReq","href":"/sst-docs/docs/core/iface/StandardMem/req/customreq","docId":"core/iface/StandardMem/req/customreq","unlisted":false},{"type":"link","label":"CustomResp","href":"/sst-docs/docs/core/iface/StandardMem/req/customresp","docId":"core/iface/StandardMem/req/customresp","unlisted":false},{"type":"link","label":"CustomData","href":"/sst-docs/docs/core/iface/StandardMem/req/customdata","docId":"core/iface/StandardMem/req/customdata","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/iface/StandardMem/req/class"},{"type":"link","label":"RequestConverter","href":"/sst-docs/docs/core/iface/StandardMem/reqconverter","docId":"core/iface/StandardMem/reqconverter","unlisted":false},{"type":"link","label":"RequestHandler","href":"/sst-docs/docs/core/iface/StandardMem/reqhandler","docId":"core/iface/StandardMem/reqhandler","unlisted":false},{"type":"link","label":"Handler","href":"/sst-docs/docs/core/iface/StandardMem/handler","docId":"core/iface/StandardMem/handler","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/iface/StandardMem/class"},{"type":"link","label":"StringEvent","href":"/sst-docs/docs/core/iface/StringEvent/class","docId":"core/iface/StringEvent/class","unlisted":false},{"type":"link","label":"TestEvent","href":"/sst-docs/docs/core/iface/TestEvent/class","docId":"core/iface/TestEvent/class","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/iface/overview"},{"type":"category","label":"Link","items":[{"type":"link","label":"send","href":"/sst-docs/docs/core/link/send","docId":"core/link/send","unlisted":false},{"type":"link","label":"recv","href":"/sst-docs/docs/core/link/recv","docId":"core/link/recv","unlisted":false},{"type":"link","label":"setFunctor","href":"/sst-docs/docs/core/link/setFunctor","docId":"core/link/setFunctor","unlisted":false},{"type":"link","label":"replaceFunctor","href":"/sst-docs/docs/core/link/replaceFunctor","docId":"core/link/replaceFunctor","unlisted":false},{"type":"link","label":"addSendLatency","href":"/sst-docs/docs/core/link/addSendLatency","docId":"core/link/addSendLatency","unlisted":false},{"type":"link","label":"addRecvLatency","href":"/sst-docs/docs/core/link/addRecvLatency","docId":"core/link/addRecvLatency","unlisted":false},{"type":"link","label":"getDefaultTimeBase","href":"/sst-docs/docs/core/link/getDefaultTimeBase","docId":"core/link/getDefaultTimeBase","unlisted":false},{"type":"link","label":"setDefaultTimeBase","href":"/sst-docs/docs/core/link/setDefaultTimeBase","docId":"core/link/setDefaultTimeBase","unlisted":false},{"type":"link","label":"sendUntimedData","href":"/sst-docs/docs/core/link/sendUntimedData","docId":"core/link/sendUntimedData","unlisted":false},{"type":"link","label":"recvUntimedData","href":"/sst-docs/docs/core/link/recvUntimedData","docId":"core/link/recvUntimedData","unlisted":false},{"type":"link","label":"getId","href":"/sst-docs/docs/core/link/getId","docId":"core/link/getId","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/link/class"},{"type":"category","label":"Module","items":[{"type":"link","label":"constructor","href":"/sst-docs/docs/core/module/constructor","docId":"core/module/constructor","unlisted":false},{"type":"link","label":"destructor","href":"/sst-docs/docs/core/module/destructor","docId":"core/module/destructor","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/module/class"},{"type":"category","label":"Output","items":[{"type":"link","label":"constructor","href":"/sst-docs/docs/core/output/constructor","docId":"core/output/constructor","unlisted":false},{"type":"link","label":"destructor","href":"/sst-docs/docs/core/output/destructor","docId":"core/output/destructor","unlisted":false},{"type":"link","label":"init","href":"/sst-docs/docs/core/output/init","docId":"core/output/init","unlisted":false},{"type":"link","label":"fatal","href":"/sst-docs/docs/core/output/fatal","docId":"core/output/fatal","unlisted":false},{"type":"link","label":"output","href":"/sst-docs/docs/core/output/","docId":"core/output/output","unlisted":false},{"type":"link","label":"verbose","href":"/sst-docs/docs/core/output/verbose","docId":"core/output/verbose","unlisted":false},{"type":"link","label":"verbosePrefix","href":"/sst-docs/docs/core/output/verbosePrefix","docId":"core/output/verbosePrefix","unlisted":false},{"type":"link","label":"debug","href":"/sst-docs/docs/core/output/debug","docId":"core/output/debug","unlisted":false},{"type":"link","label":"debugPrefix","href":"/sst-docs/docs/core/output/debugPrefix","docId":"core/output/debugPrefix","unlisted":false},{"type":"link","label":"flush","href":"/sst-docs/docs/core/output/flush","docId":"core/output/flush","unlisted":false},{"type":"link","label":"getOutputLocation","href":"/sst-docs/docs/core/output/getOutputLocation","docId":"core/output/getOutputLocation","unlisted":false},{"type":"link","label":"setOutputLocation","href":"/sst-docs/docs/core/output/setOutputLocation","docId":"core/output/setOutputLocation","unlisted":false},{"type":"link","label":"setFileName","href":"/sst-docs/docs/core/output/setFileName","docId":"core/output/setFileName","unlisted":false},{"type":"link","label":"getPrefix","href":"/sst-docs/docs/core/output/getPrefix","docId":"core/output/getPrefix","unlisted":false},{"type":"link","label":"setPrefix","href":"/sst-docs/docs/core/output/setPrefix","docId":"core/output/setPrefix","unlisted":false},{"type":"link","label":"getVerboseLevel","href":"/sst-docs/docs/core/output/getVerboseLevel","docId":"core/output/getVerboseLevel","unlisted":false},{"type":"link","label":"setVerboseLevel","href":"/sst-docs/docs/core/output/setVerboseLevel","docId":"core/output/setVerboseLevel","unlisted":false},{"type":"link","label":"getVerboseMask","href":"/sst-docs/docs/core/output/getVerboseMask","docId":"core/output/getVerboseMask","unlisted":false},{"type":"link","label":"setVerboseMask","href":"/sst-docs/docs/core/output/setVerboseMask","docId":"core/output/setVerboseMask","unlisted":false},{"type":"link","label":"getDefaultObject","href":"/sst-docs/docs/core/output/getDefaultObject","docId":"core/output/getDefaultObject","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/output/class"},{"type":"category","label":"Params","items":[{"type":"link","label":"constructor","href":"/sst-docs/docs/core/params/constructor","docId":"core/params/constructor","unlisted":false},{"type":"link","label":"destructor","href":"/sst-docs/docs/core/params/destructor","docId":"core/params/destructor","unlisted":false},{"type":"link","label":"operator=","href":"/sst-docs/docs/core/params/operatoreq","docId":"core/params/operatoreq","unlisted":false},{"type":"link","label":"find","href":"/sst-docs/docs/core/params/find","docId":"core/params/find","unlisted":false},{"type":"link","label":"find_array","href":"/sst-docs/docs/core/params/find_array","docId":"core/params/find_array","unlisted":false},{"type":"link","label":"find_map","href":"/sst-docs/docs/core/params/find_map","docId":"core/params/find_map","unlisted":false},{"type":"link","label":"find_set","href":"/sst-docs/docs/core/params/find_set","docId":"core/params/find_set","unlisted":false},{"type":"link","label":"get_scoped_params","href":"/sst-docs/docs/core/params/get_scoped_params","docId":"core/params/get_scoped_params","unlisted":false},{"type":"link","label":"getKeys","href":"/sst-docs/docs/core/params/getKeys","docId":"core/params/getKeys","unlisted":false},{"type":"link","label":"insert","href":"/sst-docs/docs/core/params/insert","docId":"core/params/insert","unlisted":false},{"type":"link","label":"size","href":"/sst-docs/docs/core/params/size","docId":"core/params/size","unlisted":false},{"type":"link","label":"clear","href":"/sst-docs/docs/core/params/clear","docId":"core/params/clear","unlisted":false},{"type":"link","label":"count","href":"/sst-docs/docs/core/params/count","docId":"core/params/count","unlisted":false},{"type":"link","label":"contains","href":"/sst-docs/docs/core/params/contains","docId":"core/params/contains","unlisted":false},{"type":"link","label":"empty","href":"/sst-docs/docs/core/params/empty","docId":"core/params/empty","unlisted":false},{"type":"link","label":"is_value_array","href":"/sst-docs/docs/core/params/is_value_array","docId":"core/params/is_value_array","unlisted":false},{"type":"link","label":"print_all_params","href":"/sst-docs/docs/core/params/print_all_params","docId":"core/params/print_all_params","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/params/class"},{"type":"category","label":"PortModule","items":[{"type":"link","label":"constructor","href":"/sst-docs/docs/core/portmodule/constructor","docId":"core/portmodule/constructor","unlisted":false},{"type":"link","label":"destructor","href":"/sst-docs/docs/core/portmodule/destructor","docId":"core/portmodule/destructor","unlisted":false},{"type":"link","label":"eventSent","href":"/sst-docs/docs/core/portmodule/eventSent","docId":"core/portmodule/eventSent","unlisted":false},{"type":"link","label":"interceptHandler","href":"/sst-docs/docs/core/portmodule/interceptHandler","docId":"core/portmodule/interceptHandler","unlisted":false},{"type":"link","label":"installOnReceive","href":"/sst-docs/docs/core/portmodule/installOnReceive","docId":"core/portmodule/installOnReceive","unlisted":false},{"type":"link","label":"installOnSend","href":"/sst-docs/docs/core/portmodule/installOnSend","docId":"core/portmodule/installOnSend","unlisted":false},{"type":"link","label":"serialize_order","href":"/sst-docs/docs/core/portmodule/serialize_order","docId":"core/portmodule/serialize_order","unlisted":false},{"type":"link","label":"registerHandlerIntercept","href":"/sst-docs/docs/core/portmodule/registerHandlerIntercept","docId":"core/portmodule/registerHandlerIntercept","unlisted":false},{"type":"link","label":"registerLinkAttachTool","href":"/sst-docs/docs/core/portmodule/registerLinkAttachTool","docId":"core/portmodule/registerLinkAttachTool","unlisted":false},{"type":"link","label":"serializeEventAttachPointKey","href":"/sst-docs/docs/core/portmodule/serializeEventAttachPointKey","docId":"core/portmodule/serializeEventAttachPointKey","unlisted":false},{"type":"link","label":"serializeHandlerInterceptPointKey","href":"/sst-docs/docs/core/portmodule/serializeHandlerInterceptPointKey","docId":"core/portmodule/serializeHandlerInterceptPointKey","unlisted":false},{"type":"link","label":"getCoreTimeBase","href":"/sst-docs/docs/core/portmodule/getCoreTimeBase","docId":"core/portmodule/getCoreTimeBase","unlisted":false},{"type":"link","label":"getCurrentPriority","href":"/sst-docs/docs/core/portmodule/getCurrentPriority","docId":"core/portmodule/getCurrentPriority","unlisted":false},{"type":"link","label":"getCurrentSimCycle","href":"/sst-docs/docs/core/portmodule/getCurrentSimCycle","docId":"core/portmodule/getCurrentSimCycle","unlisted":false},{"type":"link","label":"getElapsedSimTime","href":"/sst-docs/docs/core/portmodule/getElapsedSimTime","docId":"core/portmodule/getElapsedSimTime","unlisted":false},{"type":"link","label":"getCurrentSimTime","href":"/sst-docs/docs/core/portmodule/getCurrentSimTime","docId":"core/portmodule/getCurrentSimTime","unlisted":false},{"type":"link","label":"getCurrentSimTimeMicro","href":"/sst-docs/docs/core/portmodule/getCurrentSimTimeMicro","docId":"core/portmodule/getCurrentSimTimeMicro","unlisted":false},{"type":"link","label":"getCurrentSimTimeMilli","href":"/sst-docs/docs/core/portmodule/getCurrentSimTimeMilli","docId":"core/portmodule/getCurrentSimTimeMilli","unlisted":false},{"type":"link","label":"getCurrentSimTimeNano","href":"/sst-docs/docs/core/portmodule/getCurrentSimTimeNano","docId":"core/portmodule/getCurrentSimTimeNano","unlisted":false},{"type":"link","label":"getSimulationOutput","href":"/sst-docs/docs/core/portmodule/getSimulationOutput","docId":"core/portmodule/getSimulationOutput","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/portmodule/class"},{"type":"category","label":"Random","items":[{"type":"link","label":"Marsaglia RNG","href":"/sst-docs/docs/core/rng/marsaglia","docId":"core/rng/marsaglia","unlisted":false},{"type":"link","label":"Mersenne RNG","href":"/sst-docs/docs/core/rng/mersenne","docId":"core/rng/mersenne","unlisted":false},{"type":"link","label":"XOR-Shift RNG","href":"/sst-docs/docs/core/rng/xorshift","docId":"core/rng/xorshift","unlisted":false},{"type":"link","label":"SST::RandomDistribution","href":"/sst-docs/docs/core/rng/distrib","docId":"core/rng/distrib","unlisted":false},{"type":"link","label":"Constant Distribution","href":"/sst-docs/docs/core/rng/constant","docId":"core/rng/constant","unlisted":false},{"type":"link","label":"Discrete Distribution","href":"/sst-docs/docs/core/rng/discrete","docId":"core/rng/discrete","unlisted":false},{"type":"link","label":"Exponential Distribution","href":"/sst-docs/docs/core/rng/expon","docId":"core/rng/expon","unlisted":false},{"type":"link","label":"Gaussian Distribution","href":"/sst-docs/docs/core/rng/gaussian","docId":"core/rng/gaussian","unlisted":false},{"type":"link","label":"Poisson Distribution","href":"/sst-docs/docs/core/rng/poisson","docId":"core/rng/poisson","unlisted":false},{"type":"link","label":"Uniform Distribution","href":"/sst-docs/docs/core/rng/uniform","docId":"core/rng/uniform","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/rng/"},{"type":"category","label":"RealTimeAction","items":[{"type":"link","label":"constructor","href":"/sst-docs/docs/core/realtime/constructor","docId":"core/realtime/constructor","unlisted":false},{"type":"link","label":"destructor","href":"/sst-docs/docs/core/realtime/destructor","docId":"core/realtime/destructor","unlisted":false},{"type":"link","label":"begin","href":"/sst-docs/docs/core/realtime/begin","docId":"core/realtime/begin","unlisted":false},{"type":"link","label":"canInitiateCheckpoint","href":"/sst-docs/docs/core/realtime/canInitiateCheckpoint","docId":"core/realtime/canInitiateCheckpoint","unlisted":false},{"type":"link","label":"execute","href":"/sst-docs/docs/core/realtime/execute","docId":"core/realtime/execute","unlisted":false},{"type":"link","label":"getCoreTimeBase","href":"/sst-docs/docs/core/realtime/getCoreTimeBase","docId":"core/realtime/getCoreTimeBase","unlisted":false},{"type":"link","label":"getCurrentSimCycle","href":"/sst-docs/docs/core/realtime/getCurrentSimCycle","docId":"core/realtime/getCurrentSimCycle","unlisted":false},{"type":"link","label":"getElapsedSimTime","href":"/sst-docs/docs/core/realtime/getElapsedSimTime","docId":"core/realtime/getElapsedSimTime","unlisted":false},{"type":"link","label":"getEndSimCycle","href":"/sst-docs/docs/core/realtime/getEndSimCycle","docId":"core/realtime/getEndSimCycle","unlisted":false},{"type":"link","label":"getMemPoolUsage","href":"/sst-docs/docs/core/realtime/getMemPoolUsage","docId":"core/realtime/getMemPoolUsage","unlisted":false},{"type":"link","label":"getNumRanks","href":"/sst-docs/docs/core/realtime/getNumRanks","docId":"core/realtime/getNumRanks","unlisted":false},{"type":"link","label":"getRank","href":"/sst-docs/docs/core/realtime/getRank","docId":"core/realtime/getRank","unlisted":false},{"type":"link","label":"getSimulationOutput","href":"/sst-docs/docs/core/realtime/getSimulationOutput","docId":"core/realtime/getSimulationOutput","unlisted":false},{"type":"link","label":"getSyncQueueDataSize","href":"/sst-docs/docs/core/realtime/getSyncQueueDataSize","docId":"core/realtime/getSyncQueueDataSize","unlisted":false},{"type":"link","label":"getTimeVortexMaxDepth","href":"/sst-docs/docs/core/realtime/getTimeVortexMaxDepth","docId":"core/realtime/getTimeVortexMaxDepth","unlisted":false},{"type":"link","label":"initiateInteractive","href":"/sst-docs/docs/core/realtime/initiateInteractive","docId":"core/realtime/initiateInteractive","unlisted":false},{"type":"link","label":"simulationCheckpoint","href":"/sst-docs/docs/core/realtime/simulationCheckpoint","docId":"core/realtime/simulationCheckpoint","unlisted":false},{"type":"link","label":"simulationPrintStatus","href":"/sst-docs/docs/core/realtime/simulationPrintStatus","docId":"core/realtime/simulationPrintStatus","unlisted":false},{"type":"link","label":"simulationSignalShutdown","href":"/sst-docs/docs/core/realtime/simulationSignalShutdown","docId":"core/realtime/simulationSignalShutdown","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/realtime/class"},{"type":"link","label":"Serialization","href":"/sst-docs/docs/core/serialization/overview","docId":"core/serialization/overview","unlisted":false},{"type":"category","label":"Shared Objects","items":[{"type":"link","label":"Shared::SharedArray","href":"/sst-docs/docs/core/sharedobj/sharedArray","docId":"core/sharedobj/sharedArray","unlisted":false},{"type":"link","label":"Shared::SharedMap","href":"/sst-docs/docs/core/sharedobj/sharedMap","docId":"core/sharedobj/sharedMap","unlisted":false},{"type":"link","label":"Shared::SharedSet","href":"/sst-docs/docs/core/sharedobj/sharedSet","docId":"core/sharedobj/sharedSet","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/sharedobj/overview"},{"type":"link","label":"sst_types","href":"/sst-docs/docs/core/types/class","docId":"core/types/class","unlisted":false},{"type":"category","label":"Statistics","items":[{"type":"link","label":"addData","href":"/sst-docs/docs/core/statistics/addData","docId":"core/statistics/addData","unlisted":false},{"type":"link","label":"addDataNTimes","href":"/sst-docs/docs/core/statistics/addDataNTimes","docId":"core/statistics/addDataNTimes","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/statistics/class"},{"type":"category","label":"StatisticOutput","items":[{"type":"link","label":"constructor","href":"/sst-docs/docs/core/statoutput/constructor","docId":"core/statoutput/constructor","unlisted":false},{"type":"link","label":"destructor","href":"/sst-docs/docs/core/statoutput/destructor","docId":"core/statoutput/destructor","unlisted":false},{"type":"link","label":"checkOutputParameters","href":"/sst-docs/docs/core/statoutput/checkOutputParameters","docId":"core/statoutput/checkOutputParameters","unlisted":false},{"type":"link","label":"printUsage","href":"/sst-docs/docs/core/statoutput/printUsage","docId":"core/statoutput/printUsage","unlisted":false},{"type":"link","label":"startOfSimulation","href":"/sst-docs/docs/core/statoutput/startOfSimulation","docId":"core/statoutput/startOfSimulation","unlisted":false},{"type":"link","label":"endOfSimulation","href":"/sst-docs/docs/core/statoutput/endOfSimulation","docId":"core/statoutput/endOfSimulation","unlisted":false},{"type":"link","label":"implStartOutputEntries","href":"/sst-docs/docs/core/statoutput/implStartOutputEntries","docId":"core/statoutput/implStartOutputEntries","unlisted":false},{"type":"link","label":"implStopOutputEntries","href":"/sst-docs/docs/core/statoutput/implStopOutputEntries","docId":"core/statoutput/implStopOutputEntries","unlisted":false},{"type":"link","label":"outputField","href":"/sst-docs/docs/core/statoutput/outputField","docId":"core/statoutput/outputField","unlisted":false},{"type":"link","label":"serialize_order","href":"/sst-docs/docs/core/statoutput/serialize_order","docId":"core/statoutput/serialize_order","unlisted":false},{"type":"link","label":"acceptsGroups","href":"/sst-docs/docs/core/statoutput/acceptsGroups","docId":"core/statoutput/acceptsGroups","unlisted":false},{"type":"link","label":"supportsDynamicRegistration","href":"/sst-docs/docs/core/statoutput/supportsDynamicRegistration","docId":"core/statoutput/supportsDynamicRegistration","unlisted":false},{"type":"link","label":"getAbsolutePathForOutputFile","href":"/sst-docs/docs/core/statoutput/getAbsolutePathForOutputFile","docId":"core/statoutput/getAbsolutePathForOutputFile","unlisted":false},{"type":"link","label":"getCurrentSimCycle","href":"/sst-docs/docs/core/statoutput/getCurrentSimCycle","docId":"core/statoutput/getCurrentSimCycle","unlisted":false},{"type":"link","label":"getFieldInfoArray","href":"/sst-docs/docs/core/statoutput/getFieldInfoArray","docId":"core/statoutput/getFieldInfoArray","unlisted":false},{"type":"link","label":"getFieldTypeShortName","href":"/sst-docs/docs/core/statoutput/getFieldTypeShortName","docId":"core/statoutput/getFieldTypeShortName","unlisted":false},{"type":"link","label":"getNumRanks","href":"/sst-docs/docs/core/statoutput/getNumRanks","docId":"core/statoutput/getNumRanks","unlisted":false},{"type":"link","label":"getOutputParameters","href":"/sst-docs/docs/core/statoutput/getOutputParameters","docId":"core/statoutput/getOutputParameters","unlisted":false},{"type":"link","label":"getRank","href":"/sst-docs/docs/core/statoutput/getRank","docId":"core/statoutput/getRank","unlisted":false},{"type":"link","label":"getRegisteredField","href":"/sst-docs/docs/core/statoutput/getRegisteredField","docId":"core/statoutput/getRegisteredField","unlisted":false},{"type":"link","label":"getSimulationOutput","href":"/sst-docs/docs/core/statoutput/getSimulationOutput","docId":"core/statoutput/getSimulationOutput","unlisted":false},{"type":"link","label":"getStatisticOutputName","href":"/sst-docs/docs/core/statoutput/getStatisticOutputName","docId":"core/statoutput/getStatisticOutputName","unlisted":false},{"type":"link","label":"setStatisticOutputName","href":"/sst-docs/docs/core/statoutput/setStatisticOutputName","docId":"core/statoutput/setStatisticOutputName","unlisted":false},{"type":"link","label":"lock","href":"/sst-docs/docs/core/statoutput/lock","docId":"core/statoutput/lock","unlisted":false},{"type":"link","label":"unlock","href":"/sst-docs/docs/core/statoutput/unlock","docId":"core/statoutput/unlock","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/statoutput/class"},{"type":"category","label":"TimeConverter","items":[{"type":"link","label":"convertFromCoreTime","href":"/sst-docs/docs/core/timeconverter/convertFromCoreTime","docId":"core/timeconverter/convertFromCoreTime","unlisted":false},{"type":"link","label":"convertToCoreTime","href":"/sst-docs/docs/core/timeconverter/convertToCoreTime","docId":"core/timeconverter/convertToCoreTime","unlisted":false},{"type":"link","label":"getFactor","href":"/sst-docs/docs/core/timeconverter/getFactor","docId":"core/timeconverter/getFactor","unlisted":false},{"type":"link","label":"getPeriod","href":"/sst-docs/docs/core/timeconverter/getPeriod","docId":"core/timeconverter/getPeriod","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/timeconverter/class"},{"type":"category","label":"UnitAlgebra","items":[{"type":"link","label":"constructor","href":"/sst-docs/docs/core/unitalgebra/constructor","docId":"core/unitalgebra/constructor","unlisted":false},{"type":"link","label":"destructor","href":"/sst-docs/docs/core/unitalgebra/destructor","docId":"core/unitalgebra/destructor","unlisted":false},{"type":"link","label":"init","href":"/sst-docs/docs/core/unitalgebra/init","docId":"core/unitalgebra/init","unlisted":false},{"type":"link","label":"operator=","href":"/sst-docs/docs/core/unitalgebra/operatoreq","docId":"core/unitalgebra/operatoreq","unlisted":false},{"type":"link","label":"operator+=","href":"/sst-docs/docs/core/unitalgebra/operatoradd","docId":"core/unitalgebra/operatoradd","unlisted":false},{"type":"link","label":"operator-=","href":"/sst-docs/docs/core/unitalgebra/operatorsub","docId":"core/unitalgebra/operatorsub","unlisted":false},{"type":"link","label":"operator*=","href":"/sst-docs/docs/core/unitalgebra/operatormul","docId":"core/unitalgebra/operatormul","unlisted":false},{"type":"link","label":"operator/=","href":"/sst-docs/docs/core/unitalgebra/operatordiv","docId":"core/unitalgebra/operatordiv","unlisted":false},{"type":"link","label":"operator==","href":"/sst-docs/docs/core/unitalgebra/compeq","docId":"core/unitalgebra/compeq","unlisted":false},{"type":"link","label":"operator!=","href":"/sst-docs/docs/core/unitalgebra/compneq","docId":"core/unitalgebra/compneq","unlisted":false},{"type":"link","label":"operator>","href":"/sst-docs/docs/core/unitalgebra/compgt","docId":"core/unitalgebra/compgt","unlisted":false},{"type":"link","label":"operator>=","href":"/sst-docs/docs/core/unitalgebra/compgteq","docId":"core/unitalgebra/compgteq","unlisted":false},{"type":"link","label":"operator<","href":"/sst-docs/docs/core/unitalgebra/complt","docId":"core/unitalgebra/complt","unlisted":false},{"type":"link","label":"operator<=","href":"/sst-docs/docs/core/unitalgebra/complteq","docId":"core/unitalgebra/complteq","unlisted":false},{"type":"link","label":"invert","href":"/sst-docs/docs/core/unitalgebra/invert","docId":"core/unitalgebra/invert","unlisted":false},{"type":"link","label":"getDoubleValue","href":"/sst-docs/docs/core/unitalgebra/getDoubleValue","docId":"core/unitalgebra/getDoubleValue","unlisted":false},{"type":"link","label":"getRoundedValue","href":"/sst-docs/docs/core/unitalgebra/getRoundedValue","docId":"core/unitalgebra/getRoundedValue","unlisted":false},{"type":"link","label":"getValue","href":"/sst-docs/docs/core/unitalgebra/getValue","docId":"core/unitalgebra/getValue","unlisted":false},{"type":"link","label":"hasUnits","href":"/sst-docs/docs/core/unitalgebra/hasUnits","docId":"core/unitalgebra/hasUnits","unlisted":false},{"type":"link","label":"isValueZero","href":"/sst-docs/docs/core/unitalgebra/isValueZero","docId":"core/unitalgebra/isValueZero","unlisted":false},{"type":"link","label":"print","href":"/sst-docs/docs/core/unitalgebra/print","docId":"core/unitalgebra/print","unlisted":false},{"type":"link","label":"printWithBestSI","href":"/sst-docs/docs/core/unitalgebra/printWithBestSI","docId":"core/unitalgebra/printWithBestSI","unlisted":false},{"type":"link","label":"toString","href":"/sst-docs/docs/core/unitalgebra/toString","docId":"core/unitalgebra/toString","unlisted":false},{"type":"link","label":"toStringBestSI","href":"/sst-docs/docs/core/unitalgebra/toStringBestSI","docId":"core/unitalgebra/toStringBestSI","unlisted":false},{"type":"link","label":"serialize_order","href":"/sst-docs/docs/core/unitalgebra/serialize_order","docId":"core/unitalgebra/serialize_order","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/core/unitalgebra/class"},{"type":"link","label":"Deprecation history","href":"/sst-docs/docs/core/deprecations","docId":"core/deprecations","unlisted":false}],"config":[{"type":"link","label":"Python Configuration File","href":"/sst-docs/docs/config/","docId":"config/config","unlisted":false},{"type":"category","label":"General","items":[{"type":"link","label":"setProgramOption","href":"/sst-docs/docs/config/general/setProgramOption","docId":"config/general/setProgramOption","unlisted":false},{"type":"link","label":"setProgramOptions","href":"/sst-docs/docs/config/general/setProgramOptions","docId":"config/general/setProgramOptions","unlisted":false},{"type":"link","label":"getProgramOptions","href":"/sst-docs/docs/config/general/getProgramOptions","docId":"config/general/getProgramOptions","unlisted":false},{"type":"link","label":"getMPIRankCount","href":"/sst-docs/docs/config/general/getMPIRankCount","docId":"config/general/getMPIRankCount","unlisted":false},{"type":"link","label":"getMyMPIRank","href":"/sst-docs/docs/config/general/getMyMPIRank","docId":"config/general/getMyMPIRank","unlisted":false},{"type":"link","label":"getThreadCount","href":"/sst-docs/docs/config/general/getThreadCount","docId":"config/general/getThreadCount","unlisted":false},{"type":"link","label":"setThreadCount","href":"/sst-docs/docs/config/general/setThreadCount","docId":"config/general/setThreadCount","unlisted":false},{"type":"link","label":"pushNamePrefix","href":"/sst-docs/docs/config/general/pushNamePrefix","docId":"config/general/pushNamePrefix","unlisted":false},{"type":"link","label":"popNamePrefix","href":"/sst-docs/docs/config/general/popNamePrefix","docId":"config/general/popNamePrefix","unlisted":false},{"type":"link","label":"exit","href":"/sst-docs/docs/config/general/exit","docId":"config/general/exit","unlisted":false},{"type":"link","label":"findComponentByName","href":"/sst-docs/docs/config/general/findComponentByName","docId":"config/general/findComponentByName","unlisted":false},{"type":"link","label":"addGlobalParam","href":"/sst-docs/docs/config/general/addGlobalParam","docId":"config/general/addGlobalParam","unlisted":false},{"type":"link","label":"addGlobalParams","href":"/sst-docs/docs/config/general/addGlobalParams","docId":"config/general/addGlobalParams","unlisted":false},{"type":"link","label":"addSharedParam","href":"/sst-docs/docs/config/general/addSharedParam","docId":"config/general/addSharedParam","unlisted":false},{"type":"link","label":"addSharedParams","href":"/sst-docs/docs/config/general/addSharedParams","docId":"config/general/addSharedParams","unlisted":false},{"type":"link","label":"getElapsedExecutionTime","href":"/sst-docs/docs/config/general/getElapsedExecutionTime","docId":"config/general/getElapsedExecutionTime","unlisted":false},{"type":"link","label":"getLocalMemoryUsage","href":"/sst-docs/docs/config/general/getLocalMemoryUsage","docId":"config/general/getLocalMemoryUsage","unlisted":false},{"type":"link","label":"setCallPythonFinalize","href":"/sst-docs/docs/config/general/setCallPythonFinalize","docId":"config/general/setCallPythonFinalize","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/general"},{"type":"category","label":"Component","items":[{"type":"link","label":"Component","href":"/sst-docs/docs/config/component/","docId":"config/component/component","unlisted":false},{"type":"link","label":"setSubComponent","href":"/sst-docs/docs/config/component/setSubComponent","docId":"config/component/setSubComponent","unlisted":false},{"type":"link","label":"addPortModule","href":"/sst-docs/docs/config/component/addPortModule","docId":"config/component/addPortModule","unlisted":false},{"type":"link","label":"addParam","href":"/sst-docs/docs/config/component/addParam","docId":"config/component/addParam","unlisted":false},{"type":"link","label":"addParams","href":"/sst-docs/docs/config/component/addParams","docId":"config/component/addParams","unlisted":false},{"type":"link","label":"addGlobalParamSet","href":"/sst-docs/docs/config/component/addGlobalParamSet","docId":"config/component/addGlobalParamSet","unlisted":false},{"type":"link","label":"addSharedParamSet","href":"/sst-docs/docs/config/component/addSharedParamSet","docId":"config/component/addSharedParamSet","unlisted":false},{"type":"link","label":"addLink","href":"/sst-docs/docs/config/component/addLink","docId":"config/component/addLink","unlisted":false},{"type":"link","label":"getFullName","href":"/sst-docs/docs/config/component/getFullName","docId":"config/component/getFullName","unlisted":false},{"type":"link","label":"getType","href":"/sst-docs/docs/config/component/getType","docId":"config/component/getType","unlisted":false},{"type":"link","label":"createStatistic","href":"/sst-docs/docs/config/component/createStatistic","docId":"config/component/createStatistic","unlisted":false},{"type":"link","label":"setStatistic","href":"/sst-docs/docs/config/component/setStatistic","docId":"config/component/setStatistic","unlisted":false},{"type":"link","label":"setStatisticLoadLevel","href":"/sst-docs/docs/config/component/setStatisticLoadLevel","docId":"config/component/setStatisticLoadLevel","unlisted":false},{"type":"link","label":"enableAllStatistics","href":"/sst-docs/docs/config/component/enableAllStatistics","docId":"config/component/enableAllStatistics","unlisted":false},{"type":"link","label":"enableStatistics","href":"/sst-docs/docs/config/component/enableStatistics","docId":"config/component/enableStatistics","unlisted":false},{"type":"link","label":"setCoordinates","href":"/sst-docs/docs/config/component/setCoordinates","docId":"config/component/setCoordinates","unlisted":false},{"type":"link","label":"setRank","href":"/sst-docs/docs/config/component/setRank","docId":"config/component/setRank","unlisted":false},{"type":"link","label":"setWeight","href":"/sst-docs/docs/config/component/setWeight","docId":"config/component/setWeight","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/config/component/classes"},{"type":"category","label":"Link","items":[{"type":"link","label":"connect","href":"/sst-docs/docs/config/link/connect","docId":"config/link/connect","unlisted":false},{"type":"link","label":"setNoCut","href":"/sst-docs/docs/config/link/setNoCut","docId":"config/link/setNoCut","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/config/link/"},{"type":"category","label":"Statistics","items":[{"type":"link","label":"enableAllStatisticsForAllComponents","href":"/sst-docs/docs/config/stats/enableAllStatisticsForAllComponents","docId":"config/stats/enableAllStatisticsForAllComponents","unlisted":false},{"type":"link","label":"enableAllStatisticsForComponentName","href":"/sst-docs/docs/config/stats/enableAllStatisticsForComponentName","docId":"config/stats/enableAllStatisticsForComponentName","unlisted":false},{"type":"link","label":"enableAllStatisticsForComponentType","href":"/sst-docs/docs/config/stats/enableAllStatisticsForComponentType","docId":"config/stats/enableAllStatisticsForComponentType","unlisted":false},{"type":"link","label":"enableStatisticForComponentName","href":"/sst-docs/docs/config/stats/enableStatisticForComponentName","docId":"config/stats/enableStatisticForComponentName","unlisted":false},{"type":"link","label":"enableStatisticsForComponentName","href":"/sst-docs/docs/config/stats/enableStatisticsForComponentName","docId":"config/stats/enableStatisticsForComponentName","unlisted":false},{"type":"link","label":"enableStatisticForComponentType","href":"/sst-docs/docs/config/stats/enableStatisticForComponentType","docId":"config/stats/enableStatisticForComponentType","unlisted":false},{"type":"link","label":"enableStatisticsForComponentType","href":"/sst-docs/docs/config/stats/enableStatisticsForComponentType","docId":"config/stats/enableStatisticsForComponentType","unlisted":false},{"type":"link","label":"setStatisticLoadLevel","href":"/sst-docs/docs/config/stats/setStatisticLoadLevel","docId":"config/stats/setStatisticLoadLevel","unlisted":false},{"type":"link","label":"getStatisticLoadLevel","href":"/sst-docs/docs/config/stats/getStatisticLoadLevel","docId":"config/stats/getStatisticLoadLevel","unlisted":false},{"type":"link","label":"setStatisticLoadLevelForComponentName","href":"/sst-docs/docs/config/stats/setStatisticLoadLevelForComponentName","docId":"config/stats/setStatisticLoadLevelForComponentName","unlisted":false},{"type":"link","label":"setStatisticLoadLevelForComponentType","href":"/sst-docs/docs/config/stats/setStatisticLoadLevelForComponentType","docId":"config/stats/setStatisticLoadLevelForComponentType","unlisted":false},{"type":"link","label":"setStatisticOutput","href":"/sst-docs/docs/config/stats/setStatisticOutput","docId":"config/stats/setStatisticOutput","unlisted":false},{"type":"link","label":"setStatisticOutputOption","href":"/sst-docs/docs/config/stats/setStatisticOutputOption","docId":"config/stats/setStatisticOutputOption","unlisted":false},{"type":"link","label":"setStatisticOutputOptions","href":"/sst-docs/docs/config/stats/setStatisticOutputOptions","docId":"config/stats/setStatisticOutputOptions","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/config/stats/overview"},{"type":"category","label":"StatisticObject","items":[{"type":"link","label":"addParam","href":"/sst-docs/docs/config/stats/object/addParam","docId":"config/stats/object/addParam","unlisted":false},{"type":"link","label":"addParams","href":"/sst-docs/docs/config/stats/object/addParams","docId":"config/stats/object/addParams","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/config/stats/object/statisticObject"},{"type":"category","label":"StatisticOutput","items":[{"type":"link","label":"addParam","href":"/sst-docs/docs/config/stats/output/addParam","docId":"config/stats/output/addParam","unlisted":false},{"type":"link","label":"addParams","href":"/sst-docs/docs/config/stats/output/addParams","docId":"config/stats/output/addParams","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/config/stats/output/statisticOutput"},{"type":"category","label":"StatisticGroup","items":[{"type":"link","label":"addComponent","href":"/sst-docs/docs/config/stats/group/addComponent","docId":"config/stats/group/addComponent","unlisted":false},{"type":"link","label":"addStatistic","href":"/sst-docs/docs/config/stats/group/addStatistic","docId":"config/stats/group/addStatistic","unlisted":false},{"type":"link","label":"setFrequency","href":"/sst-docs/docs/config/stats/group/setFrequency","docId":"config/stats/group/setFrequency","unlisted":false},{"type":"link","label":"setOutput","href":"/sst-docs/docs/config/stats/group/setOutput","docId":"config/stats/group/setOutput","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/config/stats/group/statisticGroup"},{"type":"category","label":"UnitAlgebra","items":[{"type":"link","label":"bestSI","href":"/sst-docs/docs/config/unitalgebra/bestSI","docId":"config/unitalgebra/bestSI","unlisted":false},{"type":"link","label":"getFloatValue","href":"/sst-docs/docs/config/unitalgebra/getFloatValue","docId":"config/unitalgebra/getFloatValue","unlisted":false},{"type":"link","label":"getRoundedValue","href":"/sst-docs/docs/config/unitalgebra/getRoundedValue","docId":"config/unitalgebra/getRoundedValue","unlisted":false},{"type":"link","label":"hasUnits","href":"/sst-docs/docs/config/unitalgebra/hasUnits","docId":"config/unitalgebra/hasUnits","unlisted":false},{"type":"link","label":"invert","href":"/sst-docs/docs/config/unitalgebra/invert","docId":"config/unitalgebra/invert","unlisted":false},{"type":"link","label":"isValueZero","href":"/sst-docs/docs/config/unitalgebra/isValueZero","docId":"config/unitalgebra/isValueZero","unlisted":false},{"type":"link","label":"precision","href":"/sst-docs/docs/config/unitalgebra/precision","docId":"config/unitalgebra/precision","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/config/unitalgebra/"}],"elements":[{"type":"link","label":"Overview","href":"/sst-docs/docs/elements/intro","docId":"elements/intro","unlisted":false},{"type":"link","label":"ariel","href":"/sst-docs/docs/elements/ariel/intro","docId":"elements/ariel/intro","unlisted":false},{"type":"category","label":"balar","items":[{"type":"link","label":"QuickStart","href":"/sst-docs/docs/elements/balar/QuickStart","docId":"elements/balar/QuickStart","unlisted":false},{"type":"link","label":"Tracing CUDA Program","href":"/sst-docs/docs/elements/balar/TracingCUDAProgram","docId":"elements/balar/TracingCUDAProgram","unlisted":false},{"type":"link","label":"Compiling RISCV + CUDA","href":"/sst-docs/docs/elements/balar/CompilingRISCVCUDA","docId":"elements/balar/CompilingRISCVCUDA","unlisted":false},{"type":"link","label":"Balar In Depth","href":"/sst-docs/docs/elements/balar/BalarInDepth","docId":"elements/balar/BalarInDepth","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/elements/balar/intro"},{"type":"link","label":"cacheTracer","href":"/sst-docs/docs/elements/cacheTracer/intro","docId":"elements/cacheTracer/intro","unlisted":false},{"type":"link","label":"cassini","href":"/sst-docs/docs/elements/cassini/intro","docId":"elements/cassini/intro","unlisted":false},{"type":"link","label":"cramSim","href":"/sst-docs/docs/elements/cramsim/intro","docId":"elements/cramsim/intro","unlisted":false},{"type":"category","label":"ember","items":[{"type":"link","label":"QuickStart Motif Guide","href":"/sst-docs/docs/elements/ember/QuickStart","docId":"elements/ember/QuickStart","unlisted":false},{"type":"link","label":"Creating Motifs","href":"/sst-docs/docs/elements/ember/CreatingMotifs","docId":"elements/ember/CreatingMotifs","unlisted":false},{"type":"link","label":"Running Motifs","href":"/sst-docs/docs/elements/ember/RunningMotifs","docId":"elements/ember/RunningMotifs","unlisted":false},{"type":"link","label":"Capturing and using OTF2 Traces with Ember","href":"/sst-docs/docs/elements/ember/OTF2Ember","docId":"elements/ember/OTF2Ember","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/elements/ember/intro"},{"type":"link","label":"firefly","href":"/sst-docs/docs/elements/firefly/intro","docId":"elements/firefly/intro","unlisted":false},{"type":"link","label":"gensa","href":"/sst-docs/docs/elements/gensa/intro","docId":"elements/gensa/intro","unlisted":false},{"type":"link","label":"golem","href":"/sst-docs/docs/elements/golem/intro","docId":"elements/golem/intro","unlisted":false},{"type":"link","label":"hermes","href":"/sst-docs/docs/elements/hermes/intro","docId":"elements/hermes/intro","unlisted":false},{"type":"link","label":"iris","href":"/sst-docs/docs/elements/iris/intro","docId":"elements/iris/intro","unlisted":false},{"type":"link","label":"juno","href":"/sst-docs/docs/elements/juno/intro","docId":"elements/juno/intro","unlisted":false},{"type":"link","label":"kingsley","href":"/sst-docs/docs/elements/kingsley/intro","docId":"elements/kingsley/intro","unlisted":false},{"type":"link","label":"llyr","href":"/sst-docs/docs/elements/llyr/intro","docId":"elements/llyr/intro","unlisted":false},{"type":"link","label":"macro","href":"/sst-docs/docs/elements/macro/intro","docId":"elements/macro/intro","unlisted":false},{"type":"link","label":"mask-mpi","href":"/sst-docs/docs/elements/maskmpi/intro","docId":"elements/maskmpi/intro","unlisted":false},{"type":"category","label":"memHierarchy","items":[{"type":"link","label":"StandardMem Interface","href":"/sst-docs/docs/elements/memHierarchy/stdmem","docId":"elements/memHierarchy/stdmem","unlisted":false},{"type":"link","label":"Connecting to MemHierarchy","href":"/sst-docs/docs/elements/memHierarchy/connecting","docId":"elements/memHierarchy/connecting","unlisted":false},{"type":"link","label":"Caches","href":"/sst-docs/docs/elements/memHierarchy/cache","docId":"elements/memHierarchy/cache","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/elements/memHierarchy/intro"},{"type":"link","label":"mercury","href":"/sst-docs/docs/elements/mercury/intro","docId":"elements/mercury/intro","unlisted":false},{"type":"link","label":"merlin","href":"/sst-docs/docs/elements/merlin/intro","docId":"elements/merlin/intro","unlisted":false},{"type":"link","label":"messier","href":"/sst-docs/docs/elements/messier/intro","docId":"elements/messier/intro","unlisted":false},{"type":"link","label":"miranda","href":"/sst-docs/docs/elements/miranda/intro","docId":"elements/miranda/intro","unlisted":false},{"type":"link","label":"mmu","href":"/sst-docs/docs/elements/mmu/intro","docId":"elements/mmu/intro","unlisted":false},{"type":"link","label":"opal","href":"/sst-docs/docs/elements/opal/intro","docId":"elements/opal/intro","unlisted":false},{"type":"link","label":"osseous","href":"/sst-docs/docs/elements/osseous/intro","docId":"elements/osseous/intro","unlisted":false},{"type":"link","label":"prospero","href":"/sst-docs/docs/elements/prospero/intro","docId":"elements/prospero/intro","unlisted":false},{"type":"link","label":"rdmaNic","href":"/sst-docs/docs/elements/rdmaNic/intro","docId":"elements/rdmaNic/intro","unlisted":false},{"type":"link","label":"samba","href":"/sst-docs/docs/elements/samba/intro","docId":"elements/samba/intro","unlisted":false},{"type":"link","label":"serrano","href":"/sst-docs/docs/elements/serrano/intro","docId":"elements/serrano/intro","unlisted":false},{"type":"link","label":"shogun","href":"/sst-docs/docs/elements/shogun/intro","docId":"elements/shogun/intro","unlisted":false},{"type":"link","label":"simpleElementExample","href":"/sst-docs/docs/elements/simpleElementExample/intro","docId":"elements/simpleElementExample/intro","unlisted":false},{"type":"link","label":"simpleExternalElement","href":"/sst-docs/docs/elements/simpleExternalElement/intro","docId":"elements/simpleExternalElement/intro","unlisted":false},{"type":"link","label":"simpleSimulation","href":"/sst-docs/docs/elements/simpleSimulation/intro","docId":"elements/simpleSimulation/intro","unlisted":false},{"type":"link","label":"thornhill","href":"/sst-docs/docs/elements/thornhill/intro","docId":"elements/thornhill/intro","unlisted":false},{"type":"link","label":"vanadis","href":"/sst-docs/docs/elements/vanadis/intro","docId":"elements/vanadis/intro","unlisted":false},{"type":"link","label":"vaultsim","href":"/sst-docs/docs/elements/vaultsim/intro","docId":"elements/vaultsim/intro","unlisted":false},{"type":"link","label":"zodiac","href":"/sst-docs/docs/elements/zodiac/intro","docId":"elements/zodiac/intro","unlisted":false}],"tools":[{"type":"category","label":"Tools","items":[{"type":"link","label":"sst-config","href":"/sst-docs/docs/tools/commandLine/sst-config","docId":"tools/commandLine/sst-config","unlisted":false},{"type":"link","label":"sst-info","href":"/sst-docs/docs/tools/commandLine/sst-info","docId":"tools/commandLine/sst-info","unlisted":false},{"type":"link","label":"sst-register","href":"/sst-docs/docs/tools/commandLine/sst-register","docId":"tools/commandLine/sst-register","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/sst-docs/docs/category/tools"}],"community":[]},"docs":{"community/index":{"id":"community/index","title":"Community","description":"Many community SST developers maintain additional element libraries and tools. We\'ve collected a list of them here."},"config/component/addGlobalParamSet":{"id":"config/component/addGlobalParamSet","title":"addGlobalParamSet","description":"\\"GlobalParam\\" has been renamed to \\"SharedParam\\" in SST 15.0 to better reflect the shared rather than strictly global nature of these parameter sets. See addSharedParamSet instead.","sidebar":"config"},"config/component/addLink":{"id":"config/component/addLink","title":"addLink","description":"\x3c!---","sidebar":"config"},"config/component/addParam":{"id":"config/component/addParam","title":"addParam","description":"\x3c!---","sidebar":"config"},"config/component/addParams":{"id":"config/component/addParams","title":"addParams","description":"\x3c!---","sidebar":"config"},"config/component/addPortModule":{"id":"config/component/addPortModule","title":"addPortModule","description":"Places a PortModule on a port.","sidebar":"config"},"config/component/addSharedParamSet":{"id":"config/component/addSharedParamSet","title":"addSharedParamSet","description":"Add a shared parameter set to a component\'s parameters. Using shared parameter sets reduces memory overhead and can be useful when simulating very large systems where many components have a common parameter subset. Parameters set directly on a component take precedence over shared parameters if there is a conflict.","sidebar":"config"},"config/component/classes":{"id":"config/component/classes","title":"Component and SubComponent Classes","description":"\x3c!---","sidebar":"config"},"config/component/component":{"id":"config/component/component","title":"Component","description":"\x3c!---","sidebar":"config"},"config/component/createStatistic":{"id":"config/component/createStatistic","title":"createStatistic","description":"Create a statistic object that can then be used in a specific statistic slot (e.g., using setStatistc).","sidebar":"config"},"config/component/enableAllStatistics":{"id":"config/component/enableAllStatistics","title":"enableAllStatistics","description":"\x3c!---","sidebar":"config"},"config/component/enableStatistics":{"id":"config/component/enableStatistics","title":"enableStatistics","description":"\x3c!---","sidebar":"config"},"config/component/getFullName":{"id":"config/component/getFullName","title":"getFullName","description":"\x3c!---","sidebar":"config"},"config/component/getType":{"id":"config/component/getType","title":"getType","description":"\x3c!---","sidebar":"config"},"config/component/setCoordinates":{"id":"config/component/setCoordinates","title":"setCoordinates","description":"\x3c!---","sidebar":"config"},"config/component/setRank":{"id":"config/component/setRank","title":"setRank","description":"\x3c!---","sidebar":"config"},"config/component/setStatistic":{"id":"config/component/setStatistic","title":"setStatistic","description":"\x3c!---","sidebar":"config"},"config/component/setStatisticLoadLevel":{"id":"config/component/setStatisticLoadLevel","title":"setStatisticLoadLevel","description":"\x3c!---","sidebar":"config"},"config/component/setSubComponent":{"id":"config/component/setSubComponent","title":"setSubComponent","description":"\x3c!---","sidebar":"config"},"config/component/setWeight":{"id":"config/component/setWeight","title":"setWeight","description":"\x3c!---","sidebar":"config"},"config/config":{"id":"config/config","title":"Python Configuration File","description":"\x3c!---","sidebar":"config"},"config/general/addGlobalParam":{"id":"config/general/addGlobalParam","title":"addGlobalParam","description":"\\"GlobalParam\\" has been renamed to \\"SharedParam\\" in SST 15.0 to better reflect the shared rather than strictly global nature of these parameter sets. See addSharedParam instead.","sidebar":"config"},"config/general/addGlobalParams":{"id":"config/general/addGlobalParams","title":"addGlobalParams","description":"\\"GlobalParam\\" has been renamed to \\"SharedParam\\" in SST 15.0 to better reflect the shared rather than strictly global nature of these parameter sets. See addSharedParams instead.","sidebar":"config"},"config/general/addSharedParam":{"id":"config/general/addSharedParam","title":"addSharedParam","description":"It is common for multiple components or subcomponents in a simulation to share a common subset of parameters. Shared parameter sets can be used to reduce memory usage during simulation construction for such cases. This is particularly helpful for very large simulations where the total state of the simulation graph before it is distributed may exceed the available memory on rank 0. To use shared parameters, register parameters to named sets using addSharedParam() and/or addSharedParams(). Then, subscribe components and subcomponents to the named parameter set(s) using addSharedParamSet(). In case of conflicts, parameters set directly on components take precedence over those provided in shared parameter sets.","sidebar":"config"},"config/general/addSharedParams":{"id":"config/general/addSharedParams","title":"addSharedParams","description":"It is common for multiple components or subcomponents in a simulation to share a common subset of parameters. Shared parameter sets can be used to reduce memory usage during simulation construction for such cases. This is particularly helpful for very large simulations where the total state of the simulation graph before it is distributed may exceed the available memory on rank 0. To use shared parameters, register parameters to named sets using addSharedParam() and/or addSharedParams(). Then, subscribe components and subcomponents to the named parameter set(s) using addSharedParamSet(). In case of conflicts, parameters set directly on components take precedence over those provided in shared parameter sets.","sidebar":"config"},"config/general/exit":{"id":"config/general/exit","title":"exit","description":"Causes the simulation to exit.","sidebar":"config"},"config/general/findComponentByName":{"id":"config/general/findComponentByName","title":"findComponentByName","description":"In many cases, Components and SubComponents will be created using library functions and the user will not have direct access to their handles. In some instances, the provided python modules will have accessor functions that can provide handles to these elements. If this is not provided by the library, the user can call the findComponentByName() function to get a handle to the desired element. The function can find handles for both Components and SubComponents. The use of this function presupposes a knowledge of the naming convention of the elements in the build functions of the library.","sidebar":"config"},"config/general/getElapsedExecutionTime":{"id":"config/general/getElapsedExecutionTime","title":"getElapsedExecutionTime","description":"Returns the real (wall) elapsed time since simulation start. The value is returned as a UnitAlgebra and is not precise enough for fine-grained timing analysis. For that, use the built-in timing module.","sidebar":"config"},"config/general/getLocalMemoryUsage":{"id":"config/general/getLocalMemoryUsage","title":"getLocalMemoryUsage","description":"Returns the current memory use as a UnitAlgebra.","sidebar":"config"},"config/general/getMPIRankCount":{"id":"config/general/getMPIRankCount","title":"getMPIRankCount","description":"Returns the number of physical MPI ranks in the simulation","sidebar":"config"},"config/general/getMyMPIRank":{"id":"config/general/getMyMPIRank","title":"getMyMPIRank","description":"Returns the MPI rank that the script is running on.","sidebar":"config"},"config/general/getProgramOptions":{"id":"config/general/getProgramOptions","title":"getProgramOptions","description":"Returns a dictionary with the current values of the program options. This will include all program options, not just those set in the python file.","sidebar":"config"},"config/general/getThreadCount":{"id":"config/general/getThreadCount","title":"getThreadCount","description":"Returns the threads per rank specified for the simulation.","sidebar":"config"},"config/general/popNamePrefix":{"id":"config/general/popNamePrefix","title":"popNamePrefix","description":"Pops a prefix from the name stack. See pushNamePrefix for how name stacks are used.","sidebar":"config"},"config/general/pushNamePrefix":{"id":"config/general/pushNamePrefix","title":"pushNamePrefix","description":"Pushes a name prefix onto the name stack. This prefix will be added on the names of all Components and Links. The names in the stack are separated by a period. Example, if pushNamePrefix(\u201cbase\u201d) and pushNamePrefix(\u201cnext\u201d) were called in that order, the prefixed name would be \u201cbase.next\u201d. Prefixes can be popped from the stack using popNamePrefix().","sidebar":"config"},"config/general/setCallPythonFinalize":{"id":"config/general/setCallPythonFinalize","title":"setCallPythonFinalize","description":"Sets whether or not PyFinalize will be called when SST model generate finishes. PyFinalize is called by default if this function is not used.","sidebar":"config"},"config/general/setProgramOption":{"id":"config/general/setProgramOption","title":"setProgramOption","description":"Sets the specified program option for the simulation. These mirror the options available on the sst command line. Parameters set in the python file will be overwritten by options set on the command line. Use sst \u2013help to get a list of available options.","sidebar":"config"},"config/general/setProgramOptions":{"id":"config/general/setProgramOptions","title":"setProgramOptions","description":"Sets multiple program options for the simulation. These mirror the options available on the sst command line. Parameters set in the python file will be overwritten by options set on the command line. Use sst \u2013help to get a list of available options.","sidebar":"config"},"config/general/setThreadCount":{"id":"config/general/setThreadCount","title":"setThreadCount","description":"Sets the number of threads per rank for the simulation. These values can be overwritten by using \\\\-n on the command line.","sidebar":"config"},"config/link/connect":{"id":"config/link/connect","title":"connect","description":"\x3c!---","sidebar":"config"},"config/link/link":{"id":"config/link/link","title":"Link","description":"Creates a Link. A Link connects two ports and enables the components on each port to send events across the link.","sidebar":"config"},"config/link/setNoCut":{"id":"config/link/setNoCut","title":"setNoCut","description":"\x3c!---","sidebar":"config"},"config/stats/enableAllStatisticsForAllComponents":{"id":"config/stats/enableAllStatisticsForAllComponents","title":"enableAllStatisticsForAllComponents","description":"\x3c!---","sidebar":"config"},"config/stats/enableAllStatisticsForComponentName":{"id":"config/stats/enableAllStatisticsForComponentName","title":"enableAllStatisticsForComponentName","description":"\x3c!---","sidebar":"config"},"config/stats/enableAllStatisticsForComponentType":{"id":"config/stats/enableAllStatisticsForComponentType","title":"enableAllStatisticsForComponentType","description":"\x3c!---","sidebar":"config"},"config/stats/enableStatisticForComponentName":{"id":"config/stats/enableStatisticForComponentName","title":"enableStatisticForComponentName","description":"\x3c!---","sidebar":"config"},"config/stats/enableStatisticForComponentType":{"id":"config/stats/enableStatisticForComponentType","title":"enableStatisticForComponentType","description":"\x3c!---","sidebar":"config"},"config/stats/enableStatisticsForComponentName":{"id":"config/stats/enableStatisticsForComponentName","title":"enableStatisticsForComponentName","description":"\x3c!---","sidebar":"config"},"config/stats/enableStatisticsForComponentType":{"id":"config/stats/enableStatisticsForComponentType","title":"enableStatisticsForComponentType","description":"\x3c!---","sidebar":"config"},"config/stats/getStatisticLoadLevel":{"id":"config/stats/getStatisticLoadLevel","title":"getStatisticLoadLevel","description":"\x3c!---","sidebar":"config"},"config/stats/group/addComponent":{"id":"config/stats/group/addComponent","title":"addComponent","description":"\x3c!---","sidebar":"config"},"config/stats/group/addStatistic":{"id":"config/stats/group/addStatistic","title":"addStatistic","description":"\x3c!---","sidebar":"config"},"config/stats/group/setFrequency":{"id":"config/stats/group/setFrequency","title":"setFrequency","description":"\x3c!---","sidebar":"config"},"config/stats/group/setOutput":{"id":"config/stats/group/setOutput","title":"setOutput","description":"\x3c!---","sidebar":"config"},"config/stats/group/statisticGroup":{"id":"config/stats/group/statisticGroup","title":"Statistics Groups","description":"\x3c!---","sidebar":"config"},"config/stats/object/addParam":{"id":"config/stats/object/addParam","title":"addParam","description":"\x3c!---","sidebar":"config"},"config/stats/object/addParams":{"id":"config/stats/object/addParams","title":"addParams","description":"\x3c!---","sidebar":"config"},"config/stats/object/statisticObject":{"id":"config/stats/object/statisticObject","title":"Statistics Objects","description":"\x3c!---","sidebar":"config"},"config/stats/output/addParam":{"id":"config/stats/output/addParam","title":"addParam","description":"\x3c!---","sidebar":"config"},"config/stats/output/addParams":{"id":"config/stats/output/addParams","title":"addParams","description":"\x3c!---","sidebar":"config"},"config/stats/output/statisticOutput":{"id":"config/stats/output/statisticOutput","title":"Statistics Output","description":"\x3c!---","sidebar":"config"},"config/stats/overview":{"id":"config/stats/overview","title":"Statistics in the SST Python Module","description":"\x3c!---","sidebar":"config"},"config/stats/setStatisticLoadLevel":{"id":"config/stats/setStatisticLoadLevel","title":"setStatisticLoadLevel","description":"\x3c!---","sidebar":"config"},"config/stats/setStatisticLoadLevelForComponentName":{"id":"config/stats/setStatisticLoadLevelForComponentName","title":"setStatisticLoadLevelForComponentName","description":"\x3c!---","sidebar":"config"},"config/stats/setStatisticLoadLevelForComponentType":{"id":"config/stats/setStatisticLoadLevelForComponentType","title":"setStatisticLoadLevelForComponentType","description":"\x3c!---","sidebar":"config"},"config/stats/setStatisticOutput":{"id":"config/stats/setStatisticOutput","title":"setStatisticOutput","description":"\x3c!---","sidebar":"config"},"config/stats/setStatisticOutputOption":{"id":"config/stats/setStatisticOutputOption","title":"setStatisticOutputOption","description":"\x3c!---","sidebar":"config"},"config/stats/setStatisticOutputOptions":{"id":"config/stats/setStatisticOutputOptions","title":"setStatisticOutputOptions","description":"\x3c!---","sidebar":"config"},"config/unitalgebra/bestSI":{"id":"config/unitalgebra/bestSI","title":"bestSI","description":"Returns a string of the UnitAlgebra with reasonable SI units. For example, returns \\"1KHz\\" instead of \\"1000Hz\\".","sidebar":"config"},"config/unitalgebra/getFloatValue":{"id":"config/unitalgebra/getFloatValue","title":"getFloatValue","description":"Get the value of the UnitAlgebra as a float.","sidebar":"config"},"config/unitalgebra/getRoundedValue":{"id":"config/unitalgebra/getRoundedValue","title":"getRoundedValue","description":"Get the value of the UnitAlgebra as an integer.","sidebar":"config"},"config/unitalgebra/hasUnits":{"id":"config/unitalgebra/hasUnits","title":"hasUnits","description":"Returns whether the UnitAlgebra has the specified units.","sidebar":"config"},"config/unitalgebra/invert":{"id":"config/unitalgebra/invert","title":"invert","description":"Inverts a UnitAlgebra.","sidebar":"config"},"config/unitalgebra/isValueZero":{"id":"config/unitalgebra/isValueZero","title":"isValueZero","description":"Returns whether the value portion of the UnitAlgebra is 0.","sidebar":"config"},"config/unitalgebra/precision":{"id":"config/unitalgebra/precision","title":"precision","description":"Returns a string of the UnitAlgebra with the option of specifying how many digits to round to.","sidebar":"config"},"config/unitalgebra/unitalgebra":{"id":"config/unitalgebra/unitalgebra","title":"UnitAlgebra (Python)","description":"UnitAlgebra allows the manipulation of values with units that are common in architectural simulations. Basic arithmetic (addition, subtraction, multiplication, division, inversion, etc.), comparison functions, and  conversion between related units such as bits and bytes are supported. UnitAlgebra also handles SI units. UnitAlgebra types can be passed into most SST Python API functions that accept strings with units, including as parameters and link latencies.","sidebar":"config"},"contribute/get-involved":{"id":"contribute/get-involved","title":"Get Involved","description":"Help us document SST by contributing to this site."},"core/clock/class":{"id":"core/clock/class","title":"Clock","description":"Clocks are SST events that are triggered at a regular cadence. A (sub)component can register a clock with a period or frequency and a handler which will cause a callback to the handler at the specified clock period.","sidebar":"core"},"core/clock/clock_handler":{"id":"core/clock/clock_handler","title":"Clock Handlers","description":"Clock handlers must follow the function definitions above. When the SSTCore invokes a handler, it passes in the current cycle count, and optionally, an additional argument provided by the user. The handler function should return a boolean value indicating whether the clock should be disabled (true) or stay enabled (false). Disabling a clock function through the handler is more efficient than using unregisterClock().","sidebar":"core"},"core/component/component/class":{"id":"core/component/component/class","title":"SST::Component","description":"A Component is the basic unit of simulation in SST. Components communicate with other components via SST Events sent over SST links. Components can load SubComponents and ComponentExtensions for additional functionality.","sidebar":"core"},"core/component/component/constructor":{"id":"core/component/component/constructor","title":"constructor","description":"Availability: Component","sidebar":"core"},"core/component/component/destructor":{"id":"core/component/component/destructor","title":"destructor","description":"Availability: Component","sidebar":"core"},"core/component/component/primaryComponentDoNotEndSim":{"id":"core/component/component/primaryComponentDoNotEndSim","title":"primaryComponentDoNotEndSim","description":"Availability: Component","sidebar":"core"},"core/component/component/primaryComponentOKToEndSim":{"id":"core/component/component/primaryComponentOKToEndSim","title":"primaryComponentOKToEndSim","description":"Availability: Component","sidebar":"core"},"core/component/component/registerAsPrimaryComponent":{"id":"core/component/component/registerAsPrimaryComponent","title":"registerAsPrimaryComponent","description":"Availability: Component","sidebar":"core"},"core/component/componentext/class":{"id":"core/component/componentext/class","title":"SST::ComponentExtension","description":"A ComponentExtension is a class that shares ELI with a Component. It can be useful when it is convenient to divide a Component class into separate classes but the additional classes do not need to be dynamically loadable or otherwise available to SST users. A ComponentExtension has access to the SST simulation via the Component it is loaded into. In parallel simulations, a ComponentExtension is always co-located with its Component.","sidebar":"core"},"core/component/componentext/constructor":{"id":"core/component/componentext/constructor","title":"constructor","description":"Availability: ComponentExtension","sidebar":"core"},"core/component/componentext/destructor":{"id":"core/component/componentext/destructor","title":"destructor","description":"Availability: ComponentExtension","sidebar":"core"},"core/component/info/getCoordinates":{"id":"core/component/info/getCoordinates","title":"getCoordinates","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/info/getCurrentPriority":{"id":"core/component/info/getCurrentPriority","title":"getCurrentPriority","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/info/getId":{"id":"core/component/info/getId","title":"getId","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/info/getName":{"id":"core/component/info/getName","title":"getName","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/info/getNumRanks":{"id":"core/component/info/getNumRanks","title":"getNumRanks","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/info/getParentComponentName":{"id":"core/component/info/getParentComponentName","title":"getParentComponentName","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/info/getRank":{"id":"core/component/info/getRank","title":"getRank","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/info/getType":{"id":"core/component/info/getType","title":"getType","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/info/isAnonymous":{"id":"core/component/info/isAnonymous","title":"isAnonymous","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/info/isSimulationRunModeBoth":{"id":"core/component/info/isSimulationRunModeBoth","title":"isSimulationRunModeBoth","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/info/isSimulationRunModeInit":{"id":"core/component/info/isSimulationRunModeInit","title":"isSimulationRunModeInit","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/info/isSimulationRunModeRun":{"id":"core/component/info/isSimulationRunModeRun","title":"isSimulationRunModeRun","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/info/isUser":{"id":"core/component/info/isUser","title":"isUser","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/info/requireLibrary":{"id":"core/component/info/requireLibrary","title":"requireLibrary","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/introduction":{"id":"core/component/introduction","title":"Introduction","description":"The fundamental building block of an SST simulation is a Component. A Component is a C++ class that implements some part of the simulated system and interacts with other Components via Events sent on Links. Component functionality can be dynamically extended using SubComponents and ComponentExtensions. These three objects, Components, SubComponents, and ComponentExtensions, share a common API defined in the SST::BaseComponent class. The classes also each have their own class-specific functions. The common APIs as well as the class-specific ones are described in this section.","sidebar":"core"},"core/component/lifecycle/complete":{"id":"core/component/lifecycle/complete","title":"complete","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/lifecycle/emergencyShutdown":{"id":"core/component/lifecycle/emergencyShutdown","title":"emergencyShutdown","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/lifecycle/finish":{"id":"core/component/lifecycle/finish","title":"finish","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/lifecycle/init":{"id":"core/component/lifecycle/init","title":"init","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/lifecycle/printStatus":{"id":"core/component/lifecycle/printStatus","title":"printStatus","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/lifecycle/setup":{"id":"core/component/lifecycle/setup","title":"setup","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/link/configureLink":{"id":"core/component/link/configureLink","title":"configureLink","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/link/configureSelfLink":{"id":"core/component/link/configureSelfLink","title":"configureSelfLink","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/link/isPortConnected":{"id":"core/component/link/isPortConnected","title":"isPortConnected","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/load/doesSubComponentExist":{"id":"core/component/load/doesSubComponentExist","title":"doesSubComponentExist","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/load/getSubComponentSlotInfo":{"id":"core/component/load/getSubComponentSlotInfo","title":"getSubComponentSlotInfo","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/load/isSubComponentLoadableUsingAPI":{"id":"core/component/load/isSubComponentLoadableUsingAPI","title":"isSubComponentLoadableUsingAPI","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/load/isUserSubComponentLoadableUsingAPI":{"id":"core/component/load/isUserSubComponentLoadableUsingAPI","title":"isUserSubComponentLoadableUsingAPI","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/load/loadAnonymousSubComponent":{"id":"core/component/load/loadAnonymousSubComponent","title":"loadAnonymousSubComponent","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/load/loadComponentExtension":{"id":"core/component/load/loadComponentExtension","title":"loadComponentExtension","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/load/loadModule":{"id":"core/component/load/loadModule","title":"loadModule","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/load/loadUserSubComponent":{"id":"core/component/load/loadUserSubComponent","title":"loadUserSubComponent","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/load/registerProfilePoint":{"id":"core/component/load/registerProfilePoint","title":"registerProfilePoint","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/output/fatal":{"id":"core/component/output/fatal","title":"fatal","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/output/getOutputDirectory":{"id":"core/component/output/getOutputDirectory","title":"getOutputDirectory","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/output/getSimulationOutput":{"id":"core/component/output/getSimulationOutput","title":"getSimulationOutput","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/output/initiateInteractive":{"id":"core/component/output/initiateInteractive","title":"initiateInteractive","description":"Tell the SST simulation to enter interactive mode and drop into a debug console. The simulation will enter interactive mode when control returns to SST from the current handler. The parameter msg will be passed to the console to aid the user in determining why the simulation entered interactive mode.","sidebar":"core"},"core/component/output/sst_assert":{"id":"core/component/output/sst_assert","title":"sst_assert","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/serialization/serialize_order":{"id":"core/component/serialization/serialize_order","title":"serialize_order","description":"Availability: Component, ComponentExtension, SubComponent","sidebar":"core"},"core/component/stat/doesComponentInfoStatisticExist":{"id":"core/component/stat/doesComponentInfoStatisticExist","title":"doesComponentInfoStatisticExist","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/stat/getComponentInfoStatisticEnableLevel":{"id":"core/component/stat/getComponentInfoStatisticEnableLevel","title":"getComponentInfoStatisticEnableLevel","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/stat/getStatisticLoadLevel":{"id":"core/component/stat/getStatisticLoadLevel","title":"getStatisticLoadLevel","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/stat/isStatisticShared":{"id":"core/component/stat/isStatisticShared","title":"isStatisticShared","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/stat/performGlobalStatisticOutput":{"id":"core/component/stat/performGlobalStatisticOutput","title":"performGlobalStatisticOutput","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/stat/performStatisticOutput":{"id":"core/component/stat/performStatisticOutput","title":"performStatisticOutput","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/stat/registerMultiStatistic":{"id":"core/component/stat/registerMultiStatistic","title":"registerMultiStatistic","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/stat/registerStatistic":{"id":"core/component/stat/registerStatistic","title":"registerStatistic","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/subcomponent/class":{"id":"core/component/subcomponent/class","title":"SST::SubComponent","description":"A SubComponent is a modular piece of functionality that can be dynamically loaded into a Component or another SubComponent. SubComponents can be declared in the SST configuration input file (i.e., a user subcomponent) or can be loaded directly by a (sub)component such that the user may not have control over which component is loaded (i.e., an anonymous subcomponent). A parent (sub)Component interacts directly with its loaded subcomponent via function calls. SubComponents and their parents are always co-located when SST is running in parallel.","sidebar":"core"},"core/component/subcomponent/constructor":{"id":"core/component/subcomponent/constructor","title":"constructor","description":"Availability: SubComponent","sidebar":"core"},"core/component/subcomponent/destructor":{"id":"core/component/subcomponent/destructor","title":"destructor","description":"Availability: SubComponent","sidebar":"core"},"core/component/time/getCompletePhaseElapsedRealTime":{"id":"core/component/time/getCompletePhaseElapsedRealTime","title":"getCompletePhaseElapsedRealTime","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/getCoreTimeBase":{"id":"core/component/time/getCoreTimeBase","title":"getCoreTimeBase","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/getCurrentSimCycle":{"id":"core/component/time/getCurrentSimCycle","title":"getCurrentSimCycle","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/getCurrentSimTime":{"id":"core/component/time/getCurrentSimTime","title":"getCurrentSimTime","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/getCurrentSimTimeMicro":{"id":"core/component/time/getCurrentSimTimeMicro","title":"getCurrentSimTimeMicro","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/getCurrentSimTimeMilli":{"id":"core/component/time/getCurrentSimTimeMilli","title":"getCurrentSimTimeMilli","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/getCurrentSimTimeNano":{"id":"core/component/time/getCurrentSimTimeNano","title":"getCurrentSimTimeNano","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/getDefaultTimeBase":{"id":"core/component/time/getDefaultTimeBase","title":"getDefaultTimeBase","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/getElapsedSimTime":{"id":"core/component/time/getElapsedSimTime","title":"getElapsedSimTime","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/getEndSimCycle":{"id":"core/component/time/getEndSimCycle","title":"getEndSimCycle","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/getEndTime":{"id":"core/component/time/getEndTime","title":"getEndTime","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/getInitPhaseElapsedRealTime":{"id":"core/component/time/getInitPhaseElapsedRealTime","title":"getInitPhaseElapsedRealTime","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/getNextClockCycle":{"id":"core/component/time/getNextClockCycle","title":"getNextClockCycle","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/getRunPhaseElapsedRealTime":{"id":"core/component/time/getRunPhaseElapsedRealTime","title":"getRunPhaseElapsedRealTime","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/getTimeConverter":{"id":"core/component/time/getTimeConverter","title":"getTimeConverter","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/registerClock":{"id":"core/component/time/registerClock","title":"registerClock","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/registerTimeBase":{"id":"core/component/time/registerTimeBase","title":"registerTimeBase","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/reregisterClock":{"id":"core/component/time/reregisterClock","title":"reregisterClock","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/setDefaultTimeBase":{"id":"core/component/time/setDefaultTimeBase","title":"setDefaultTimeBase","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/component/time/unregisterClock":{"id":"core/component/time/unregisterClock","title":"unregisterClock","description":"Availability: Component, SubComponent, ComponentExtension","sidebar":"core"},"core/deprecations":{"id":"core/deprecations","title":"Deprecation history","description":"See the below table for information on deprecations in current and past SSTCore releases.","sidebar":"core"},"core/eli/delete/sst_eli_delete_attribute":{"id":"core/eli/delete/sst_eli_delete_attribute","title":"SST_ELI_DELETE_ATTRIBUTE","description":"Availability: Component, SubComponent","sidebar":"core"},"core/eli/delete/sst_eli_delete_param":{"id":"core/eli/delete/sst_eli_delete_param","title":"SST_ELI_DELETE_PARAM","description":"Availability: Component, SubComponent, Module, ProfilePoint","sidebar":"core"},"core/eli/delete/sst_eli_delete_port":{"id":"core/eli/delete/sst_eli_delete_port","title":"SST_ELI_DELETE_PORT","description":"Availability: Component, SubComponent","sidebar":"core"},"core/eli/delete/sst_eli_delete_profile_point":{"id":"core/eli/delete/sst_eli_delete_profile_point","title":"SST_ELI_DELETE_PROFILE_POINT","description":"Availability: Component, SubComponent","sidebar":"core"},"core/eli/delete/sst_eli_delete_stat":{"id":"core/eli/delete/sst_eli_delete_stat","title":"SST_ELI_DELETE_STAT","description":"Use this macro inside an SSTELIDOCUMENTSTATISTICS macro to remove a statistic from the object\'s ELI. This can be useful when an object has inherited ELI that it doesn\'t support.","sidebar":"core"},"core/eli/delete/sst_eli_delete_subcomponent_slot":{"id":"core/eli/delete/sst_eli_delete_subcomponent_slot","title":"SST_ELI_DELETE_SUBCOMPONENT_SLOT","description":"Use this macro inside an SSTELIDOCUMENTSUBCOMPONENTSLOTS macro to remove a subcomponent slot from the object\'s ELI. This can be useful when an object has inherited ELI that it doesn\'t support.","sidebar":"core"},"core/eli/document/sst_eli_document_attributes":{"id":"core/eli/document/sst_eli_document_attributes","title":"SST_ELI_DOCUMENT_ATTRIBUTES","description":"Availability: Component, SubComponent","sidebar":"core"},"core/eli/document/sst_eli_document_params":{"id":"core/eli/document/sst_eli_document_params","title":"SST_ELI_DOCUMENT_PARAMS","description":"Availability: Component, SubComponent, Module, ProfilePoint","sidebar":"core"},"core/eli/document/sst_eli_document_ports":{"id":"core/eli/document/sst_eli_document_ports","title":"SST_ELI_DOCUMENT_PORTS","description":"Availability: Component, SubComponent","sidebar":"core"},"core/eli/document/sst_eli_document_profile_points":{"id":"core/eli/document/sst_eli_document_profile_points","title":"SST_ELI_DOCUMENT_PROFILE_POINTS","description":"Availability: Component, SubComponent","sidebar":"core"},"core/eli/document/sst_eli_document_statistics":{"id":"core/eli/document/sst_eli_document_statistics","title":"SST_ELI_DOCUMENT_STATISTICS","description":"Availability: Components, SubComponents","sidebar":"core"},"core/eli/document/sst_eli_document_subcomponent_slots":{"id":"core/eli/document/sst_eli_document_subcomponent_slots","title":"SST_ELI_DOCUMENT_SUBCOMPONENT_SLOTS","description":"List of slots that the (sub)component exposes. A single slot can have multiple subcomponents assigned to it. SST does not allow subcomponents to be loaded into slots that are not documented with this macro.","sidebar":"core"},"core/eli/other/sst_eli_category_info":{"id":"core/eli/other/sst_eli_category_info","title":"SST_ELI_CATEGORY_INFO","description":"Component categories are a set of common categories that architectural components fall in. Each component must have a category assigned in SSTELIREGISTERCOMPONENT. These categories are used to help document components and are displayed when running sst-info. The available categories are shown above.","sidebar":"core"},"core/eli/other/sst_eli_element_version":{"id":"core/eli/other/sst_eli_element_version","title":"SST_ELI_ELEMENT_VERSION","description":"This macro is used inside some of the SST registration macros to assign a version to SST objects. The version is not checked by SST and does not need to match the SST version. The macro is provided to assist element library developers with versioning and managing compatibility between libraries. The macro takes a triple of numbers which are converted to an X.Y.Z version number.","sidebar":"core"},"core/eli/other/sst_eli_export":{"id":"core/eli/other/sst_eli_export","title":"SST_ELI_EXPORT","description":"ELI macros must reside in a public section of the C++ class they belong too. In most cases, this is also in a header file. If a class is declared entirely in an implementation file and includes any ELI macros, this macro must also be used to ensure some compilers (e.g., Intel) find the ELI. ELI declared in header files does not require the use of this macro.","sidebar":"core"},"core/eli/overview":{"id":"core/eli/overview","title":"Element Library Information (ELI)","description":"Element Library Information or ELI refers to information about each SST object that the SST Core keeps track of. This information includes things like which classes are available to SST for dynamic loading, which statistics an object generates, what kinds of SubComponents can be loaded into an object and more. ELI facilitates dynamic loading of libraries, introspection of libraries via the sst-info command-line utility, error checking input configurations, and many other operations. SST uses a series of macros to register ELI with the SST Core.","sidebar":"core"},"core/eli/register/sst_eli_register_component":{"id":"core/eli/register/sst_eli_register_component","title":"SST_ELI_REGISTER_COMPONENT","description":"All components must register themselves with SST using this macro. The library and name strings provided in this macro","sidebar":"core"},"core/eli/register/sst_eli_register_component_base":{"id":"core/eli/register/sst_eli_register_component_base","title":"SST_ELI_REGISTER_COMPONENT_BASE","description":"This macro enables a class that inherits directly from SST::Component but is not itself a Component (e.g., the class is intended to be a base class for other component classes) to register ELI information and have that information inherited by its child component classes.","sidebar":"core"},"core/eli/register/sst_eli_register_component_derived_base":{"id":"core/eli/register/sst_eli_register_component_derived_base","title":"SST_ELI_REGISTER_COMPONENT_DERIVED_BASE","description":"This macro registers the inheritance chain for a class that does not directly inherit from SST::Component and is not itself intended to be an SST Component, but will be the base class for an SST Component. Registering these classes allows SST to identify which ELI information should be inherited by a child Component. The names provided to the macro must be the fully qualified class names. ELI documentation macros declared by this class will be inherited by child classes.","sidebar":"core"},"core/eli/register/sst_eli_register_module":{"id":"core/eli/register/sst_eli_register_module","title":"SST_ELI_REGISTER_MODULE","description":"As of SST 13 the apiclassname field must be specified as a class name, not as a string.","sidebar":"core"},"core/eli/register/sst_eli_register_module_api":{"id":"core/eli/register/sst_eli_register_module_api","title":"SST_ELI_REGISTER_MODULE_API","description":"A module API defines the API for a particular variety of SST Modules. This macro is used to register a class that defines a module API with the SST Core. This class should also inherit from SST::Module. If instead this class inherits from another Module API, the SSTELIREGISTERMODULEDERIVEDAPI. A class may be both a module API and a module itself and include both registration macros. Modules that inherit from the registered API will also inherit any ELI documented by the API class.","sidebar":"core"},"core/eli/register/sst_eli_register_module_derived_api":{"id":"core/eli/register/sst_eli_register_module_derived_api","title":"SST_ELI_REGISTER_MODULE_DERIVED_API","description":"If a module API inherits from another module API, the \\"derived\\" or child API should use this macro to register itself. Modules that implement the API registered in this call will inherit all ELI documented by this API as well as any the API inherits from.","sidebar":"core"},"core/eli/register/sst_eli_register_profiletool":{"id":"core/eli/register/sst_eli_register_profiletool","title":"SST_ELI_REGISTER_PROFILETOOL","description":"This macro is used to register a profiling tool with SST. The library and name strings provided in this macro will be used by SST to identify the tool as \\"library.name\\". The version and description are displayed","sidebar":"core"},"core/eli/register/sst_eli_register_python_module":{"id":"core/eli/register/sst_eli_register_python_module","title":"SST_ELI_REGISTER_PYTHON_MODULE","description":"Libraries can implement python modules to assist with, for example, configuration. Such modules use this macro to register with the SST Core. Modules will be available as submodules in the \'sst\' python module.","sidebar":"core"},"core/eli/register/sst_eli_register_realtimeaction":{"id":"core/eli/register/sst_eli_register_realtimeaction","title":"SST_ELI_REGISTER_REALTIMEACTION","description":"RealTimeActions must register themselves with SST using this macro. The library and name strings provided in this macro will be used by SST to identify the action as \\"library.name\\". The version and description fields document the purpose and version of the action.","sidebar":"core"},"core/eli/register/sst_eli_register_subcomponent":{"id":"core/eli/register/sst_eli_register_subcomponent","title":"SST_ELI_REGISTER_SUBCOMPONENT","description":"All SubComponents must register themselves with SST using this macro. The library and name strings provided in this macro will be used by SST to identify the subcomponent as \\"library.name\\". The version, description, and category are displayed by sst-info to document the purpose and version of the SubComponent. The interface declares which SubComponent API this subcomponent implements which is used to check compatibility with SubComponent slots. The interface must also be registered with SST using the SSTELIREGISTERSUBCOMPONENTAPI or SSTELIREGISTERSUBCOMPONENTDERIVEDAPI macro.","sidebar":"core"},"core/eli/register/sst_eli_register_subcomponent_api":{"id":"core/eli/register/sst_eli_register_subcomponent_api","title":"SST_ELI_REGISTER_SUBCOMPONENT_API","description":"SubComponents implement a specific API and SubComponent slots require any SubComponents loaded into them to implement a specific API. This macro registers SubComponent APIs with SST Core. If a SubComponent API inherits from another registered SubComponent API (as opposed to, for example, SST::SubComponent directly), the API should instead register using the SSTELIREGISTERSUBCOMPONENTDERIVEDAPI macro.","sidebar":"core"},"core/eli/register/sst_eli_register_subcomponent_derived_api":{"id":"core/eli/register/sst_eli_register_subcomponent_derived_api","title":"SST_ELI_REGISTER_SUBCOMPONENT_DERIVED_API","description":"If a subcomponent API inherits from another subcomponent API, the \\"derived\\" or child API should use this macro to register itself. SubComponents that implement the API registered in this call will inherit all ELI documented by this API as well as any the API inherits from.","sidebar":"core"},"core/events/class":{"id":"core/events/class","title":"SST::Event","description":"The Event class in SST is the base class for all simulation Events that get passed over Links. Libraries are expected to implement their own event types that derive from the SST::Event class. The base class provides some common functions for all events.","sidebar":"core"},"core/events/clone":{"id":"core/events/clone","title":"clone","description":"clone() can be implemented by event classes for copying the event.","sidebar":"core"},"core/events/constructor":{"id":"core/events/constructor","title":"constructor","description":"Constructor for event. Returns a new SST::Event.","sidebar":"core"},"core/events/copyAllDeliveryInfo":{"id":"core/events/copyAllDeliveryInfo","title":"copyAllDeliveryInfo","description":"Copies delivery metadata from the provided activity (typically another event). In certain instances such as a PortModule replacing an event with another, this needs to be called to transfer delivery information. Otherwise, it rarely needs to be called directly by elements.","sidebar":"core"},"core/events/destructor":{"id":"core/events/destructor","title":"destructor","description":"Delete an event.","sidebar":"core"},"core/events/event_handler":{"id":"core/events/event_handler","title":"SST::Event::Handler","description":"Event handlers are used by Links when an event arrives on the Link. The handler passes in the event as well as optional data if the handler was registered with an extra field. The handler does not return anything.","sidebar":"core"},"core/events/generateUniqueId":{"id":"core/events/generateUniqueId","title":"generateUniqueId","description":"Returns a unique ID of the form std::pair where the second member is the rank the id is created on and the first is a unique number across all calls to this function on the same rank.","sidebar":"core"},"core/events/serialize_order":{"id":"core/events/serialize_order","title":"serialize_order","description":"See the serialization framework for more detail.","sidebar":"core"},"core/events/toString":{"id":"core/events/toString","title":"toString","description":"Returns a string representation of the event. This function is inherited from SST::Event\'s base class and can be overridden by Events. Some of SST Core\'s built-in debug output uses this function so specializing it can be useful for debugging.","sidebar":"core"},"core/iface/overview":{"id":"core/iface/overview","title":"SST Library Interfaces","description":"To enable SST Elements to interoperate in a standard way, a couple common interface APIs are declared in the SST Core. One interface, simpleNetwork, defines an interface between a network and an endpoint. A second interface, StandardMem, defines an interface between a memory system and a CPU or other compute-type element. Using these interfaces allows various element libraries to be easily swapped at runtime as well as eliminates inter-element-library dependencies.","sidebar":"core"},"core/iface/SimpleNetwork/class":{"id":"core/iface/SimpleNetwork/class","title":"SST::Interfaces::SimpleNetwork","description":"The SimpleNetwork interface defines an interface between a network and an endpoint. A network library should define a SubComponent that implements the SimpleNetwork interface. Endpoints can then load that SimpleNetwork SubComponent to interface with the network library.","sidebar":"core"},"core/iface/SimpleNetwork/complete":{"id":"core/iface/SimpleNetwork/complete","title":"complete","description":"This function is called during SST\'s complete() phase. The (Sub)Component loading the interface should call this function on the interface during its own complete() function as SST does not automatically call it on SubComponents. See complete() for more information. A SubComponent implementing the SimpleNetwork interface should facilitate sending endpoint\'s events during complete(), even if it does not itself use the phase.","sidebar":"core"},"core/iface/SimpleNetwork/constructor":{"id":"core/iface/SimpleNetwork/constructor","title":"constructor","description":"This constructor is called when a (Sub)Component loads a SimpleNetwork interface.","sidebar":"core"},"core/iface/SimpleNetwork/destructor":{"id":"core/iface/SimpleNetwork/destructor","title":"destructor","description":"SST calls the SimpleNetwork destructor prior to exiting. (Sub)Components should not call the SimpleNetwork interface\'s destructor manually. SimpleNetwork interfaces should clean up any state that is not registered with SST (e.g., not a link, clock handler, statistic, etc) in their destructors.","sidebar":"core"},"core/iface/SimpleNetwork/finish":{"id":"core/iface/SimpleNetwork/finish","title":"finish","description":"See finish() for a description of SST\'s finish phase and the use of this function. The (Sub)Component that loaded a SimpleNetwork interface should call this function during its own finish() function. A SimpleNetwork interface may implement this function if needed, but it is not required.","sidebar":"core"},"core/iface/SimpleNetwork/getEndpointID":{"id":"core/iface/SimpleNetwork/getEndpointID","title":"getEndpointID","description":"Returns the ID assigned by the network to this endpoint. This is the same ID used in the Request src and dest fields. A SimpleNetwork interface must implement this function and an endpoint can use it to get the correct ID to fill the src field of its Requests with. Likewise, Requests whose dest field matches the ID returned by this function should be sent to this endpoint.","sidebar":"core"},"core/iface/SimpleNetwork/getLinkBW":{"id":"core/iface/SimpleNetwork/getLinkBW","title":"getLinkBW","description":"Return the network interface\'s link bandwidth. This can be used, for example, by an endpoint to determine how much bandwidth is available into the network. Bandwidth is measured in bits per second. The units can be checked by using UnitAlgebra\'s hasUnits() function.","sidebar":"core"},"core/iface/SimpleNetwork/handler":{"id":"core/iface/SimpleNetwork/handler","title":"Handler","description":"The above function signatures should be used for SimpleNetwork handlers that are registered with a SimpleNetwork interface using the setNotifyOnReceive and setNotifyOnSend calls. The function is passed a virtual network on which the interface has event ready to be received or on which an event has just been sent. The return value dictates whether the interface should keep this callback function for the next event or discard it.","sidebar":"core"},"core/iface/SimpleNetwork/init":{"id":"core/iface/SimpleNetwork/init","title":"init","description":"See init() for a description of SST\'s init phase and the use of this function. The (Sub)Component that loaded a SimpleNetwork interface should call this function during its own init() function. A SimpleNetwork interface should facilitate sending untimed requests during the init() phase, however, it may use the isNetworkInitialized() function to block an endpoint from sending requests until it is ready to accept them.","sidebar":"core"},"core/iface/SimpleNetwork/isNetworkInitialized":{"id":"core/iface/SimpleNetwork/isNetworkInitialized","title":"isNetworkInitialized","description":"This function is used during SST\'s init() phase to give a network time to initialize itself prior to accepting requests. Once the network is initialized the function should return true. The following must be the case at that point:","sidebar":"core"},"core/iface/SimpleNetwork/NetworkInspector":{"id":"core/iface/SimpleNetwork/NetworkInspector","title":"NetworkInspector","description":"A NetworkInspector is a SubComponent that can be used to inspect events that are in-flight throughout a network. A library that sends Requests through a network, which wrap an Event type custom to that library, can implement a NetworkInspector capable of returning information about the Request and the wrapped custom Event.","sidebar":"core"},"core/iface/SimpleNetwork/recv":{"id":"core/iface/SimpleNetwork/recv","title":"recv","description":"Receive a Request from the network on the specified virtual network (vn).","sidebar":"core"},"core/iface/SimpleNetwork/recvUntimedData":{"id":"core/iface/SimpleNetwork/recvUntimedData","title":"recvUntimedData","description":"This function should be used to check for received requests on a network during SST\'s untimed phases, init() and complete. This is not a pure virtual function, however, implementing it is recommended per the note below. See SST::recvUntimedData for additional detail on the use of this function.","sidebar":"core"},"core/iface/SimpleNetwork/Request":{"id":"core/iface/SimpleNetwork/Request","title":"Request","description":"The Request class defines the data structure used to send and receives events via a network. Each Request includes a number of metadata fields used by networks (e.g., source and destination information) as well as payload. The payload is an SST::Event pointer so that any event can be wrapped in the Request type and the payload delivered to the other side of the network. Requests are serializable and may be passed over SST Links.","sidebar":"core"},"core/iface/SimpleNetwork/requestToReceive":{"id":"core/iface/SimpleNetwork/requestToReceive","title":"requestToReceive","description":"Checks if there is a waiting network request pending in the specified virtual network.","sidebar":"core"},"core/iface/SimpleNetwork/send":{"id":"core/iface/SimpleNetwork/send","title":"send","description":"Send a request to the network. The function returns whether the Request can be sent. If it returns false, the Request has been rejected and the endpoint must try again later (e.g., there is not enough buffer space to send). If it returns true, the Request has been accepted by the interface. The interface may buffer the event for some period of time, it is not required to send it immediately.","sidebar":"core"},"core/iface/SimpleNetwork/sendUntimedData":{"id":"core/iface/SimpleNetwork/sendUntimedData","title":"sendUntimedData","description":"This function should be used to send requests on a network during SST\'s untimed phases, init() and complete. This is not a pure virtual function, however, implementing it is recommended per the note below. See SST::sendUntimedData for additional detail on the use of this function.","sidebar":"core"},"core/iface/SimpleNetwork/setNotifyOnReceive":{"id":"core/iface/SimpleNetwork/setNotifyOnReceive","title":"setNotifyOnReceive","description":"An endpoint uses this function to register a functor of the appropriate form. This functor will be called when a Request is received by the interface. The registered function is a notification only and the endpoint must subsequently call recv() to acquire the received Request.","sidebar":"core"},"core/iface/SimpleNetwork/setNotifyOnSend":{"id":"core/iface/SimpleNetwork/setNotifyOnSend","title":"setNotifyOnSend","description":"An endpoint uses this function to register a functor of the appropriate form. This functor will be called when a Request is sent by the interface.","sidebar":"core"},"core/iface/SimpleNetwork/setup":{"id":"core/iface/SimpleNetwork/setup","title":"setup","description":"See setup() for a description of SST\'s setup phase and the use of this function. The (Sub)Component that loaded a SimpleNetwork interface should call this function during its own setup() function. A SimpleNetwork interface may implement this function if needed, but it is not required.","sidebar":"core"},"core/iface/SimpleNetwork/spaceToSend":{"id":"core/iface/SimpleNetwork/spaceToSend","title":"spaceToSend","description":"Checks if there is sufficient space to send the specified number of bits on the specified virtual network.","sidebar":"core"},"core/iface/StandardMem/class":{"id":"core/iface/StandardMem/class","title":"SST::Interfaces::StandardMem","description":"The StandardMem interface defines an interface between a core or other compute unit (i.e., \\"endpoint\\") and a memory system. A memory system library should define a SubComponent that implements the StandardMem interface. Components  can then load that StandardMem SubComponent to interface with the memory system library. As an example, in the picture below, a CPU endpoint Component loads a StandardMemInterface SubComponent. The interface has an SST::Link into the rest of the memory system.","sidebar":"core"},"core/iface/StandardMem/complete":{"id":"core/iface/StandardMem/complete","title":"complete","description":"This function is called during SST\'s complete() phase. The (Sub)Component loading the interface should call this function on the interface during its own complete() function as SST does not automatically call it on SubComponents. See complete() for more information.","sidebar":"core"},"core/iface/StandardMem/constructor":{"id":"core/iface/StandardMem/constructor","title":"constructor","description":"This constructor is called when a (Sub)Component loads a StandardMem interface.","sidebar":"core"},"core/iface/StandardMem/destructor":{"id":"core/iface/StandardMem/destructor","title":"destructor","description":"SST calls the StandardMem destructor prior to exiting. (Sub)Components should not call the StandardMem interface\'s destructor manually. StandardMem interfaces should clean up any state that is not registered with SST (e.g., not a link, clock handler, statistic, etc) in their destructors.","sidebar":"core"},"core/iface/StandardMem/finish":{"id":"core/iface/StandardMem/finish","title":"finish","description":"See finish() for a description of SST\'s finish phase and the use of this function. The (Sub)Component that loaded a StandardMem interface should call this function during its own finish() function. A StandardMem interface may implement this function if needed, but it is not required.","sidebar":"core"},"core/iface/StandardMem/getLineSize":{"id":"core/iface/StandardMem/getLineSize","title":"getLineSize","description":"Return a line size, in bytes from the memory system. The memory system should provide this and it should be valid after SST\'s init() phase is complete. Endpoints can safely call this function during setup(). A return value of 0 indicates that either the memory system doesn\'t support line sizes or it isn\'t relevant. Otherwise, it can be used by endpoints as needed to meet a particular memory system\'s alignment and request size requirements.","sidebar":"core"},"core/iface/StandardMem/handler":{"id":"core/iface/StandardMem/handler","title":"Handler","description":"StandardMem passes requests back to an endpoint using a handler. Handlers should use one of the above function signatures and are passed to the interface in its constructor. Calling this function denotes a transfer of responsibility for a Request from the interface to the endpoint. Once called, the interface should no longer access the request and the endpoint is responsible for subsequently deleteing the request if necessary.","sidebar":"core"},"core/iface/StandardMem/init":{"id":"core/iface/StandardMem/init","title":"init","description":"This function is called during SST\'s init() phase. The (Sub)Component loading the interface should call this function on the interface during its own init() function as SST does not automatically call it on SubComponents. See init() for more information.","sidebar":"core"},"core/iface/StandardMem/poll":{"id":"core/iface/StandardMem/poll","title":"poll","description":"Receive an event (request or response) from the interface. Use this method for polling-based applications.","sidebar":"core"},"core/iface/StandardMem/recvUntimedData":{"id":"core/iface/StandardMem/recvUntimedData","title":"recvUntimedData","description":"Receive messages from the interface during SST\'s init() and complete() phases. A registered callback handler is not used during these phases so the parent must use this function to poll for messages if any are expected.","sidebar":"core"},"core/iface/StandardMem/req/class":{"id":"core/iface/StandardMem/req/class","title":"StandardMem::Request","description":"The Request class is the base class for all requests and responses that get sent through the StandardMem interface. Several basic request types are defined in the interface, including reads, writes, and flushes. In addition, a CustomReq and CustomResp type are provided. Implementations can use these to wrap custom request and response types that can also be passed through the interface alongside the basic request types.","sidebar":"core"},"core/iface/StandardMem/req/customdata":{"id":"core/iface/StandardMem/req/customdata","title":"CustomData","description":"The StandardMem::CustomData class is a base class for custom implementations of different request types. It provides a minimal set of functions needed by StandardMem to be able to route CustomReq/Resp requests, create responses, and generate debug/output for the CustomReq/Resp.","sidebar":"core"},"core/iface/StandardMem/req/customreq":{"id":"core/iface/StandardMem/req/customreq","title":"CustomReq","description":"Response Type StandardMem::CustomResp  &nbsp;","sidebar":"core"},"core/iface/StandardMem/req/customresp":{"id":"core/iface/StandardMem/req/customresp","title":"CustomResp","description":"Response Type None  &nbsp;","sidebar":"core"},"core/iface/StandardMem/req/flushaddr":{"id":"core/iface/StandardMem/req/flushaddr","title":"FlushAddr","description":"Response Type StandardMem::FlushResp  &nbsp;","sidebar":"core"},"core/iface/StandardMem/req/flushcache":{"id":"core/iface/StandardMem/req/flushcache","title":"FlushCache","description":"Response Type StandardMem::FlushResp  &nbsp;","sidebar":"core"},"core/iface/StandardMem/req/flushresp":{"id":"core/iface/StandardMem/req/flushresp","title":"FlushResp","description":"Response Type None  &nbsp;","sidebar":"core"},"core/iface/StandardMem/req/invnotify":{"id":"core/iface/StandardMem/req/invnotify","title":"InvNotify","description":"Response Type None  &nbsp;","sidebar":"core"},"core/iface/StandardMem/req/loadlink":{"id":"core/iface/StandardMem/req/loadlink","title":"LoadLink","description":"Response Type StandardMem::ReadResp  &nbsp;","sidebar":"core"},"core/iface/StandardMem/req/movedata":{"id":"core/iface/StandardMem/req/movedata","title":"MoveData","description":"Response Type StandardMem::WriteResp  &nbsp;","sidebar":"core"},"core/iface/StandardMem/req/read":{"id":"core/iface/StandardMem/req/read","title":"Read","description":"Response Type StandardMem::ReadResp  &nbsp;","sidebar":"core"},"core/iface/StandardMem/req/readlock":{"id":"core/iface/StandardMem/req/readlock","title":"ReadLock","description":"Response Type StandardMem::ReadResp  &nbsp;","sidebar":"core"},"core/iface/StandardMem/req/readresp":{"id":"core/iface/StandardMem/req/readresp","title":"ReadResp","description":"Response Type None  &nbsp;","sidebar":"core"},"core/iface/StandardMem/req/storeconditional":{"id":"core/iface/StandardMem/req/storeconditional","title":"StoreConditional","description":"Response Type StandardMem::WriteResp  &nbsp;","sidebar":"core"},"core/iface/StandardMem/req/write":{"id":"core/iface/StandardMem/req/write","title":"Write","description":"Response Type StandardMem::WriteResp  &nbsp;","sidebar":"core"},"core/iface/StandardMem/req/writeresp":{"id":"core/iface/StandardMem/req/writeresp","title":"WriteResp","description":"Response Type None  &nbsp;","sidebar":"core"},"core/iface/StandardMem/req/writeunlock":{"id":"core/iface/StandardMem/req/writeunlock","title":"WriteUnlock","description":"Response Type StandardMem::WriteResp  &nbsp;","sidebar":"core"},"core/iface/StandardMem/reqconverter":{"id":"core/iface/StandardMem/reqconverter","title":"RequestConverter","description":"The StandardMem::Links. StandardMem implementations should derive from RequestConverter to define a conversion function for each built-in StandardMem request type. Upon receiving a request the StandardMem implementation can use the derived RequestConverter class to convert StandardMem requests by type.","sidebar":"core"},"core/iface/StandardMem/reqhandler":{"id":"core/iface/StandardMem/reqhandler","title":"RequestHandler","description":"In constrast to StandardMem::Requests to handle request by type.","sidebar":"core"},"core/iface/StandardMem/send":{"id":"core/iface/StandardMem/send","title":"send","description":"Send a Request to the interface.","sidebar":"core"},"core/iface/StandardMem/sendUntimedData":{"id":"core/iface/StandardMem/sendUntimedData","title":"sendUntimedData","description":"Send a request to the interface during SST\'s init() or complete() phases","sidebar":"core"},"core/iface/StandardMem/setMemoryMappedAddressRegion":{"id":"core/iface/StandardMem/setMemoryMappedAddressRegion","title":"setMemoryMappedAddressRegion","description":"Set which addresses in the global address space will map to this endpoint. Only contiguous address ranges are supported. By default, the endpoint is not addressable. The mapped region will be [start, start+size).","sidebar":"core"},"core/iface/StandardMem/setup":{"id":"core/iface/StandardMem/setup","title":"setup","description":"See setup() for a description of SST\'s setup phase and the use of this function. The (Sub)Component that loaded a StandardMem interface should call this function during its own setup() function. A StandardMem interface may implement this function if needed, but it is not required.","sidebar":"core"},"core/iface/StringEvent/class":{"id":"core/iface/StringEvent/class","title":"SST::Interfaces::StringEvent","description":"The StringEvent class is an Event, derived from SST::Event. It is provided for early prototyping and testing use cases. The event wraps a single string. The event is serializable.","sidebar":"core"},"core/iface/TestEvent/class":{"id":"core/iface/TestEvent/class","title":"SST::Interfaces::TestEvent","description":"The TestEvent class is an Event, derived from SST::Event. It is targeted for early prototyping and testing use cases. The event contains two fields, a count and a boolean value indicating whether the event should print a message when it is deleted. The event is serializable.","sidebar":"core"},"core/link/addRecvLatency":{"id":"core/link/addRecvLatency","title":"addRecvLatency","description":"Set additional latency to be added to all events that come in on this link.","sidebar":"core"},"core/link/addSendLatency":{"id":"core/link/addSendLatency","title":"addSendLatency","description":"Set additional latency to be added to all events that are sent out on this link.","sidebar":"core"},"core/link/class":{"id":"core/link/class","title":"SST::Link","description":"SST Links connect (sub)components and enable components to send events to each other. Links can be configured to use a callback handler when an event arrives or can be configured without a handler so that they must be polled.","sidebar":"core"},"core/link/getDefaultTimeBase":{"id":"core/link/getDefaultTimeBase","title":"getDefaultTimeBase","description":"Shared TimeConverters returned by SST-Core APIs will be removed in SST 16.0. All functions accepting TimeConverter now accept TimeConverter instead. Elements using a TimeConverter returned by SST-Core should create a local non-shared instance as shown:","sidebar":"core"},"core/link/getId":{"id":"core/link/getId","title":"getId","description":"Returns the unique ID assigned to the Link. LinkIdt is a uint32t.","sidebar":"core"},"core/link/recv":{"id":"core/link/recv","title":"recv","description":"Poll a link to retrieve an event that has arrived. If no event has arrived, the function returns a nullptr.","sidebar":"core"},"core/link/recvUntimedData":{"id":"core/link/recvUntimedData","title":"recvUntimedData","description":"Receive an event during SST\'s init() or complete() phase. Event handlers are not active during this time, so links must be polled using this function.","sidebar":"core"},"core/link/replaceFunctor":{"id":"core/link/replaceFunctor","title":"replaceFunctor","description":"Set the callback handler for events arriving on a link. Also deletes the previous handler registered to the link.","sidebar":"core"},"core/link/send":{"id":"core/link/send","title":"send","description":"Send an event over the link, optionally, with additional latency added to the minimum latency the link was configured with as well as any other latency added to the link.","sidebar":"core"},"core/link/sendUntimedData":{"id":"core/link/sendUntimedData","title":"sendUntimedData","description":"Send an event during SST\'s init() or complete() phase.","sidebar":"core"},"core/link/setDefaultTimeBase":{"id":"core/link/setDefaultTimeBase","title":"setDefaultTimeBase","description":"Sets the default time base for the link. This will be the units of send latency if additional latency is added using send() without specifying units.","sidebar":"core"},"core/link/setFunctor":{"id":"core/link/setFunctor","title":"setFunctor","description":"Set the callback handler for events arriving on a link. Does not delete the previous handler that was registered to the Link.","sidebar":"core"},"core/module/class":{"id":"core/module/class","title":"Module","description":"Modules are lightweight, dynamically-loadable pieces of functionality. They can be loaded into Components. A Module is always co-located with the Component it is loaded into when running SST in parallel.Modules do not have any defined API and have no access to SST APIs. Modules requiring any API access, for example, Clocks, Statistics, etc., need to be defined as SubComponents instead.","sidebar":"core"},"core/module/constructor":{"id":"core/module/constructor","title":"constructor","description":"This constructor is called when a Sub(Component) loads a new Module.","sidebar":"core"},"core/module/destructor":{"id":"core/module/destructor","title":"destructor","description":"SST calls each module\'s destructor prior to exiting. Components should not call a module\'s destructor manually. Modules are responsible for cleaning up all their state.","sidebar":"core"},"core/output/class":{"id":"core/output/class","title":"SST::Output","description":"SST Output objects can be used for both output and debug. Some functions are only available if the Core is configured with the --enable-debug flag. SST objects may create their own Output objects directly or may use the SSTCore output by calling the API function getSimulationOutput().","sidebar":"core"},"core/output/constructor":{"id":"core/output/constructor","title":"constructor","description":"Create a new Output object. If the default constructor is used, Output::init() must be called to initialize the object.","sidebar":"core"},"core/output/debug":{"id":"core/output/debug","title":"debug","description":"This function prints a debug message. The message is only printed if the outputlevel and outputbits satisfy the Output object\'s verboselevel and verbosemask, respectively. Further, calls to debug() do nothing if the SST core is not compiled with the --enable-debug flag.","sidebar":"core"},"core/output/debugPrefix":{"id":"core/output/debugPrefix","title":"debugPrefix","description":"This function is the same as debug() except that instead of prepending the Output\'s prefix, it prepends the provided prefix.","sidebar":"core"},"core/output/destructor":{"id":"core/output/destructor","title":"destructor","description":"Delete an output object.","sidebar":"core"},"core/output/fatal":{"id":"core/output/fatal","title":"fatal","description":"Output the fatal message with formatting as specified by the format parameter and end the simulation. This will call MPIAbort with the exitcode specified in the call. The message will be sent to both the output location and to stderr. The output will be prepended with the Output\'s prefix.","sidebar":"core"},"core/output/flush":{"id":"core/output/flush","title":"flush","description":"Calls std::fflush on the output object\'s location.","sidebar":"core"},"core/output/getDefaultObject":{"id":"core/output/getDefaultObject","title":"getDefaultObject","description":"Returns the simulation\'s default output object.","sidebar":"core"},"core/output/getOutputLocation":{"id":"core/output/getOutputLocation","title":"getOutputLocation","description":"Return the Output\'s output location. outputlocationt is an enum type with this definition:","sidebar":"core"},"core/output/getPrefix":{"id":"core/output/getPrefix","title":"getPrefix","description":"Gets the object\'s prefix","sidebar":"core"},"core/output/getVerboseLevel":{"id":"core/output/getVerboseLevel","title":"getVerboseLevel","description":"Return the Output\'s verbose level.","sidebar":"core"},"core/output/getVerboseMask":{"id":"core/output/getVerboseMask","title":"getVerboseMask","description":"Return the Output\'s verbose mask.","sidebar":"core"},"core/output/init":{"id":"core/output/init","title":"init","description":"Initialize an Output object. This function is required if the default constructor was used to create the Output object.","sidebar":"core"},"core/output/output":{"id":"core/output/output","title":"output","description":"Output the message with formatting as specified by the format parameter. If called with CALL_INFO (line, file, func) parameters, the output will also prepend the Output object\'s prefix to the message.","sidebar":"core"},"core/output/setFileName":{"id":"core/output/setFileName","title":"setFileName","description":"Set the file the output will print to if the output location is set to Output::FILE. If the size of MPICOMMWORLD is > 1, then the rank process will be appended to the file name.","sidebar":"core"},"core/output/setOutputLocation":{"id":"core/output/setOutputLocation","title":"setOutputLocation","description":"Set the location the output will print to. Options are Output::NONE.","sidebar":"core"},"core/output/setPrefix":{"id":"core/output/setPrefix","title":"setPrefix","description":"Sets the Output\'s prefix.","sidebar":"core"},"core/output/setVerboseLevel":{"id":"core/output/setVerboseLevel","title":"setVerboseLevel","description":"Sets the Output\'s verboselevel for debug() and verbose(). Output object will only output the message if those calls\' outputlevel parameter are less than or equal to the Output\'s verbose_level.","sidebar":"core"},"core/output/setVerboseMask":{"id":"core/output/setVerboseMask","title":"setVerboseMask","description":"Sets the Output\'s verbosemask for debug() and verbose(). Output object will only output the message if the set bits of those calls\' outputbits parameter are also set in the verbose_mask.","sidebar":"core"},"core/output/verbose":{"id":"core/output/verbose","title":"verbose","description":"Output the verbose message with formatting as specified by the format parameter. Output will only occur if specified outputlevel and outputbits satisfy the verboselevel and verbosemask of the Output object. The output will be prepended with the expanded prefix set in either the constructor or init() function.","sidebar":"core"},"core/output/verbosePrefix":{"id":"core/output/verbosePrefix","title":"verbosePrefix","description":"This function is the same as verbose() except that instead of prepending the Output\'s prefix, it prepends the provided prefix.","sidebar":"core"},"core/params/class":{"id":"core/params/class","title":"SST::Params","description":"The Params class contains a key-value store of parameters and their values. Many SST objects (e.g., Components, SubComponents) are constructed with a Params object that contains key/value pairs given in the SST input configuration file.","sidebar":"core"},"core/params/clear":{"id":"core/params/clear","title":"clear","description":"Erase all key/value pairs from a Params object.","sidebar":"core"},"core/params/constructor":{"id":"core/params/constructor","title":"constructor","description":"Create a new Params object, either empty or copying from an existing set.","sidebar":"core"},"core/params/contains":{"id":"core/params/contains","title":"contains","description":"Return whether a Params object contains the provided key.","sidebar":"core"},"core/params/count":{"id":"core/params/count","title":"count","description":"Finds the number of elements with a given key. Because duplicate keys are not allowed, this function returns at most one. Note this is the case even if a key exists in both the local and global params.","sidebar":"core"},"core/params/destructor":{"id":"core/params/destructor","title":"destructor","description":"Delete a Params object.","sidebar":"core"},"core/params/empty":{"id":"core/params/empty","title":"empty","description":"Return True if the Params object is empty (has no local or global parameters).","sidebar":"core"},"core/params/find":{"id":"core/params/find","title":"find","description":"Find a key in the Params object and return the corresponding value as template type T. If desired, the function can also take a default value to be returned if the key is not found, and a boolean variable to set indicating whether the key was found.","sidebar":"core"},"core/params/find_array":{"id":"core/params/find_array","title":"find_array","description":"Search for the specified key and return its value as a vector in the provided argument vec. The vector will be empty if the key is not found. The function is parameterized on a type, T , which must be a valid params parameter type (e.g., numeric including bool, string, or other class with a constructor that accepts a single string).","sidebar":"core"},"core/params/find_map":{"id":"core/params/find_map","title":"find_map","description":"Search for the specified key and return its value as a map in the provided argument map. The map will be empty if the key is not found. The function is parameterized on a types keyT and valT which must be valid Params parameter types (e.g., numeric including bool, string, or other class with a constructor that accepts a single string).","sidebar":"core"},"core/params/find_set":{"id":"core/params/find_set","title":"find_set","description":"Search for the specified key and return its value as a set in the provided argument set. The set will be empty if the key is not found. The function is parameterized on a type, T , which must be a valid params parameter type (e.g., numeric including bool, string, or other class with a constructor that accepts a single string).","sidebar":"core"},"core/params/get_scoped_params":{"id":"core/params/get_scoped_params","title":"get_scoped_params","description":"Copy parameters with the scope prefix into a new Params object and return the new object. SST uses a naming convention where a scope is a series of names separated by \'.\'. In particular, any parameter key prefixed by \\"scope.\\" will be in the returned Params object. The returned params will have the scope stripped from their key strings. Scoping is commonly used when a parent object handles parameters for child SubComponents, modules, etc. Scoping parameters allows the parent to easily identify which object should receive the given parameters.","sidebar":"core"},"core/params/getKeys":{"id":"core/params/getKeys","title":"getKeys","description":"Return the set of all keys (local and global) contained in the Params object.","sidebar":"core"},"core/params/insert":{"id":"core/params/insert","title":"insert","description":"Insert a key/value pair or a set of parameters into this Params object. In the case of inserting a Params object, global parameters will be copied into the global params section of this Params object. All other inserted params will be inserted into the local params. The key/value variant of this function optionally takes a parameter to indicate whether the new key/value should overwrite an existing one if it already exists in the Params object. If overwrite=False and the parameter exists in the Params object already, this function will have no effect.","sidebar":"core"},"core/params/is_value_array":{"id":"core/params/is_value_array","title":"is_value_array","description":"Returns whether the value associated with the given key is a valid array format (i.e., can be parsed correctly by findarray).","sidebar":"core"},"core/params/operatoreq":{"id":"core/params/operatoreq","title":"operator=","description":"Assignment operator. Copies a Params object, including any references to global parameter sets.","sidebar":"core"},"core/params/print_all_params":{"id":"core/params/print_all_params","title":"print_all_params","description":"Print all key/value pairs in the Params object to the specified std::Output. Optionally, prepend each printed key with the given prefix.","sidebar":"core"},"core/params/size":{"id":"core/params/size","title":"size","description":"Returns the size (count) of parameters in the Params object. This includes both local and global param sets.","sidebar":"core"},"core/portmodule/class":{"id":"core/portmodule/class","title":"PortModule","description":"The PortModule API has not been finalized and may be changed without notice in subsequent versions of SST.","sidebar":"core"},"core/portmodule/constructor":{"id":"core/portmodule/constructor","title":"constructor","description":"This constructor is called when a PortModule is loaded.","sidebar":"core"},"core/portmodule/destructor":{"id":"core/portmodule/destructor","title":"destructor","description":"SST calls each port module\'s destructor prior to exiting.","sidebar":"core"},"core/portmodule/eventSent":{"id":"core/portmodule/eventSent","title":"eventSent","description":"This function must be implemented. When a PortModule is installed on the send side of a port, this function will be called whenever an event is sent. The function may do the following with the event.","sidebar":"core"},"core/portmodule/getCoreTimeBase":{"id":"core/portmodule/getCoreTimeBase","title":"getCoreTimeBase","description":"Returns the timebase used by the core. Unless modified in the SST input configuration, this is 1ps.","sidebar":"core"},"core/portmodule/getCurrentPriority":{"id":"core/portmodule/getCurrentPriority","title":"getCurrentPriority","description":"SST handles activities in the same cycle in a specific priority order. Activities include things like events, clock handlers, synchronization, and simulation stopping points, as well as other SST-internal actions. This function returns the priority of the event being intercepted by the PortModule.","sidebar":"core"},"core/portmodule/getCurrentSimCycle":{"id":"core/portmodule/getCurrentSimCycle","title":"getCurrentSimCycle","description":"Returns the current simulation time as a cycle count. See getCoreTimeBase for cycle time.","sidebar":"core"},"core/portmodule/getCurrentSimTime":{"id":"core/portmodule/getCurrentSimTime","title":"getCurrentSimTime","description":"Returns the current simulation time as a cycle count relative to the clock frequency provided via the TimeConverter tc or string base.","sidebar":"core"},"core/portmodule/getCurrentSimTimeMicro":{"id":"core/portmodule/getCurrentSimTimeMicro","title":"getCurrentSimTimeMicro","description":"Returns the current simulation time as a time in microseconds.","sidebar":"core"},"core/portmodule/getCurrentSimTimeMilli":{"id":"core/portmodule/getCurrentSimTimeMilli","title":"getCurrentSimTimeMilli","description":"Returns the current simulation time as a time in milliseconds.","sidebar":"core"},"core/portmodule/getCurrentSimTimeNano":{"id":"core/portmodule/getCurrentSimTimeNano","title":"getCurrentSimTimeNano","description":"Returns the current simulation time as a time in nanoseconds.","sidebar":"core"},"core/portmodule/getElapsedSimTime":{"id":"core/portmodule/getElapsedSimTime","title":"getElapsedSimTime","description":"Returns the current simulation time as a time with units.","sidebar":"core"},"core/portmodule/getSimulationOutput":{"id":"core/portmodule/getSimulationOutput","title":"getSimulationOutput","description":"Get the instance of the simulation output object that the SST Core is using.","sidebar":"core"},"core/portmodule/installOnReceive":{"id":"core/portmodule/installOnReceive","title":"installOnReceive","description":"This function is called when a PortModule is registered to a port and it determines if the PortModule will be installed on the receive side of a port. Override this function to return something other than false if needed.","sidebar":"core"},"core/portmodule/installOnSend":{"id":"core/portmodule/installOnSend","title":"installOnSend","description":"This function is called when a PortModule is registered to a port and it determines if the PortModule will be installed on the send side of a port. Override this function to return something other than false if needed.","sidebar":"core"},"core/portmodule/interceptHandler":{"id":"core/portmodule/interceptHandler","title":"interceptHandler","description":"This function must be implemented. When a PortModule is installed on the receive side of a port, this function will be called whenever an event is received. It will be called before the event is delivered to a port\'s handler. The function must do the following depending on what it does with the passed in event.","sidebar":"core"},"core/portmodule/registerHandlerIntercept":{"id":"core/portmodule/registerHandlerIntercept","title":"registerHandlerIntercept","description":"This function should not need to be overridden. It is called when SST registers a PortModule on the receive side of a port and is inherited from the underlying APIs that PortModules use to attach themselves to a port. Typically it would be used to differentiate when a tool is registered to multiple types of AttachPoints, but as PortModules can only be attached to a single port, the base PortModule implementation is sufficient.","sidebar":"core"},"core/portmodule/registerLinkAttachTool":{"id":"core/portmodule/registerLinkAttachTool","title":"registerLinkAttachTool","description":"This function should not need to be overridden. It is called when SST registers a PortModule on the send side of a port and is inherited from the underlying APIs that PortModules use to attach themselves to a port. Typically it would be used to differentiate when a tool is registered to multiple types of AttachPoints, but as PortModules are only attachable to ports, the base PortModule implementation is sufficient.","sidebar":"core"},"core/portmodule/serialize_order":{"id":"core/portmodule/serialize_order","title":"serialize_order","description":"See the serialization framework for more detail.","sidebar":"core"},"core/portmodule/serializeEventAttachPointKey":{"id":"core/portmodule/serializeEventAttachPointKey","title":"serializeEventAttachPointKey","description":"This does not need to be implemented unless overriding registerLinkAttachTool. It is used to serialize the otherwise opaque key returned by that function.","sidebar":"core"},"core/portmodule/serializeHandlerInterceptPointKey":{"id":"core/portmodule/serializeHandlerInterceptPointKey","title":"serializeHandlerInterceptPointKey","description":"This does not need to be implemented unless overriding registerHandlerIntercept. It is used to serialize the otherwise opaque key returned by that function.","sidebar":"core"},"core/realtime/begin":{"id":"core/realtime/begin","title":"begin","description":"Real time actions may implement this function if they need to do any actions when they are registered on a recurring interval (i.e., attached to SIGALRM).","sidebar":"core"},"core/realtime/canInitiateCheckpoint":{"id":"core/realtime/canInitiateCheckpoint","title":"canInitiateCheckpoint","description":"Real time actions must implement this function and return true if they may trigger a checkpoint.","sidebar":"core"},"core/realtime/class":{"id":"core/realtime/class","title":"SST::RealTimeAction","description":"RealTimeActions are actions that SST executes in response to an OS signal such as SIGINT or SIGUSR1. See the signal handling guide for more information about using these actions.","sidebar":"core"},"core/realtime/constructor":{"id":"core/realtime/constructor","title":"constructor","description":"SST invokes this constructor during simulation construction.","sidebar":"core"},"core/realtime/destructor":{"id":"core/realtime/destructor","title":"destructor","description":"SST invokes this destructor when the simulation ends.","sidebar":"core"},"core/realtime/execute":{"id":"core/realtime/execute","title":"execute","description":"Real time actions must implement this function. It is called when the action is triggered.","sidebar":"core"},"core/realtime/getCoreTimeBase":{"id":"core/realtime/getCoreTimeBase","title":"getCoreTimeBase","description":"Returns the time base of SST-Core as a UnitAlgebra.","sidebar":"core"},"core/realtime/getCurrentSimCycle":{"id":"core/realtime/getCurrentSimCycle","title":"getCurrentSimCycle","description":"Returns the current simulation time as a cycle count in terms of the SST-Core time base.","sidebar":"core"},"core/realtime/getElapsedSimTime":{"id":"core/realtime/getElapsedSimTime","title":"getElapsedSimTime","description":"Returns the elapsed simulation time as a time.","sidebar":"core"},"core/realtime/getEndSimCycle":{"id":"core/realtime/getEndSimCycle","title":"getEndSimCycle","description":"Returns the time that simulation ended. The time will be incorrect unless simulation is ending.","sidebar":"core"},"core/realtime/getMemPoolUsage":{"id":"core/realtime/getMemPoolUsage","title":"getMemPoolUsage","description":"Returns the size of the mem pools via the bytes argument and the total number of active (currently allocated) entries via the active_entries argument. This function queries only the mem pools present on the current rank. Mem pools are shared across threads on a rank.","sidebar":"core"},"core/realtime/getNumRanks":{"id":"core/realtime/getNumRanks","title":"getNumRanks","description":"Returns a RankInfo object containing the number of ranks and threads in the simulation.","sidebar":"core"},"core/realtime/getRank":{"id":"core/realtime/getRank","title":"getRank","description":"Returns a RankInfo object containing the rank and thread that this action is executing on.","sidebar":"core"},"core/realtime/getSimulationOutput":{"id":"core/realtime/getSimulationOutput","title":"getSimulationOutput","description":"Returns a reference to the simulation\'s output object.","sidebar":"core"},"core/realtime/getSyncQueueDataSize":{"id":"core/realtime/getSyncQueueDataSize","title":"getSyncQueueDataSize","description":"Returns the size of the SyncQueue on this rank.","sidebar":"core"},"core/realtime/getTimeVortexMaxDepth":{"id":"core/realtime/getTimeVortexMaxDepth","title":"getTimeVortexMaxDepth","description":"Returns the maximum depth of the TimeVortex (event queue) on the current rank/thread. Each thread has its own TimeVortex.","sidebar":"core"},"core/realtime/initiateInteractive":{"id":"core/realtime/initiateInteractive","title":"initiateInteractive","description":"Calling this will cause this thread to drop into an interactive console once any pending real time actions finish executing. This only works if a console was specified on the SST command line. Otherwise it is ignored. This function takes a message describing the reason the simulation is entering interactive mode.","sidebar":"core"},"core/realtime/simulationCheckpoint":{"id":"core/realtime/simulationCheckpoint","title":"simulationCheckpoint","description":"Causes the local thread/rank to checkpoint its state. It is critical that any action calling this function also override canInitiateCheckpoint() to return true.","sidebar":"core"},"core/realtime/simulationPrintStatus":{"id":"core/realtime/simulationPrintStatus","title":"simulationPrintStatus","description":"Causes the local thread/rank to print its status. If componentstatus is true, this will also invoke printstatus() on every component belonging to the local thread/rank.","sidebar":"core"},"core/realtime/simulationSignalShutdown":{"id":"core/realtime/simulationSignalShutdown","title":"simulationSignalShutdown","description":"Inform the simulation that it should end when any pending actions finish executing. The abnormal parameter controls whether the shutdown is an \\"emergency\\" and SST should immediately terminate or whether it should continue to its normal complete/finish/destruction stages.","sidebar":"core"},"core/rng/constant":{"id":"core/rng/constant","title":"Constant Distribution","description":"The Constant distribution returns a constant value. This can be used in situations where the user may not want to apply a distribution. The constant value is provided by the user.","sidebar":"core"},"core/rng/discrete":{"id":"core/rng/discrete","title":"Discrete Distribution","description":"The Discrete distribution returns values from a discrete probability distribution. The class accepts two parameters, an array of outcome probabilities and a count of the number of possible outcomes. Optionally, a random number generator can also be provided for sampling. If a random number generator is not provided, Mersenne will be used to sample the distribution.","sidebar":"core"},"core/rng/distrib":{"id":"core/rng/distrib","title":"SST::RandomDistribution","description":"In addition to random number generators, SST includes several probability distributions. Like the random number generators, these distributions are deterministic and produce the same output across supported compilers and platforms. The distributions use an SST random number generator to produce a sequence of samples.","sidebar":"core"},"core/rng/expon":{"id":"core/rng/expon","title":"Exponential Distribution","description":"This class produces an exponential distribution with a user-provided rate parameter, or lambda. Optionally, a random number generator can also be provided for sampling. If a random number generator is not provided, Mersenne will be used.","sidebar":"core"},"core/rng/gaussian":{"id":"core/rng/gaussian","title":"Gaussian Distribution","description":"This class produces Gaussian or normal distribution with a user-provided mean and standard deviation. Optionally, a random number generator can also be provided for sampling. If a random number generator is not provided, Mersenne will be used.","sidebar":"core"},"core/rng/marsaglia":{"id":"core/rng/marsaglia","title":"Marsaglia RNG","description":"The Marsaglia generator uses the Marsaglia method to generate a reasonable distribution of random numbers with low computational cost. Marsaglia generators use two random seeds, z and w.","sidebar":"core"},"core/rng/mersenne":{"id":"core/rng/mersenne","title":"Mersenne RNG","description":"The Mersenne generator provides better \\"randomness\\" compared to Marsaglia but is also more computationally intensive. The generator uses just one seed compared to Marsaglia\'s two.","sidebar":"core"},"core/rng/poisson":{"id":"core/rng/poisson","title":"Poisson Distribution","description":"This class produces Poisson distribution with a user-provided lambda. Optionally, a random number generator can also be provided for sampling. If a random number generator is not provided, Mersenne will be used.","sidebar":"core"},"core/rng/rng":{"id":"core/rng/rng","title":"SST::Random","description":"SST includes a few random number generators (RNGs) that can be used by SST objects. These generators produce identical and deterministic output across all platforms and compilers that SST supports. The RNGs have a shared API.","sidebar":"core"},"core/rng/uniform":{"id":"core/rng/uniform","title":"Uniform Distribution","description":"This class produces a Uniform distribution across a user specified number of outcomes. Optionally, a random number generator can also be provided for sampling. If a random number generator is not provided, Mersenne will be used.","sidebar":"core"},"core/rng/xorshift":{"id":"core/rng/xorshift","title":"XOR-Shift RNG","description":"The XOR-shift generator is a very lightweight random number generator based on XOR shifts. See the Wikipedia article on Xorshift generators for more information.","sidebar":"core"},"core/serialization/overview":{"id":"core/serialization/overview","title":"Serialization","description":"SST uses serialization in three different contexts during simulation:","sidebar":"core"},"core/sharedobj/overview":{"id":"core/sharedobj/overview","title":"Shared Objects","description":"Shared Objects are special read-only data structures that can be shared across Components. They are intended as a memory use optimization when many Components would otherwise replicate read-only data (e.g., large routing tables). In parallel simulations, the object is replicated once on each SST rank and is shared among threads. Shared objects are writeable through SST\'s construction and init stages and become read-only once the setup stage begins.","sidebar":"core"},"core/sharedobj/sharedArray":{"id":"core/sharedobj/sharedArray","title":"Shared::SharedArray","description":"SharedArray constructs an array of shared elements. The array is replicated globally across SST\'s ranks and threads. The array can be written during SST\'s construction and/or init stages and becomes read-only either when all the components that have initialized the array also publish it or when the setup stage begins, whichever is first.","sidebar":"core"},"core/sharedobj/sharedMap":{"id":"core/sharedobj/sharedMap","title":"Shared::SharedMap","description":"SharedMap constructs a map of shared elements. The map is replicated globally across SST\'s ranks and threads. The map can be written during SST\'s construction and/or init stages and becomes read-only either when all the components that have initialized the map also publish it or when the setup stage begins, whichever is first.","sidebar":"core"},"core/sharedobj/sharedSet":{"id":"core/sharedobj/sharedSet","title":"Shared::SharedSet","description":"SharedSet constructs a set of shared elements. The set is replicated globally across SST\'s ranks and threads. The set can be written during SST\'s construction and/or init stages and becomes read-only either when all the components that have initialized the set also publish it or when the setup stage begins, whichever is first.","sidebar":"core"},"core/statistics/addData":{"id":"core/statistics/addData","title":"addData","description":"Adds data to a statistic. This call also increments the number of times data has been added to the statistic by one.","sidebar":"core"},"core/statistics/addDataNTimes":{"id":"core/statistics/addDataNTimes","title":"addDataNTimes","description":"Add the same data to a statistic repeatedly (N times). This is often used to more efficiently \\"catch up\\" a statistic after a component has been idle. For example, if a component is idle for N clock cycles and needs to record the occupancy of some buffer during that time, it may call this function at the end of the idle period to account for the occupancy during the idle period.","sidebar":"core"},"core/statistics/class":{"id":"core/statistics/class","title":"SST::Statistic","description":"SST Statistic objects can be used to track metrics about a (Sub)Component. SST statistic output format/frequency/etc. is controlled by the SST configuration file, whereas statistic collection is handled by (Sub)Components.","sidebar":"core"},"core/statoutput/acceptsGroups":{"id":"core/statoutput/acceptsGroups","title":"acceptsGroups","description":"This function may be overridden if needed.","sidebar":"core"},"core/statoutput/checkOutputParameters":{"id":"core/statoutput/checkOutputParameters","title":"checkOutputParameters","description":"This function must be implemented.","sidebar":"core"},"core/statoutput/class":{"id":"core/statoutput/class","title":"SST::Statistic(Fields)Output","description":"StatisticOutput objects generate output for all Statistics that are registered to them. There are several built-in StatisticOutput objects in SST and custom ones can also be registered from an element library to provide additional options. The SST configuration file determines which output(s) are used and specifies their parameters, such as output frequency.","sidebar":"core"},"core/statoutput/constructor":{"id":"core/statoutput/constructor","title":"constructor","description":"This constructor is called when a StatisticOutput is created by the simulation engine. Each rank in SST has its own instance of the StatisticOutput object; threads share an Output.","sidebar":"core"},"core/statoutput/destructor":{"id":"core/statoutput/destructor","title":"destructor","description":"SST calls each StatisticOutput\'s destructor prior to exiting.","sidebar":"core"},"core/statoutput/endOfSimulation":{"id":"core/statoutput/endOfSimulation","title":"endOfSimulation","description":"This function must be implemented.","sidebar":"core"},"core/statoutput/getAbsolutePathForOutputFile":{"id":"core/statoutput/getAbsolutePathForOutputFile","title":"getAbsolutePathForOutputFile","description":"Use this function to place an output file called filename in SST\'s global output directory. This function should always be used when creating files so that all simulation files are placed in the same output directory. Note that if filename already contains an absolute path, it will not be placed in the SST output directory. If filename contains a relative path, it will be placed relative to the SST output directory.","sidebar":"core"},"core/statoutput/getCurrentSimCycle":{"id":"core/statoutput/getCurrentSimCycle","title":"getCurrentSimCycle","description":"Returns the current simulation time as a cycle count in terms of the Core\'s timebase (default: 1ps).","sidebar":"core"},"core/statoutput/getFieldInfoArray":{"id":"core/statoutput/getFieldInfoArray","title":"getFieldInfoArray","description":"Each StatisticFieldsOutput contains a std::vector of the fields that the statistics registered to it contain. For example, if all registered statistics are AcculatorStatistics and tracking values of type uint32t, then the array would contain entries for sum(u32), sumSq(32), count(u32), min(u32), max(u32). If some statistics were tracking float or int64t, then the fields array would also contain entries for those types (e.g., sum(float)). Likewise, if any statistics were being collected as histograms, each field of the histogram (bin size, bin width, start index, etc.) would have an entry in this array.","sidebar":"core"},"core/statoutput/getFieldTypeShortName":{"id":"core/statoutput/getFieldTypeShortName","title":"getFieldTypeShortName","description":"Returns a short version of the type name for the field type type. This function wraps the static getFieldTypeShortName provided in the StatisticFieldInfo class and can be used as an alternative.","sidebar":"core"},"core/statoutput/getNumRanks":{"id":"core/statoutput/getNumRanks","title":"getNumRanks","description":"Get the number of ranks and threads-per-rank that SST is using.","sidebar":"core"},"core/statoutput/getOutputParameters":{"id":"core/statoutput/getOutputParameters","title":"getOutputParameters","description":"Returns the parameters for this StatisticOutput object.","sidebar":"core"},"core/statoutput/getRank":{"id":"core/statoutput/getRank","title":"getRank","description":"Returns the RankInfo structure holding rank and thread information for this StatisticOutput object.","sidebar":"core"},"core/statoutput/getRegisteredField":{"id":"core/statoutput/getRegisteredField","title":"getRegisteredField","description":"Returns information about a registered field via a field handle.","sidebar":"core"},"core/statoutput/getSimulationOutput":{"id":"core/statoutput/getSimulationOutput","title":"getSimulationOutput","description":"Get the instance of the simulation output object that the SST Core is using.","sidebar":"core"},"core/statoutput/getStatisticOutputName":{"id":"core/statoutput/getStatisticOutputName","title":"getStatisticOutputName","description":"Returns the name of the statistic output. StatisticOutput objects should give themselves a name in their constructor, using setStatisticOutputName(). The default name is \\"StatisticOutput\\".","sidebar":"core"},"core/statoutput/implStartOutputEntries":{"id":"core/statoutput/implStartOutputEntries","title":"implStartOutputEntries","description":"This function must be implemented.","sidebar":"core"},"core/statoutput/implStopOutputEntries":{"id":"core/statoutput/implStopOutputEntries","title":"implStopOutputEntries","description":"This function must be implemented.","sidebar":"core"},"core/statoutput/lock":{"id":"core/statoutput/lock","title":"lock","description":"Use this function to protect against multithreading races if needed. The function will block until the lock is acquired. Any call to lock() needs to be paired with a call to unlock().","sidebar":"core"},"core/statoutput/outputField":{"id":"core/statoutput/outputField","title":"outputField","description":"These functions should be overridden for each type supported by the statistic output.","sidebar":"core"},"core/statoutput/printUsage":{"id":"core/statoutput/printUsage","title":"printUsage","description":"This function must be implemented.","sidebar":"core"},"core/statoutput/serialize_order":{"id":"core/statoutput/serialize_order","title":"serialize_order","description":"See the serialization framework for more detail.","sidebar":"core"},"core/statoutput/setStatisticOutputName":{"id":"core/statoutput/setStatisticOutputName","title":"setStatisticOutputName","description":"Set the name of the statistic output. StatisticOutput objects should use this function to give themselves a name in their constructor. The default name is \\"StatisticOutput\\".","sidebar":"core"},"core/statoutput/startOfSimulation":{"id":"core/statoutput/startOfSimulation","title":"startOfSimulation","description":"This function must be implemented.","sidebar":"core"},"core/statoutput/supportsDynamicRegistration":{"id":"core/statoutput/supportsDynamicRegistration","title":"supportsDynamicRegistration","description":"This function may be overridden if needed.","sidebar":"core"},"core/statoutput/unlock":{"id":"core/statoutput/unlock","title":"unlock","description":"Use this function to release the lock acquired by lock().","sidebar":"core"},"core/timeconverter/class":{"id":"core/timeconverter/class","title":"SST::TimeConverter","description":"Shared TimeConverters returned by SST-Core APIs will be removed in SST 16.0. All functions accepting TimeConverter now accept TimeConverter instead. Elements using a TimeConverter returned by SST-Core should create a local non-shared instance as shown:","sidebar":"core"},"core/timeconverter/convertFromCoreTime":{"id":"core/timeconverter/convertFromCoreTime","title":"convertFromCoreTime","description":"This function converts a count from the global view of time to a count in the local view. This","sidebar":"core"},"core/timeconverter/convertToCoreTime":{"id":"core/timeconverter/convertToCoreTime","title":"convertToCoreTime","description":"This function converts from the local view of time to the count in the global view. For","sidebar":"core"},"core/timeconverter/getFactor":{"id":"core/timeconverter/getFactor","title":"getFactor","description":"Returns the factor used for conversions with Core Time.","sidebar":"core"},"core/timeconverter/getPeriod":{"id":"core/timeconverter/getPeriod","title":"getPeriod","description":"Returns a UnitAlgebra representing the clock period captured by this TimeConverter.","sidebar":"core"},"core/types/class":{"id":"core/types/class","title":"sst_types","description":"SST defines a number of types that developers may encounter throughout the codebase. Several of these types are defined in the sst_types.h header and described below.","sidebar":"core"},"core/unitalgebra/class":{"id":"core/unitalgebra/class","title":"SST::UnitAlgebra","description":"The UnitAlgebra class can be used to manipulate values with units that are common in architectural simulations. The class includes support for basic arithmetic with units (addition, subtraction, multiplication, division), as well as conversion between related units such as bits and bytes. UnitAlgebra also handles SI units.","sidebar":"core"},"core/unitalgebra/compeq":{"id":"core/unitalgebra/compeq","title":"operator==","description":"Compare if this object is equal to the argument v.","sidebar":"core"},"core/unitalgebra/compgt":{"id":"core/unitalgebra/compgt","title":"operator>","description":"Compare if this object is greater than to the argument v.","sidebar":"core"},"core/unitalgebra/compgteq":{"id":"core/unitalgebra/compgteq","title":"operator>=","description":"Compare if this object is greater than or equal to the argument v.","sidebar":"core"},"core/unitalgebra/complt":{"id":"core/unitalgebra/complt","title":"operator<","description":"Compare if this object is less than to the argument v.","sidebar":"core"},"core/unitalgebra/complteq":{"id":"core/unitalgebra/complteq","title":"operator<=","description":"Compare if this object is less than or equal to the argument v.","sidebar":"core"},"core/unitalgebra/compneq":{"id":"core/unitalgebra/compneq","title":"operator!=","description":"Compare if this object is not equal to the argument v.","sidebar":"core"},"core/unitalgebra/constructor":{"id":"core/unitalgebra/constructor","title":"constructor","description":"Create a new UnitAlgebra. The string passed to the constructor should include both the value and the units, for example, 3s. A space between the value and units is optional. If the default constructor is used, UnitAlgebra::init() must be called to initialize the object.","sidebar":"core"},"core/unitalgebra/destructor":{"id":"core/unitalgebra/destructor","title":"destructor","description":"Delete a UnitAlgebra object.","sidebar":"core"},"core/unitalgebra/getDoubleValue":{"id":"core/unitalgebra/getDoubleValue","title":"getDoubleValue","description":"Return the value portion of the UnitAlgebra as a double. This discards the units and returns the value in its base units (without SI prefixes). For example, calling getDoubleValue() on a unit algebra of 4KB will return 4000.0.","sidebar":"core"},"core/unitalgebra/getRoundedValue":{"id":"core/unitalgebra/getRoundedValue","title":"getRoundedValue","description":"Return the value portion of the UnitAlgebra as a signed 64-bit integer. This discards the units and returns the value in its base units (without SI prefixes). For example, calling getRoundedValue() on a unit algebra of 4KB will return 4000.","sidebar":"core"},"core/unitalgebra/getValue":{"id":"core/unitalgebra/getValue","title":"getValue","description":"Return the value portion of the UnitAlgebra as an sstbignum, which is a decimal fixed point format used internally in SST. This discards the units and returns the value in its base units (without SI prefixes).","sidebar":"core"},"core/unitalgebra/hasUnits":{"id":"core/unitalgebra/hasUnits","title":"hasUnits","description":"Return whether the UnitAlgebra has the units specified in the parameter.","sidebar":"core"},"core/unitalgebra/init":{"id":"core/unitalgebra/init","title":"init","description":"Initialize a UnitAlgebra object. This function is required if the default constructor was used to create the UnitAlgebra object.","sidebar":"core"},"core/unitalgebra/invert":{"id":"core/unitalgebra/invert","title":"invert","description":"Take the reciprocal of the UnitAlgebra. For example \\"5MHz\\" will become \\"200ns\\".","sidebar":"core"},"core/unitalgebra/isValueZero":{"id":"core/unitalgebra/isValueZero","title":"isValueZero","description":"Return whether the value portion of the UnitAlgebra is zero.","sidebar":"core"},"core/unitalgebra/operatoradd":{"id":"core/unitalgebra/operatoradd","title":"operator+=","description":"Add something to this UnitAlgebra. If the argument is a UnitAlgebra and the units do not match, an error will occur. Otherwise, if the value is unitless (e.g., an int), it will be added to the value of this UnitAlgebra.","sidebar":"core"},"core/unitalgebra/operatordiv":{"id":"core/unitalgebra/operatordiv","title":"operator/=","description":"Divide this UnitAlgebra by the argument. The units will also be divided if the argument is a UnitAlgebra, otherwise only the value is divided.","sidebar":"core"},"core/unitalgebra/operatoreq":{"id":"core/unitalgebra/operatoreq","title":"operator=","description":"Assignment operator that takes a string instead of a UnitAlgebra.","sidebar":"core"},"core/unitalgebra/operatormul":{"id":"core/unitalgebra/operatormul","title":"operator*=","description":"Multiply this UnitAlgebra by the argument. The units will also be multiplied if the argument is a UnitAlgebra, otherwise only the value is multiplied.","sidebar":"core"},"core/unitalgebra/operatorsub":{"id":"core/unitalgebra/operatorsub","title":"operator-=","description":"Subtract something from this UnitAlgebra. If the argument is a UnitAlgebra and the units do not match, an error will occur. Otherwise, if the value is unitless (e.g., an int), it will be subtracted from the value of this UnitAlgebra.","sidebar":"core"},"core/unitalgebra/print":{"id":"core/unitalgebra/print","title":"print","description":"Print the UnitAlgebra to the argument stream.","sidebar":"core"},"core/unitalgebra/printWithBestSI":{"id":"core/unitalgebra/printWithBestSI","title":"printWithBestSI","description":"Print the UnitAlgebra to the argument stream and scale the value to a logical one using SI units. For example, if the UnitAlgebra is \\"4000 Hz\\", print as \\"4 KHz\\". This function uses decimal SI prefixes so \\"4096 B\\" will be printed as \\"4.096 KB\\".","sidebar":"core"},"core/unitalgebra/serialize_order":{"id":"core/unitalgebra/serialize_order","title":"serialize_order","description":"This function serializes a UnitAlgebra object. It is not called directly by SST Elements, but enables Elements to easily serialize a UnitAlgebra, as shown in the example below.","sidebar":"core"},"core/unitalgebra/toString":{"id":"core/unitalgebra/toString","title":"toString","description":"Return a string representation of the UnitAlgebra.","sidebar":"core"},"core/unitalgebra/toStringBestSI":{"id":"core/unitalgebra/toStringBestSI","title":"toStringBestSI","description":"Return a string representation of the UnitAlgebra and scale the value to a logical one using SI units. For example, if the UnitAlgebra is \\"1000 Hz\\", the function returns \\"1 KHz\\". This function uses decimal SI prefixes so \\"4096 B\\" will be printed as \\"4.096 KB\\".","sidebar":"core"},"elements/ariel/intro":{"id":"elements/ariel/intro","title":"ariel","description":"The ariel library models a multicore CPU using a dynamic application trace. The CPU models memory accesses in detail and non-memory accesses as a single cycle operation. Instruction dependencies are not tracked. The ariel library divides the simulation into two parts: a frontend that provides a trace, and a CPU simulation model that consumes the trace and provides the modeling itself. The included frontend leverages Pin to dynamically trace a natively executing x86 application. This frontend supports threaded applications but not MPI applications. Ariel supports memory models that use the StandardMem interface.","sidebar":"elements"},"elements/balar/BalarInDepth":{"id":"elements/balar/BalarInDepth","title":"Balar In Depth","description":"This doc provide some high level views on various aspects of balar.","sidebar":"elements"},"elements/balar/CompilingRISCVCUDA":{"id":"elements/balar/CompilingRISCVCUDA","title":"Compiling RISCV + CUDA","description":"This page provides information to compile a CUDA program from source code into binary that can be run with vanadis and balar.","sidebar":"elements"},"elements/balar/intro":{"id":"elements/balar/intro","title":"balar","description":"The balar library provides an interface between SST and GPGPU-Sim, a cycle-level simulator modeling contemporary graphics processing units (GPUs) running GPU computing workloads written in CUDA. It supports two execution modes: trace-driven and direct-execution.","sidebar":"elements"},"elements/balar/QuickStart":{"id":"elements/balar/QuickStart","title":"QuickStart","description":"This page provides instructions to setup balar and run test examples.","sidebar":"elements"},"elements/balar/TracingCUDAProgram":{"id":"elements/balar/TracingCUDAProgram","title":"Tracing CUDA Program","description":"This page provides steps to use tracer tool to generate CUDA API traces to run balar with BalarTestCPU.","sidebar":"elements"},"elements/cacheTracer/intro":{"id":"elements/cacheTracer/intro","title":"cacheTracer","description":"The cacheTracer can be used to generate a trace of events between any CPU and memHierarchy components. It has two ports, \'northBus\' (connects to the CPU component) and \'southBus\' (memory system component). CacheTracer also keeps track of the addresses of the messages passing through from its one port to another. It performs following tasks:","sidebar":"elements"},"elements/cassini/intro":{"id":"elements/cassini/intro","title":"cassini","description":"The cassini element implements subcomponents that can be used for cache prefetch as well as generally tracking activity in memHierarchy caches. Cassini\'s subcomponents implement memHierarchy\'s CacheListener subcomponent API.","sidebar":"elements"},"elements/cramsim/intro":{"id":"elements/cramsim/intro","title":"cramSim","description":"The cramSim element implements a memory controller and memory models for DDR and HBM. The controller can either accept a trace file or can be connected to memHierarchy components to use within a larger simulation. More detailed information resides in a README in the cramSim source repository.","sidebar":"elements"},"elements/ember/CreatingMotifs":{"id":"elements/ember/CreatingMotifs","title":"Creating Motifs","description":"Ember","sidebar":"elements"},"elements/ember/intro":{"id":"elements/ember/intro","title":"ember","description":"The ember library provides infrastructure for modeling network endpoints and generating network traffic for large-scale network simulations. Applications are modeled as motifs which generate network traffic. Both MPI-like and SHMEM-like motifs are supported. Ember integrates with Firefly which models the NIC and uses the Hermes interface. These in turn integrate with network simulators that implement the SST:SimpleNetwork interface.","sidebar":"elements"},"elements/ember/OTF2Ember":{"id":"elements/ember/OTF2Ember","title":"Capturing and using OTF2 Traces with Ember","description":"This page describes how to capture OTF2 traces and use them within Ember to drive traffic from application traces.","sidebar":"elements"},"elements/ember/QuickStart":{"id":"elements/ember/QuickStart","title":"QuickStart Motif Guide","description":"What is an Ember motif?","sidebar":"elements"},"elements/ember/RunningMotifs":{"id":"elements/ember/RunningMotifs","title":"Running Motifs","description":"Ember Python Configuration","sidebar":"elements"},"elements/firefly/intro":{"id":"elements/firefly/intro","title":"firefly","description":"The firefly library provides network data movement modeling functionality for MPI-like and SHMEM-like APIs. The network interface is implemented via SSTMP and Hermes:Shmem. This model is typically driven by ember.","sidebar":"elements"},"elements/gensa/intro":{"id":"elements/gensa/intro","title":"gensa","description":"This element provides a general-purpose neuromorphic processor core. It performs standard leaky-integrate-and-fire (LIF) dynamics for simulated neurons, and exchanges spike messages between neurons. Currently, this core is standalone. An upcoming release will add the ability to connect cores via standard network elements.","sidebar":"elements"},"elements/golem/intro":{"id":"elements/golem/intro","title":"golem","description":"Golem is an SST element designed for simulating processing using memory (PUM)/in situ computing components. Currently Golem supports analog matrix vector multiplication (MVM) arrays. These arrays can be simulated either through ideal operation emulation or optionally use Sandia\'s CrossSim analog MVM array simulator to incorporate analog non-idealities. For integrating these arrays with other SST components, Golem provides implementations of the RoCC co-processor interface which can be directly connected to a Vanadis CPU core.","sidebar":"elements"},"elements/hermes/intro":{"id":"elements/hermes/intro","title":"hermes","description":"Hermes declares MPI-like and SHMEM-like data movement interfaces. The firefly library implements these interfaces and the ember library uses them.","sidebar":"elements"},"elements/intro":{"id":"elements/intro","title":"SST Elements","description":"SST Element libraries contain components, subcomponents, modules, and other SST objects that can be used to build a simulation.","sidebar":"elements"},"elements/iris/intro":{"id":"elements/iris/intro","title":"iris","description":"Iris provides support packages which allow building network simulations within the Mercury simulation environment. SUMI (Sandia Unified Messaging Interface) provides a messaging interface which targets the Mercury node model, and the libfabric package includes a SUMI provider which allows libfabric applications to run within Mercury.","sidebar":"elements"},"elements/juno/intro":{"id":"elements/juno/intro","title":"juno","description":"Juno is a lightweight processor model which executes programs written in a simple assembly. The processor is designed to be easily extensible and used as an SST example element/component. The processor interfaces with memory via the SST::StandardMem interface.","sidebar":"elements"},"elements/kingsley/intro":{"id":"elements/kingsley/intro","title":"kingsley","description":"Kingsley is used to model on-chip networks that us a mesh interconnect.  Kingsley routers are input queued and will self-discover the network configuration, including the ability to have multiple endpoints connected to each router. Kingsley adheres to the SimpleNetwork interface.","sidebar":"elements"},"elements/llyr/intro":{"id":"elements/llyr/intro","title":"llyr","description":"The llyr spatial component is a highly configurable compute array capable of instantiating processing elements","sidebar":"elements"},"elements/macro/intro":{"id":"elements/macro/intro","title":"macro","description":"The macro software package provides a simulator for large-scale parallel computer architectures. It permits the coarse-grained study of distributed-memory applications. The simulator is driven from either a trace file or skeleton application. The simulator architecture is modular, allowing it to easily be extended with additional network models, trace file formats, software services, and processor models. Macro originated as a standalone simulation infrastructure but it also inter-operates with the SST-Core. Work is underway to port some of macro\'s key functionality into the mercury element for more flexible use with other element libraries.","sidebar":"elements"},"elements/maskmpi/intro":{"id":"elements/maskmpi/intro","title":"mask-mpi","description":"MASK-MPI is a simulator-specific MPI implementation which allows lightweight MPI skeleton applications to be run within the Mercury simulation environment. MASK-MPI supports relatively complex MPI applications, but it is not feature-complete.","sidebar":"elements"},"elements/memHierarchy/addressing":{"id":"elements/memHierarchy/addressing","title":"Addressing","description":"MemHierarchy operates on a physical address space in which components can map either contiguous memory regions or can map regions interleaved at regular intervals. When units are required, be specific with whether you intend base-10 (e.g., GB) or base-2 (e.g., GiB)."},"elements/memHierarchy/cache":{"id":"elements/memHierarchy/cache","title":"Caches","description":"All MemHierarchy caches, regardless of level or type (shared, private, inclusive, noninclusive, etc.) use the same component, memHierarchy.Cache which is implemented in the SST::CacheController class. This picture shows the component structure. The light blue boxes show the available subcomponent slots. The cache has two ports, lowlink and highlink which may be used when connecting to another memHierarchy component or subcomponent (e.g., standardInterface, Cache, DirectoryController, etc.). There are also two subcomponent slots highlink and lowlink which must be used when connecting to a network-type component or subcomponent.","sidebar":"elements"},"elements/memHierarchy/connecting":{"id":"elements/memHierarchy/connecting","title":"Connecting to MemHierarchy","description":"To connect a processor, MMIO device, or other component to memHierarchy, load MemHierarchy\'s memHierarchy.StandardInterface into a SubComponent Slot. Once it is loaded, you can interact with the interface using function calls to send and receive memory requests. Additionally, you may register your endpoint as an MMIO device if you wish which allows other components that are reachable from your device to interact with it via Read and Write requests.","sidebar":"elements"},"elements/memHierarchy/intro":{"id":"elements/memHierarchy/intro","title":"memHierarchy","description":"The memHierarchy library is a collection of cache, scratchpad, directory, and memory components that can be used to build memory systems. The components are generally designed to be interoperable. The library implements SST\'s StandardMemory interface for interfacing between endpoints (CPU, GPU, other accelerator, etc.) and the memHierarchy memory system. Additionally, memHierarchy components can be connected to each other and endpoints via both both raw SST links and network libraries that implement the SimpleNetwork interface.","sidebar":"elements"},"elements/memHierarchy/stdmem":{"id":"elements/memHierarchy/stdmem","title":"StandardMem Interface","description":"MemHierarchy implements the SST::StandardMem API for integration with a processor model. The picture below shows how components like processors, accelerators, etc. interface with memHierarchy using StandardMem. The processor or other \\"endpoint\\" exchanges StandardMem requests with memHierarchy\'s StandardMem API implementation, standardInterface. The implementation handles translating requests into MemHierarchy\'s internal event types. To use the interface, a processor should load the memHierarchy.standardInterface subcomponent and connect the subcomponent\'s port to a memHierarchy component as shown.","sidebar":"elements"},"elements/mercury/intro":{"id":"elements/mercury/intro","title":"mercury","description":"The mercury library enables simulating the behavior of large-scale applications. The elements are derived from functionality available in macro and designed for use with the rest of the SST ecosystem. Mercury achieves accurate results by mimicking (skeletonizing) both the computation and network communication patterns of the application under test. Work is underway to automate this approach by leveraging compiler frameworks.","sidebar":"elements"},"elements/merlin/intro":{"id":"elements/merlin/intro","title":"merlin","description":"Merlin consists of models used for the simulation of high-performance interconnects. The models conform to the SimpleNetwork interface and consist of a configurable input/output queued high-radix router, and network interface for use by the endpoint model.  The router supports multiple network topologies and has pluggable implementations for crossbar arbitration and output arbitration. Merlin is primarily designed to model system-level interconnects, but is sufficiently flexible to be used as a node-level network as well.","sidebar":"elements"},"elements/messier/intro":{"id":"elements/messier/intro","title":"messier","description":"The messier library models a non-volatile memory (NVM) DIMM architecture. The library can be used in conjunction with other SST core and memory system models to simulate an architecture integrating NVDIMMs. Messier is supported as a memory model for memHierarchy-based memory architectures.","sidebar":"elements"},"elements/miranda/intro":{"id":"elements/miranda/intro","title":"miranda","description":"Miranda is a state-machine based core model. The model is split into a core model and an instruction stream generator. Built-in generators include patterns such as SPMV, GUPS, Stream kernels, and stencils. Additionally, the Stake generator integrates with the Spike RISC-V functional simulator to provide timing simulation. The Miranda core accepts memory instructions; other instructions are simulated via timing delays only. Dependencies between instructions are observed. The processor interfaces with memory via the SST::StandardMem interface.","sidebar":"elements"},"elements/mmu/intro":{"id":"elements/mmu/intro","title":"mmu","description":"The mmu library provides a simple memory management unit (mmu) and translation lookaside buffer (TLB) for use with the Vanadis processor model.","sidebar":"elements"},"elements/opal/intro":{"id":"elements/opal/intro","title":"opal","description":"The opal library provides memory allocation support for simulations of multi-node architectures using multiple Ariel instances.","sidebar":"elements"},"elements/osseous/intro":{"id":"elements/osseous/intro","title":"osseous","description":"Osseous is a generic RTL component template. It is a major part of the ERAS framework which leverages ESSENT to automate the translation of a FIRRTL hardware description into a component compatible with simulation via SST.","sidebar":"elements"},"elements/prospero/intro":{"id":"elements/prospero/intro","title":"prospero","description":"Prospero is a trace-based core model. The core models memory instructions only. Multiple Prospero cores can be used in the same simulation, each running independent trace files, to model a multicore architecture. A Pintool for collecting traces from x86 binaries is included. Prospero interfaces with memory via the SST::StandardMem interface.","sidebar":"elements"},"elements/rdmaNic/intro":{"id":"elements/rdmaNic/intro","title":"rdmaNic","description":"The rdmaNic library provides a Network Interface Controller (NIC) model that integrates with memory models that use the SSTSimpleNetwork interface. The NIC provides a memory mapped I/O interface for the CPU to write commands to. The NIC is also a bus mastering device in that it can directly read and write memory. This model was developed to be used with Vanadis but the CPU interface is generic and can be driven by other CPU models.","sidebar":"elements"},"elements/samba/intro":{"id":"elements/samba/intro","title":"samba","description":"The samba library provides a memory management unit (MMU) for use with processor and memory libraries that leverage the StandardMem interface. Samba includes support for multi-level TLBs and page table walks.","sidebar":"elements"},"elements/serrano/intro":{"id":"elements/serrano/intro","title":"serrano","description":"Serrano is an experimental high-level model of a coarse-grain reconfigurable processor.","sidebar":"elements"},"elements/shogun/intro":{"id":"elements/shogun/intro","title":"shogun","description":"Shogun models a crossbar network. It implements SST\'s SimpleNetwork interface.","sidebar":"elements"},"elements/simpleElementExample/intro":{"id":"elements/simpleElementExample/intro","title":"simpleElementExample","description":"The simpleElementExample library contains a number of example Components, SubComponents and other SST library members that demonstrate various aspects of SST, both from a user and developer standpoint.","sidebar":"elements"},"elements/simpleExternalElement/intro":{"id":"elements/simpleExternalElement/intro","title":"simpleExternalElement","description":"SimpleExternalElement is a standalone repository that demonstrates how one might write their own element library and register it with the SST Core framework.","sidebar":"elements"},"elements/simpleSimulation/intro":{"id":"elements/simpleSimulation/intro","title":"simpleSimulation","description":"The simpleSimulation library consists of a \'simpleCarWash\' component which can be used to simulate the throughput of cars through a carwash. This element is provided as an example of discrete event simulation and the SST APIs.","sidebar":"elements"},"elements/thornhill/intro":{"id":"elements/thornhill/intro","title":"thornhill","description":"Thornhill is part of an experimental capability to use detailed compute and memory models together with Ember motifs in network simulations. Thornhill provides an interface to a the Miranda CPU model and the coordination of the memory heap for a modeled node.","sidebar":"elements"},"elements/vanadis/intro":{"id":"elements/vanadis/intro","title":"vanadis","description":"Vanadis is a processor with a detailed pipeline model. The ISA is configurable and it supports both MIPS32 and RISCV64. Multiple cores can be used together to form multicore systems, and cores support both single and multiple threads. The operating system is modeled via system call emulation.","sidebar":"elements"},"elements/vaultsim/intro":{"id":"elements/vaultsim/intro","title":"vaultsim","description":"The vaultsim library provides components to model a stacked, \\"vaulted\\" memory architecture, similar to that of a hybrid memory cube (HMC).","sidebar":"elements"},"elements/zodiac/intro":{"id":"elements/zodiac/intro","title":"zodiac","description":"Zodiac provides a trace capabilities to network simulations (i.e., Ember/Firefly/Merlin stack). Zodiac can be used in place of Ember to drive network simulations from a trace. Additionally, it includes a trace reader.","sidebar":"elements"},"guides/concepts/elementtypes":{"id":"guides/concepts/elementtypes","title":"Types of SST elements","description":"In SST, Elements are individual building blocks that make up not only simulated systems, but can also add functionality to SST-Core. Elements are dynamically loaded at runtime for highly customized simulations.","sidebar":"guides"},"guides/concepts/glossary":{"id":"guides/concepts/glossary","title":"Glossary of SST Terms","description":"Anonymous subcomponent","sidebar":"guides"},"guides/concepts/lifecycle":{"id":"guides/concepts/lifecycle","title":"Simulation lifecycle","description":"Each SST simulation goes through a number of stages, from start-up to exit. These stages are referred to as the SST Lifecycle. Component trees (i.e., a component together with its subcomponents and/or component extensions) are able to perform different actions in each stage through the Component APIs. These are the stages.","sidebar":"guides"},"guides/concepts/time":{"id":"guides/concepts/time","title":"Time in SST","description":"Time in SST is represented by a combination of two values: a time base and a count. The time","sidebar":"guides"},"guides/configuration/configTutorial":{"id":"guides/configuration/configTutorial","title":"Configuring your first simulation","description":"This page steps through how to configure a simulation. Prior to trying this tutorial, make sure you have SST installed (both sst-core and sst-elements). You\'ll also need to be comfortable writing Python scripts, using a text file editor, and using a command line interface.","sidebar":"guides"},"guides/configuration/pythonConfigGuide":{"id":"guides/configuration/pythonConfigGuide","title":"Simulation configuration file","description":"SST provides a Python module to allow interaction with the simulation build system. This Python module is used in the input Python script for the purpose of building the graph that represents the simulation to be performed. This is done by providing classes and functions to define the elements of the simulation, their parameters, and how they are interconnected. The user can also optionally enable statistics and create a user specified partitioning for the described model. Behind the scenes, these classes will build the C\\\\+\\\\+ data structure that is used by SST to construct the simulation model.","sidebar":"guides"},"guides/dev/autotest":{"id":"guides/dev/autotest","title":"AutoTesting","description":"SST employs automatic testing (or \\"AutoTesting\\") for both pull-requests prior to allowing merge and on all devel and master branches in nightly regression jobs. Pull-request testing is run on a subset of SST runtime variants and supported platforms whereas the nightly testing covers all supported platforms and several variants (e.g., serial, parallel) on each.","sidebar":"guides"},"guides/dev/contrib":{"id":"guides/dev/contrib","title":"Contributing to SST","description":"Interested in contributing to the SST repositories? This page describes the process and gives guidelines for contributing to specific SST repositories. To share an element library, tool, or other SST-related capability with the SST community, add a pointer on the Community page.","sidebar":"guides"},"guides/dev/devtutorial":{"id":"guides/dev/devtutorial","title":"Creating a component","description":"In this tutorial, we will create some PingPong elements based on the classic protocol where a sender sends an event (ping) and a receiver responds with another event (pong). The simulation will be very simple: one ping-pong exchange. We will create two separate component types, a \\"Sender\\" to send a \\"ping\\" event and a \\"Responder\\" that responds with a \\"pong\\" event as shown below.","sidebar":"guides"},"guides/dev/naming":{"id":"guides/dev/naming","title":"Element Naming Conventions","description":"Certain names in SST that are used as part of input configuration must follow naming conventions which essentially require that they be valid Python variable names.","sidebar":"guides"},"guides/dev/testfaq":{"id":"guides/dev/testfaq","title":"Testing FAQ","description":"Test Frameworks","sidebar":"guides"},"guides/dev/testframework":{"id":"guides/dev/testframework","title":"Creating test suites","description":"The SST testing framework is built on the Python unittest library. Support for running tests concurrently additionally builds on the Python testtools extensions.","sidebar":"guides"},"guides/dev/testframeworkapi":{"id":"guides/dev/testframeworkapi","title":"Test framework API","description":"The following API functions are provided by the SST test framework. Tests may use these in combination with any built-in Python functions.","sidebar":"guides"},"guides/dev/testing":{"id":"guides/dev/testing","title":"Running SST tests","description":"SST Core includes two test utilities sst-test-core and sst-test-elements. These are python-based utilities built on the unittest module and modified for SST. The code for this framework resides in sst-core/src/sst/core/testingframework/. Pull request and nightly jobs that run tests on Core, Elements, or third-party element libraries, do so by using this framework to locate and run test suites. The utilities are nearly identical and references to one in this guide apply to both unless otherwise stated.","sidebar":"guides"},"guides/features/checkpoint":{"id":"guides/features/checkpoint","title":"Checkpoint and restart","description":"In SST 14, SST began bringing back checkpoint/restart support. Elements are not automatically checkpoint-able. To enable checkpoint/restart, developers must create a function in each element that describes how to serialize the element. A simulation can be checkpointed if all of the elements it uses support checkpoint (i.e., are serializable).","sidebar":"guides"},"guides/features/signal":{"id":"guides/features/signal","title":"Signal handling","description":"SST handles the SIGINT, SIGTERM, SIGUSR1, and SIGUSR2 signals and also uses SIGALRM to execute actions that occur on a timer. Actions are defined based on the RealTimeAction class. SST provides default actions for each of the signals and allows users to override the default with custom actions for SIGUSR1, SIGUSR2, and SIGALRM.","sidebar":"guides"},"guides/files/basics_header_files":{"id":"guides/files/basics_header_files","title":"Basics: Header (.h) Files","description":"This page has not been reviewed recently to ensure that it is up-to-date with the latest SST specification. It is possible the information is out of date."},"guides/files/basics_makefile":{"id":"guides/files/basics_makefile","title":"Basics: Makefile","description":"This page has not been reviewed recently to ensure that it is up-to-date with the latest SST specification. It is possible the information is out of date."},"guides/runningSST":{"id":"guides/runningSST","title":"How to Run SST","description":"Running SST","sidebar":"guides"},"guides/start":{"id":"guides/start","title":"Getting Started","description":"Scroll down to find resources for getting started with SST and navigating documentation.","sidebar":"guides"},"guides/tips/compilation":{"id":"guides/tips/compilation","title":"Compilation tips","description":"Avoid unnecessary recompilation","sidebar":"guides"},"guides/tips/debugging":{"id":"guides/tips/debugging","title":"Debugging tips","description":"Using Debugging Tools","sidebar":"guides"},"tools/commandLine/sst-config":{"id":"tools/commandLine/sst-config","title":"sst-config","description":"sst-config is a command line utility that queries SST\'s configuration to retrieve information about how SST was compiled and libraries that have been registered with it. A common use of this command is to pull compiler flags for element library compilation. Passing the --help flag to sst-config will print a brief usage description.","sidebar":"tools"},"tools/commandLine/sst-info":{"id":"tools/commandLine/sst-info","title":"sst-info","description":"The command line utility, sst-info, leverages the Element Library Information (ELI) macros embedded in SST objects to return a list of elements (e.g., Components, SubComponents, Modules, Partitioners, etc.) provided by each element library registered with the SST-Core, as well as those provided by the Core itself.","sidebar":"tools"},"tools/commandLine/sst-register":{"id":"tools/commandLine/sst-register","title":"sst-register","description":"Use the sst-register utility to register element libraries, source code directories, and test directories with SST-Core. These are used by SST to locate libraries and tests.","sidebar":"tools"}}}}')}}]);