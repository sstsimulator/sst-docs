"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[44343],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(96540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},50883:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"core/iface/SimpleNetwork/finish","title":"finish","description":"See finish() for a description of SST\'s finish phase and the use of this function. The (Sub)Component that loaded a SimpleNetwork interface should call this function during its own finish() function. A SimpleNetwork interface may implement this function if needed, but it is not required.","source":"@site/../docs/core/iface/SimpleNetwork/finish.md","sourceDirName":"core/iface/SimpleNetwork","slug":"/core/iface/SimpleNetwork/finish","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/finish","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/finish.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"finish"},"sidebar":"core","previous":{"title":"complete","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/complete"},"next":{"title":"getEndpointID","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/getEndpointID"}}');var s=i(74848),r=i(28453);const o={title:"finish"},l=void 0,a={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing finish() at a SimpleNetwork",id:"example-1-implementing-finish-at-a-simplenetwork",level:3},{value:"Example 2: Supporting SimpleNetwork&#39;s finish() at an endpoint",id:"example-2-supporting-simplenetworks-finish-at-an-endpoint",level:3},{value:"Header",id:"header",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"virtual void finish();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"../../component/lifecycle/finish",children:(0,s.jsx)(n.code,{children:"finish()"})})," for a description of SST's finish phase and the use of this function. The (Sub)Component that loaded a SimpleNetwork interface should call this function during its own ",(0,s.jsx)(n.code,{children:"finish()"})," function. A SimpleNetwork interface may implement this function if needed, but it is not required."]}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Network interface"})," \xa0",(0,s.jsx)(n.br,{}),"\n","This function is optional."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Endpoint"})," \xa0",(0,s.jsx)(n.br,{}),"\n","Call ",(0,s.jsx)(n.code,{children:"finish()"})," on the interface during the ",(0,s.jsx)(n.code,{children:"finish()"})," phase as SST does not automatically call this function on SubComponents."]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"example-1-implementing-finish-at-a-simplenetwork",children:"Example 1: Implementing finish() at a SimpleNetwork"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"',children:"void LinkControl::finish(void)\n{\n    // Final update to statistics if needed\n    if (is_idle) {\n        idle_time->addData(getCurrentSimCycle() - idle_start);\n        is_ide = false;\n    }\n\n    // Clean up all the events left in the queues. This will help\n    // track down real memory leask as all these events won't be in the\n    // way\n    for ( int i = 0; i < req_vns; i++ ) {\n        while ( !input_queues[i].empty() ) {\n            delete input_queues[i].front();\n            input_queues[i].pop();\n        }\n    }\n    for ( int i = 0; i < used_vns; i++ ) {\n        while ( !output_queues[i].queue.empty() ) {\n            delete output_queues[i].queue.front();\n            output_queues[i].queue.pop();\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-2-supporting-simplenetworks-finish-at-an-endpoint",children:"Example 2: Supporting SimpleNetwork's finish() at an endpoint"}),"\n",(0,s.jsxs)(n.p,{children:["An endpoint should call ",(0,s.jsx)(n.code,{children:"finish()"})," on a SimpleNetwork interface in its own ",(0,s.jsx)(n.code,{children:"finish()"})," function."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void Endpoint::finish() \n{\n    net_iface->finish();\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/interfaces/simpleNetwork.h>\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);