"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[77109],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var s=t(96540);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}},85610:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>v,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"core/iface/StringEvent/class","title":"SST::Interfaces::StringEvent","description":"The StringEvent class is an Event, derived from SST::Event. It is provided for early prototyping and testing use cases. The event wraps a single string. The event is serializable.","source":"@site/../docs/core/iface/StringEvent/class.md","sourceDirName":"core/iface/StringEvent","slug":"/core/iface/StringEvent/class","permalink":"/sst-docs/docs/core/iface/StringEvent/class","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StringEvent/class.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"SST::Interfaces::StringEvent","sidebar_label":"StringEvent"},"sidebar":"core","previous":{"title":"Handler","permalink":"/sst-docs/docs/core/iface/StandardMem/handler"},"next":{"title":"TestEvent","permalink":"/sst-docs/docs/core/iface/TestEvent/class"}}');var r=t(74848),i=t(28453);const c={title:"SST::Interfaces::StringEvent",sidebar_label:"StringEvent"},a=void 0,l={},o=[{value:"Member variables",id:"member-variables",level:2},{value:"Member functions",id:"member-functions",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Destructor",id:"destructor",level:3},{value:"clone",id:"clone",level:3},{value:"getString",id:"getstring",level:3},{value:"Header",id:"header",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The StringEvent class is an Event, derived from SST::Event. It is provided for early prototyping and testing use cases. The event wraps a single string. The event is serializable."}),"\n",(0,r.jsx)(n.h2,{id:"member-variables",children:"Member variables"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"str"})," (std::string) A string. Has no default value."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"member-functions",children:"Member functions"}),"\n",(0,r.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"StringEvent::StringEvent(); // For serialization only\nStringEvent::StringEvent(const std::string& str);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"destructor",children:"Destructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"StringEvent::~StringEvent();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"clone",children:"clone"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"virtual Event* clone();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"getstring",children:"getString"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"const std::string& getString();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/interfaces/stringEvent.h>\n"})})]})}function v(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);