"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[23076],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(96540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}},42772:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"config/unitalgebra/hasUnits","title":"hasUnits","description":"Returns whether the UnitAlgebra has the specified units.","source":"@site/../docs/config/unitalgebra/hasUnits.md","sourceDirName":"config/unitalgebra","slug":"/config/unitalgebra/hasUnits","permalink":"/sst-docs/docs/config/unitalgebra/hasUnits","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/config/unitalgebra/hasUnits.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1716583959000,"frontMatter":{"title":"hasUnits"},"sidebar":"config","previous":{"title":"getRoundedValue","permalink":"/sst-docs/docs/config/unitalgebra/getRoundedValue"},"next":{"title":"invert","permalink":"/sst-docs/docs/config/unitalgebra/invert"}}');var i=n(74848),a=n(28453);const r={title:"hasUnits"},l=void 0,o={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Import",id:"import",level:2}];function u(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Returns whether the UnitAlgebra has the specified units."}),"\n",(0,i.jsx)(t.h2,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"ua.hasUnits(units)\n"})}),"\n",(0,i.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"units"})," (type: str) a string containing the units to look for"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"returns"})," a boolean indicating whether the units given match the UnitAlgebra's units"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from sst import UnitAlgebra\n\nua1 = UnitAlgebra("200TB/s")\n\nprint("\'%s\'.hasUnits(\\"B/s\\") = %r"%(ua1.bestSI(), ua1.hasUnits("B/s")))\nprint("\'%s\'.hasUnits(\\"TB/s\\") = %r"%(ua1.bestSI(), ua1.hasUnits("TB/s")))\nprint("\'%s\'.hasUnits(\\"B\\") = %r"%(ua1.bestSI(), ua1.hasUnits("B")))\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",metastring:'title="Output"',children:"'200TB/s'.hasUnits(\"B/s\") = True\n'200TB/s'.hasUnits(\"TB/s\") = True\n'200TB/s'.hasUnits(\"B\") = False\n"})}),"\n",(0,i.jsx)(t.h2,{id:"import",children:"Import"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"from sst import UnitAlgebra\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);