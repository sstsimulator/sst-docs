"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[37254],{898:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"core/portmodule/serializeEventAttachPointKey","title":"serializeEventAttachPointKey","description":"This does not need to be implemented unless overriding registerLinkAttachTool. It is used to serialize the otherwise opaque key returned by that function.","source":"@site/../docs/core/portmodule/serializeEventAttachPointKey.md","sourceDirName":"core/portmodule","slug":"/core/portmodule/serializeEventAttachPointKey","permalink":"/sst-docs/docs/core/portmodule/serializeEventAttachPointKey","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/portmodule/serializeEventAttachPointKey.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"serializeEventAttachPointKey"},"sidebar":"core","previous":{"title":"registerLinkAttachTool","permalink":"/sst-docs/docs/core/portmodule/registerLinkAttachTool"},"next":{"title":"serializeHandlerInterceptPointKey","permalink":"/sst-docs/docs/core/portmodule/serializeHandlerInterceptPointKey"}}');var i=r(74848),s=r(28453);const o={title:"serializeEventAttachPointKey"},l=void 0,a={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"virtual void serializeEventAttachPointKey(SST::Core::Serialization::serializer& ser, uintptr_t& key);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This does not need to be implemented unless overriding ",(0,i.jsx)(t.a,{href:"/sst-docs/docs/core/portmodule/registerLinkAttachTool",children:(0,i.jsx)(t.code,{children:"registerLinkAttachTool"})}),". It is used to serialize the otherwise opaque ",(0,i.jsx)(t.code,{children:"key"})," returned by that function."]}),"\n",(0,i.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"ser"})," (serializer&) Serializer to use for serialization"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"key"})," (uintptr_t&) The key to serialize"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"void\nPortModule::serializeEventAttachPointKey(SST::Core::Serialization::serializer& ser, uintptr_t& key)\n{\n    if ( ser.mode() == SST::Core::Serialization::serializer::UNPACK ) {\n        key = 0;\n    }\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/portModule.h>\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>l});var n=r(96540);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);