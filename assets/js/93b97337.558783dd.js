"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[80496],{28453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>i});var n=r(96540);const o={},c=n.createContext(o);function s(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(c.Provider,{value:t},e.children)}},89725:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"core/timeconverter/getPeriod","title":"getPeriod","description":"Returns a UnitAlgebra representing the clock period captured by this TimeConverter.","source":"@site/../docs/core/timeconverter/getPeriod.md","sourceDirName":"core/timeconverter","slug":"/core/timeconverter/getPeriod","permalink":"/sst-docs/docs/core/timeconverter/getPeriod","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/timeconverter/getPeriod.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"getPeriod"},"sidebar":"core","previous":{"title":"getFactor","permalink":"/sst-docs/docs/core/timeconverter/getFactor"},"next":{"title":"SST::UnitAlgebra","permalink":"/sst-docs/docs/core/unitalgebra/class"}}');var o=r(74848),c=r(28453);const s={title:"getPeriod"},i=void 0,a={},d=[{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"UnitAlgebra getPeriod() const;\n"})}),"\n",(0,o.jsx)(t.p,{children:"Returns a UnitAlgebra representing the clock period captured by this TimeConverter."}),"\n",(0,o.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:'#include <sst/core/timeConverter.h>\nexample::example(ComponentId_t id, Params& params) : Component(id) \n{\n    TimeConverter converter = registerClock("200MHz", new Clock::Handler2<example, &example::clockHandler>(this));\n\n    Output* out = getSimulationOutput();\n    // Prints "Registered a 200MHz clock."\n    //highlight-start\n    out->output("Registered a %s clock.",\n        converter.getPeriod().toStringBestSI().c_str());\n    //highlight-end\n}\n'})}),"\n",(0,o.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/timeConverter.h\n"})})]})}function p(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);