"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[77819],{28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>o});var n=r(96540);const a={},c=n.createContext(a);function i(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(c.Provider,{value:t},e.children)}},45629:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"elements/balar/TracingCUDAProgram","title":"Tracing CUDA Program","description":"This page provides steps to use tracer tool to generate CUDA API traces to run balar with BalarTestCPU.","source":"@site/../docs/elements/balar/TracingCUDAProgram.md","sourceDirName":"elements/balar","slug":"/elements/balar/TracingCUDAProgram","permalink":"/sst-docs/docs/elements/balar/TracingCUDAProgram","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/elements/balar/TracingCUDAProgram.md","tags":[],"version":"current","lastUpdatedBy":"William-An","lastUpdatedAt":1728153731000,"frontMatter":{"title":"Tracing CUDA Program"},"sidebar":"elements","previous":{"title":"QuickStart","permalink":"/sst-docs/docs/elements/balar/QuickStart"},"next":{"title":"Compiling RISCV + CUDA","permalink":"/sst-docs/docs/elements/balar/CompilingRISCVCUDA"}}');var a=r(74848),c=r(28453);const i={title:"Tracing CUDA Program"},o=void 0,s={},l=[];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["This page provides steps to use tracer tool to generate CUDA API traces to run ",(0,a.jsx)(t.em,{children:"balar"})," with ",(0,a.jsx)(t.em,{children:"BalarTestCPU"}),"."]}),"\n",(0,a.jsx)(t.admonition,{type:"warning",children:(0,a.jsx)(t.p,{children:"We are working on providing a more robust version of the tracer with the new NVBit release. Including better trace format and better computation validation."})}),"\n",(0,a.jsxs)(t.p,{children:["In order to run ",(0,a.jsx)(t.em,{children:"balar"})," in trace-driven mode, you will need to supply the ",(0,a.jsx)(t.em,{children:"BalarTestCPU"})," component with a trace file and associated GPU memory copy data dump. We have created an instruction tracer tool based on ",(0,a.jsx)(t.a,{href:"https://github.com/NVlabs/NVBit",children:"NVBit"})," to generate those. You can find relevant code inside ",(0,a.jsx)(t.a,{href:"https://github.com/accel-sim/accel-sim-framework",children:"Accel-Sim"})," framework: ",(0,a.jsx)(t.code,{children:"ACCEL_SIM_SRC/util/tracer_nvbit/others/cuda_api_tracer_tool"}),"."]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["To setup the tool and generate traces, you will need a machine with a NVIDIA GPU installed. Also ",(0,a.jsx)(t.a,{href:"https://github.com/NVlabs/NVBit",children:"NVBit"})," has some requirements for both GPU hardware and software versions. Refer to its README for more info."]})}),"\n",(0,a.jsx)(t.p,{children:"To pull and compile the tracer tool:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# Get the Accel-Sim framework\ngit clone git@github.com:accel-sim/accel-sim-framework.git\n\n# cd into tracer tool folder\ncd accel-sim-framework/util/tracer_nvbit\n\n# Install nvbit\n./install_nvbit.sh\n\n# Compile tracer tool\n# Which will generate a 'cuda_api_tracer_tool.so' file at\n# './others/cuda_api_tracer_tool/cuda_api_tracer'\nmake -C ./others/cuda_api_tracer_tool\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Then, in order to dump traces, put path to the tracer tool shared object in ",(0,a.jsx)(t.code,{children:"LD_PRELOAD"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"LD_PRELOAD=PATH_TO/cuda_api_tracer_tool.so CUDA_PROG\n"})}),"\n",(0,a.jsx)(t.p,{children:"Which will generate the following files when exiting:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"cuda_calls.trace"}),": the API trace file tracking","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"cudaMemcpy"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"cudaMalloc"})}),"\n",(0,a.jsx)(t.li,{children:"cuda kernel launches"}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.code,{children:"cudaFree"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"cuMemcpyD2H-X-X.data"}),": cuda memcpy device to host data payload"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"cuMemcpyH2D-X-X.data"}),": cuda memcpy host to device data payload"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);