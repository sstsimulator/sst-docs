"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[98026],{12544:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"core/component/link/isPortConnected","title":"isPortConnected","description":"Availability: Component, SubComponent, ComponentExtension","source":"@site/../docs/core/component/link/isPortConnected.md","sourceDirName":"core/component/link","slug":"/core/component/link/isPortConnected","permalink":"/sst-docs/docs/core/component/link/isPortConnected","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/component/link/isPortConnected.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1716583959000,"frontMatter":{"title":"isPortConnected"},"sidebar":"core","previous":{"title":"configureSelfLink","permalink":"/sst-docs/docs/core/component/link/configureSelfLink"},"next":{"title":"Loadable Objects","permalink":"/sst-docs/docs/category/loadable-objects"}}');var s=t(74848),r=t(28453);const i={title:"isPortConnected"},c=void 0,l={},a=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const n={code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"bool isPortConnected(const std::string& name) const;\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Availability:"})," Component, SubComponent, ComponentExtension"]}),"\n",(0,s.jsx)(n.p,{children:"Determine if a port is connected to a link."}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"name"})," (string) Name of the port to check"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"returns"})," (bool) Whether the port is connected"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/simpleElementExample/basicLinks.cc"',children:'#include <sst/core/component.h>\n\nbasicLinks::basicLinks(ComponentId_t id, Params& params) : Component(id) \n{\n    // This example has a port vector. The ports are named port_vectorX where X is the vector index.\n    // Configure the ports in the vector that are connected.\n    std::string linkprefix = "port_vector";\n    std::string linkname = linkprefix + "0";\n    int portnum = 0;\n    //highlight-next-line\n    while (isPortConnected(linkname)) {\n        SST::Link* link = configureLink(linkname, new Event::Handler2<basicLinks,&basicLinks::handleWithEventID,int>(this, portnum));\n        sst_assert(link, CALL_INFO, -1, "Error: Link configuration failed\\n");\n\n        linkVector.push_back(link);\n        portnum++;\n        linkname = linkprefix + std::to_string(portnum);\n    }\n\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h>\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var o=t(96540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);