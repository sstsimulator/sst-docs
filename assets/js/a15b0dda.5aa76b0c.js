"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4229],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var s=t(96540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},55276:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"elements/juno/intro","title":"juno","description":"Juno is a lightweight processor model which executes programs written in a simple assembly. The processor is designed to be easily extensible and used as an SST example element/component. The processor interfaces with memory via the SST::StandardMem interface.","source":"@site/../docs/elements/juno/intro.md","sourceDirName":"elements/juno","slug":"/elements/juno/intro","permalink":"/sst-docs/docs/elements/juno/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/elements/juno/intro.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1729787241000,"frontMatter":{"title":"juno"},"sidebar":"elements","previous":{"title":"iris","permalink":"/sst-docs/docs/elements/iris/intro"},"next":{"title":"kingsley","permalink":"/sst-docs/docs/elements/kingsley/intro"}}');var o=t(74848),i=t(28453);const r={title:"juno"},d=void 0,c={},a=[{value:"Required dependencies",id:"required-dependencies",level:3},{value:"Optional dependencies",id:"optional-dependencies",level:3}];function l(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h3:"h3",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Juno"})," is a lightweight processor model which executes programs written in a simple assembly. The processor is designed to be easily extensible and used as an SST example element/component. The processor interfaces with memory via the ",(0,o.jsx)(n.a,{href:"../../core/iface/StandardMem/class",children:"SST::StandardMem"})," interface."]}),"\n",(0,o.jsx)(n.admonition,{title:"At a Glance",type:"note",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Source Code:"})," ",(0,o.jsx)(n.a,{href:"https://github.com/sstsimulator/juno",children:"juno"})," \xa0",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.strong,{children:"SST Name:"})," ",(0,o.jsx)(n.code,{children:"juno"})," \xa0",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.strong,{children:"Maturity Level:"})," Prototype (2) \xa0",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.strong,{children:"Development Path:"})," Maintenance \xa0",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.strong,{children:"Last Released:"})," SST 14.1"]})}),"\n",(0,o.jsx)(n.h3,{id:"required-dependencies",children:"Required dependencies"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"None"})}),"\n",(0,o.jsx)(n.h3,{id:"optional-dependencies",children:"Optional dependencies"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"None"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);