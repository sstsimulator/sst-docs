"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[33140],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(96540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},55916:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"core/link/recvUntimedData","title":"recvUntimedData","description":"Receive an event during SST\'s init() or complete() phase. Event handlers are not active during this time, so links must be polled using this function.","source":"@site/../docs/core/link/recvUntimedData.md","sourceDirName":"core/link","slug":"/core/link/recvUntimedData","permalink":"/sst-docs/docs/core/link/recvUntimedData","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/link/recvUntimedData.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1716583959000,"frontMatter":{"title":"recvUntimedData"},"sidebar":"core","previous":{"title":"sendUntimedData","permalink":"/sst-docs/docs/core/link/sendUntimedData"},"next":{"title":"getId","permalink":"/sst-docs/docs/core/link/getId"}}');var s=t(74848),r=t(28453);const a={title:"recvUntimedData"},c=void 0,l={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function o(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"Event* recvUntimedData();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Receive an event during SST's ",(0,s.jsx)(n.a,{href:"../component/lifecycle/init",children:(0,s.jsx)(n.code,{children:"init()"})})," or ",(0,s.jsx)(n.a,{href:"../component/lifecycle/complete",children:(0,s.jsx)(n.code,{children:"complete()"})})," phase. Event handlers are not active during this time, so links must be polled using this function."]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"returns"})," Event received or ",(0,s.jsx)(n.code,{children:"nullptr"})," if none available"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="sst-elements/src/sst/elements/simpleElementExample/basicSimLifeCycle.cc"',children:'void basicSimLifeCycle::init(unsigned int phase) {\n\n    // Only send our info on phase 0\n    if (phase == 0) {\n        basicLifeCycleEvent* event = new basicLifeCycleEvent(getName(), eventsToSend);\n        leftLink->sendUntimedData(event);\n    }\n\n    // Check if an event is received. recvUntimedData returns nullptr if no event is available\n    //highlight-next-line\n    while (SST::Event* ev = rightLink->recvUntimedData()) {\n\n        basicLifeCycleEvent* event = dynamic_cast<basicLifeCycleEvent*>(ev);\n\n        if (event) {\n            if (event->getStr() == getName()) { // Event made it around the ring and back to this component\n                delete event;\n            } else { // Event is from another component\n                neighbors.insert(event->getStr());\n                eventsToSend += event->getNum();\n                leftLink->sendUntimedData(event);\n            }\n\n        } else {\n            out->fatal(CALL_INFO, -1, "Error in %s: Received an event during init() but it is not the expected type\\n", getName().c_str());\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/link.h>\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);