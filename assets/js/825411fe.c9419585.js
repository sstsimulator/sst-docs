"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[78107],{28453:(n,e,t)=>{t.d(e,{R:()=>c,x:()=>o});var a=t(96540);const i={},s=a.createContext(i);function c(n){const e=a.useContext(s);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:c(n.components),a.createElement(s.Provider,{value:e},n.children)}},85148:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>o,default:()=>C,frontMatter:()=>c,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"elements/balar/CompilingRISCVCUDA","title":"Compiling RISCV + CUDA","description":"This page provides information to compile a CUDA program from source code into binary that can be run with vanadis and balar.","source":"@site/../docs/elements/balar/CompilingRISCVCUDA.md","sourceDirName":"elements/balar","slug":"/elements/balar/CompilingRISCVCUDA","permalink":"/sst-docs/docs/elements/balar/CompilingRISCVCUDA","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/elements/balar/CompilingRISCVCUDA.md","tags":[],"version":"current","lastUpdatedBy":"William-An","lastUpdatedAt":1742776902000,"frontMatter":{"title":"Compiling RISCV + CUDA"},"sidebar":"elements","previous":{"title":"Tracing CUDA Program","permalink":"/sst-docs/docs/elements/balar/TracingCUDAProgram"},"next":{"title":"Balar In Depth","permalink":"/sst-docs/docs/elements/balar/BalarInDepth"}}');var i=t(74848),s=t(28453);const c={title:"Compiling RISCV + CUDA"},o=void 0,r={},l=[];function _(n){const e={a:"a",admonition:"admonition",code:"code",em:"em",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["This page provides information to compile a CUDA program from source code into binary that can be run with ",(0,i.jsx)(e.em,{children:"vanadis"})," and ",(0,i.jsx)(e.em,{children:"balar"}),"."]}),"\n",(0,i.jsx)(e.admonition,{type:"info",children:(0,i.jsxs)(e.p,{children:["This documentation assumes you have followed the ",(0,i.jsx)(e.a,{href:"/sst-docs/docs/elements/balar/QuickStart#llvm--riscv-gnu-toolchain",children:"QuickStart"})," guide on setting up LLVM and RISCV GNU toolchain."]})}),"\n",(0,i.jsxs)(e.p,{children:["Since no real GPU will be used during the simulation, a custom CUDA runtime library is used to intercept the CUDA API calls from CPU code and dispatch those to ",(0,i.jsx)(e.em,{children:"balar"})," and GPGPU-Sim. You can find the source code for the custom CUDA runtime at ",(0,i.jsx)(e.code,{children:"src/sst/elements/balar/tests/vanadisLLVMRISCV/cuda_runtime_api_vanadis.cc"})]}),"\n",(0,i.jsx)(e.p,{children:"In the same folder, there is a Makefile handling compiling the custom runtime and a simple vector add program."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-Makefile",metastring:'title="Makefile"',children:'# Custom Vanadis CUDA lib\nCUSTOM_CUDA_LIB_SRC := cuda_runtime_api_vanadis.cc\nCUSTOM_CUDA_LIB := cudart_vanadis\n\n# Clang prefix\nCLANG_PREFIX := $(LLVM_INSTALL_PATH)/bin/\n\n# RISCV Toolchain path\n# Need to set RISCV_TOOLCHAIN_INSTALL_PATH env variable\nRISCV_PREFIX := $(RISCV_TOOLCHAIN_INSTALL_PATH)/bin/riscv64-unknown-linux-gnu-\nRISCV_SYSROOT := $(RISCV_TOOLCHAIN_INSTALL_PATH)/sysroot/\nRISCV_CXX := $(wildcard $(RISCV_TOOLCHAIN_INSTALL_PATH)/riscv64-unknown-linux-gnu/include/c++/*/)\n\n# Clang flags\nC_FLAGS_RISCV_LINUX := --target=riscv64-unknown-linux-gnu -march=rv64gc -static-libgcc --gcc-toolchain=$(RISCV_TOOLCHAIN_INSTALL_PATH) --sysroot=$(RISCV_SYSROOT) \nCXX_FLAGS_RISCV_LINUX := -static-libgcc -static-libstdc++ -static --gcc-toolchain=$(RISCV_TOOLCHAIN_INSTALL_PATH) --sysroot=$(RISCV_SYSROOT) -nostdlibinc -stdlib++-isystem$(RISCV_CXX)/ -stdlib++-isystem$(RISCV_SYSROOT)/usr/include -stdlib++-isystem$(RISCV_CXX)/riscv64-unknown-linux-gnu --target=riscv64-unknown-linux-gnu  -march=rv64gc\nCXX_FLAGS_RISCV_LINUX_CLANG_ONLY := --gcc-toolchain=$(RISCV_TOOLCHAIN_INSTALL_PATH) --sysroot=$(RISCV_SYSROOT) -I$(RISCV_SYSROOT)/usr/include --target=riscv64 -march=rv64gc\nCXX_FLAGS_CUDA := --cuda-gpu-arch=$(GPU_ARCH) --cuda-path=$(CUDA_INSTALL_PATH) -L$(CUDA_INSTALL_PATH)/lib64 -lcudart -ldl -lrt -pthread\nCXX_FLAGS_RISCV_CUDA := -static --cuda-gpu-arch=$(GPU_ARCH) --cuda-path=$(CUDA_INSTALL_PATH) -L. -Wl,-static -l$(CUSTOM_CUDA_LIB) -L$(CUDA_INSTALL_PATH)/lib64 -Wl,-static -ldl -lrt -pthread\nCXX_FLAGS_CUDA_WRAPPER := -include __clang_cuda_runtime_wrapper.h\n\nall: helloworld vecadd\n\ntest_llvm_env:\nifeq ($(LLVM_INSTALL_PATH),)\n\t$(error env LLVM_INSTALL_PATH is not set)\nendif\n\ntest_vanadis_envs:\nifeq ($(RISCV_TOOLCHAIN_INSTALL_PATH),)\n\t$(error env RISCV_TOOLCHAIN_INSTALL_PATH is not set)\nendif\nifeq ($(GPU_ARCH),)\n\t$(error env GPU_ARCH is not set)\nendif\n\n# Sample helloworld program, pure CPU code\n# test if clang is working properly\nhelloworld: helloworld.c test_llvm_env\n\t$(CLANG_PREFIX)clang -static -mno-relax $(C_FLAGS_RISCV_LINUX) $< -o $@\n\n# Custom CUDA runtime target\n# Have to embed the CUDA version information for GPGPU-Sim\nvanadis_cuda: $(CUSTOM_CUDA_LIB_SRC) test_vanadis_envs\n\t$(RISCV_PREFIX)gcc -c -static -I$(CUDA_INSTALL_PATH)/include -I. -DBALAR_CUDA_VERSION=\\"libcudart_vanadis.a.$(shell echo $$CUDA_VERSION_NUMBER | cut -c 1-2)\\" -fpic $<\n\t$(RISCV_PREFIX)gcc -shared -o lib$(CUSTOM_CUDA_LIB).so $(CUSTOM_CUDA_LIB_SRC:.cc=.o)\n\t$(RISCV_PREFIX)ar rcs lib$(CUSTOM_CUDA_LIB).a $(CUSTOM_CUDA_LIB_SRC:.cc=.o)\n\n# RISCV + CUDA binary\nvecadd: vecadd.cu test_vanadis_envs test_llvm_env vanadis_cuda\n\t$(CLANG_PREFIX)clang++ $< -o $@ $(CXX_FLAGS_RISCV_CUDA) $(CXX_FLAGS_CUDA_WRAPPER) $(CXX_FLAGS_RISCV_LINUX)\n\n# x86 + CUDA binary\nvecadd_normal: vecadd.cu\n\t$(CLANG_PREFIX)clang++ $< -o $@ $(CXX_FLAGS_CUDA_WRAPPER) $(CXX_FLAGS_CUDA) \n\nclean:\n\trm -f lib$(CUSTOM_CUDA_LIB).so lib$(CUSTOM_CUDA_LIB).a $(CUSTOM_CUDA_LIB_SRC:.cc=.o) vecadd helloworld\n'})}),"\n",(0,i.jsxs)(e.p,{children:["For more complicated CUDA program, you can refer to the flags and CC setup in ",(0,i.jsx)(e.a,{href:"https://github.com/accel-sim/gpu-app-collection/blob/7db54738af0aed3760f496f6c968ee5a40c0ee46/src/cuda/common/common.mk#L77-L106",children:"gpu-app-collection's Makefile"}),"."]}),"\n",(0,i.jsx)(e.admonition,{type:"note",children:(0,i.jsx)(e.p,{children:"Vanadis currently only support programs that are statically linked."})})]})}function C(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(_,{...n})}):_(n)}}}]);