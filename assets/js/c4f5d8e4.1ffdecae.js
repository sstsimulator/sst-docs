"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[52634],{67025:(e,s,t)=>{t.r(s),t.d(s,{default:()=>p});t(96540);var i=t(56289),n=t(40797),a=t(20686),r=t(9303),l=t(50539),o=t(29030);const c={section:"section_rC2D",sectionAlt:"sectionAlt_XiGz",sectionInner:"sectionInner_Y4r1",featureImage:"featureImage_yA8i",topBanner:"topBanner_JYZy",topBannerTitle:"topBannerTitle_nAZL",topBannerTitleText:"topBannerTitleText_Ferb",topBannerDescription:"topBannerDescription_fLgs",hero:"hero_syme",heroInner:"heroInner_VWeJ",heroProjectTagline:"heroProjectTagline_EkV5",heroTitleTextHtml:"heroTitleTextHtml_zYwv",heroLogo:"heroLogo_jM6J","jack-in-the-box":"jack-in-the-box_cF72",indexCtas:"indexCtas_hUA_",indexCtasGitHubButtonWrapper:"indexCtasGitHubButtonWrapper_AOht",indexCtasGitHubButton:"indexCtasGitHubButton_sMIS",indexCtaTryNowButton:"indexCtaTryNowButton_wlFR",releaseRibbon:"releaseRibbon_jtjX",releaseItems:"releaseItems_kftY",releaseTitle:"releaseTitle_OBf6",mainTagLineText:"mainTagLineText_cSSt"};var d=t(74848);function m(){return(0,d.jsx)("div",{className:c.hero,children:(0,d.jsxs)("div",{className:c.heroInner,children:[(0,d.jsxs)(r.A,{as:"h1",className:c.heroProjectTagline,children:[(0,d.jsx)("img",{alt:"SST sketched logo",className:c.heroLogo,src:(0,o.Ay)("/img/sst-sketched.png"),width:"500"}),(0,d.jsx)("span",{className:c.heroTitleTextHtml,dangerouslySetInnerHTML:{__html:(0,l.T)({id:"homepage.hero.title",message:"<b>Fast</b> and <b>scalable</b> system simulation",description:"Fast and scalable system simulation"})}})]}),(0,d.jsxs)("div",{className:c.indexCtas,children:[(0,d.jsx)(i.A,{className:"button button--main",to:"/docs/guides/start",children:(0,d.jsx)(l.A,{children:"Get Started"})}),(0,d.jsx)(i.A,{className:"button button--main",to:"/docs/elements/intro",children:(0,d.jsx)(l.A,{children:"Model Libraries"})}),(0,d.jsx)("span",{className:c.indexCtasGitHubButtonWrapper,children:(0,d.jsx)("iframe",{className:c.indexCtasGitHubButton,src:"https://ghbtns.com/github-btn.html?user=sstsimulator&repo=sst-core&type=star&count=true&size=large",width:160,height:30,title:"GitHub Stars"})})]})]})})}function h(e){let{title:s,text:t,icon:i}=e;return(0,d.jsxs)("div",{class:"row",children:[(0,d.jsx)("div",{class:"col col--1",children:(0,d.jsx)("img",{alt:s,src:i,width:"100"})}),(0,d.jsxs)("div",{class:"col col--8",children:[(0,d.jsx)("h2",{class:"green",children:s}),(0,d.jsx)("p",{dangerouslySetInnerHTML:{__html:t}})]})]})}function u(){return(0,d.jsx)("div",{class:"container",children:(0,d.jsxs)("div",{class:"row margin-top--lg",children:[(0,d.jsx)("div",{class:"col col--2 margin-left--lg",children:(0,d.jsx)("div",{class:"styles.mainTagLineText",children:(0,d.jsxs)("h1",{class:"text--light",children:["A modular, scalable,",(0,d.jsx)("br",{})," cross-platform simulation framework for research, prototyping, and more."]})})}),(0,d.jsxs)("div",{class:"col col--9 col-offset--1 margin-left--lg",children:[(0,d.jsx)(h,{title:"Extensible",text:"Extensiblity is a cornerstone of SST. Integrate new models, wrap existing non-SST models, and even extend the simulation  engine (SST-Core) itself - all without modifications to existing infrastructure. Create your extensions (elements) in a shared library, register it with SST-Core and your extensions are available for use alongside the built-in capabilities.",icon:(0,o.Ay)("/img/icon_plug.svg")}),(0,d.jsx)(h,{title:"Multi-scale",text:"Understanding gate-level performance and observing the impact of new scheduling algorithms on system job queues over time require very different timescales. Further, some models are abstract, capturing high-level application or hardware behaviors, while others are cycle-accurate, or at least approximate, simulating individual flits traveling through a network for example. SST supports simulation across all these scales, and even allows mixing scales and models at different levels of abstraction within a single simulation.",icon:(0,o.Ay)("./img/icon_multiscale.png")}),(0,d.jsx)(h,{title:"Open-source",text:"SST carries a permissive <a href='https://github.com/sstsimulator/sst-core/blob/master/LICENSE.md'>open-source license</a> and is available both from release tarballs and the sstsimulator GitHub repositories.",icon:(0,o.Ay)("./img/icon_openbox.svg")})]})]})})}function g(){return(0,d.jsx)("div",{className:c.releaseRibbon,children:(0,d.jsx)("div",{class:"container",children:(0,d.jsxs)("div",{class:"row",children:[(0,d.jsx)("div",{class:"col col--2 margin-left--lg"}),(0,d.jsx)("div",{class:"col col--9 col-offset--1 margin-left--lg",children:(0,d.jsxs)("div",{className:c.releaseItems,children:[(0,d.jsx)("span",{className:c.releaseTitle,children:"Latest Release:"}),(0,d.jsx)(i.A,{className:"button button--main",to:"https://sst-simulator.org/SSTPages/SSTMainDownloads/",children:(0,d.jsx)(l.A,{children:"Download SST 15.0"})}),(0,d.jsx)(i.A,{className:"button button--main",to:"https://sst-simulator.org/SSTPages/SSTmicroRelease_V15dot0dot0/",children:(0,d.jsx)(l.A,{children:"Release Notes"})})]})})]})})})}function x(){return(0,d.jsxs)("div",{class:"container",children:[(0,d.jsx)("div",{class:"row margin-top--lg margin-left--lg",children:(0,d.jsx)("h1",{class:"green",children:"The Platform"})}),(0,d.jsxs)("div",{class:"row margin-left--lg margin-top--sm",children:[(0,d.jsxs)("h3",{children:["SST-Core: ",(0,d.jsx)("em",{children:"a high-performance parallel discrete event simulation engine"})]}),(0,d.jsxs)("p",{children:["SST can run serially or in parallel, across hundreds of machines with tens of cores each or on a standalone laptop. Performance evaluations have shown that SST can scale to simulate millions of objects (",(0,d.jsx)("em",{children:"elements"})," or more specifically,",(0,d.jsx)("a",{href:"http://sst-simulator.org/sst-docs/docs/core/component/introduction",children:' "components"'})," in SST terminology) and operate efficiently across hundreds of CPUs."]})]}),(0,d.jsxs)("div",{class:"row margin-left--lg margin-top--sm",children:[(0,d.jsxs)("h3",{children:["SST-Elements: ",(0,d.jsx)("em",{children:"a modular modeling ecosystem for customized simulations"})]}),(0,d.jsx)("p",{children:"In SST, the user defines a simulated system by combining building blocks (elements) from libraries of available models. This makes it possible to create and modify simulations in a piecewise fashion and easily reuse models in many different simulations. While the SST-Core framework itself is domain-agnostic, the set of libraries provided with SST (SST-Elements) is comprised largely of elements for computer architecture modeling. Using these elements, you might simulate a simple single-core processor by combing a CPU element, a cache element, and a memory element. You could also reorganize the same elements but add tens to hundreds of instances of each along with some network routers and buses to model a modern processor. SST Elements are built to be flexible, reusable, and adaptable, enabling simulations of current and future systems with the same building blocks and minimal modification."})]}),(0,d.jsx)("div",{class:"row margin--xl",children:(0,d.jsx)("img",{alt:"SST plugin architecture",src:(0,o.Ay)("/img/sst-plugin-arch.png")})})]})}function p(){const{siteConfig:e}=(0,n.A)();return(0,d.jsx)(a.A,{title:`${e.title}`,description:"The Structural Simulation Toolkit: A parallel discrete-event simulation framework for modeling next-generation computer architectures.",children:(0,d.jsxs)("main",{children:[(0,d.jsx)(m,{}),(0,d.jsx)(u,{}),(0,d.jsx)(g,{}),(0,d.jsx)(x,{})]})})}}}]);