"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[80634],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(96540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},37749:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"core/iface/SimpleNetwork/constructor","title":"constructor","description":"This constructor is called when a (Sub)Component loads a SimpleNetwork interface.","source":"@site/../docs/core/iface/SimpleNetwork/constructor.md","sourceDirName":"core/iface/SimpleNetwork","slug":"/core/iface/SimpleNetwork/constructor","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/constructor","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/constructor.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"constructor"},"sidebar":"core","previous":{"title":"SST::Interfaces::SimpleNetwork","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/class"},"next":{"title":"destructor","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/destructor"}}');var s=t(74848),o=t(28453);const i={title:"constructor"},l=void 0,c={},a=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function u(e){const n={br:"br",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"// Interface constructor\nSimpleNetworkClassName(SST::ComponentId_t id, Params& params, int vns);\n// Base SimpleNetwork class constructor\nSST::Interfaces::SimpleNetwork(SST::ComponentId_t id);\n"})}),"\n",(0,s.jsx)(n.p,{children:"This constructor is called when a (Sub)Component loads a SimpleNetwork interface."}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Network interface"})," \xa0",(0,s.jsx)(n.br,{}),"\n","No specific requirements beyond constructing the object."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Endpoint"})," \xa0",(0,s.jsx)(n.br,{}),"\n","Do not call this function directly. The functions for loading SubComponents invoke this constructor."]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"id"})," (ComponentId_t) A unique ID generated by SST for each SubComponent"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"params"})," (Params&) The parameter set passed into the SimpleNetwork SubComponent by the simulation configuration file if user-defined or by the parent (Sub)Component if anonymous"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"vns"})," (int) Number of virtual networks requested to be used by the endpoint"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"returns"})," (SimpleNetwork) The newly constructed SimpleNetwork SubComponent"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.h"',children:'#include <sst/core/interfaces/simpleNetwork.h>\n\n// SubComponent API - define an API for a type of subcomponent\nclass LinkControl : public SST::Interfaces::SimpleNetwork {\npublic:\n    // Tell SST that this class is a SubComponent API\n    SST_ELI_REGISTER_SUBCOMPONENT(LinkControl, \n        "merlin", \n        "linkcontrol",\n        SST_ELI_ELEMENT_VERSION(1,0,0),\n        "Link Control module for building Merlin-enabled NICs",\n        SST::Interfaces::SimpleNetwork)\n\n    /* Rest of ELI macros */\n    LinkControl(ComponentId_t cid, Params &params, int vns);\n\n    ~LinkControl();\n\n    /* Rest of class */\n};\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"',children:'#include <sst_config.h>\n#include "linkControl.h"\n\nLinkControl::LinkControl(ComponentId_t cid, Params &params, int vns) :\n    SST::Interfaces::SimpleNetwork(cid),\n    rtr_link(nullptr), output_timing(nullptr), congestion_timing(nullptr),\n    req_vns(vns), used_vns(0), total_vns(0), vn_out_map(nullptr),\n    vn_remap_out(nullptr), output_queues(nullptr), router_credits(nullptr),\n    router_return_credits(nullptr), input_queues(nullptr),\n    id(-1), logical_nid(-1), use_nid_map(false), job_id(0),\n    curr_out_vn(0), waiting(true), have_packets(false), start_block(0),\n    idle_start(0), is_idle(true),\n    receiveFunctor(nullptr), sendFunctor(nullptr),\n    network_initialized(false),\n    output(getSimulationOutput()),\n    sent(0)\n    {\n        /** Constructor implementation **/\n    }\n'})}),"\n",(0,s.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/interfaces/simpleNetwork.h>\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);