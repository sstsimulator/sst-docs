"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[25006],{28453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>c});var t=n(96540);const i={},d=t.createContext(i);function r(e){const s=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(d.Provider,{value:s},e.children)}},40237:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"core/types/class","title":"sst_types","description":"SST defines a number of types that developers may encounter throughout the codebase. Several of these types are defined in the sst_types.h header and described below.","source":"@site/../docs/core/types/class.md","sourceDirName":"core/types","slug":"/core/types/class","permalink":"/sst-docs/docs/core/types/class","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/types/class.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1687284179000,"frontMatter":{"title":"sst_types","keywords":["ComponentId_t","StatisticId_t","LinkId_t","Cycle_t","SimTime_t","Time_t","watts","joules","farad","volts","LIKELY","UNLIKELY"]},"sidebar":"core","previous":{"title":"Shared::SharedSet","permalink":"/sst-docs/docs/core/sharedobj/sharedSet"},"next":{"title":"SST::Statistic","permalink":"/sst-docs/docs/core/statistics/class"}}');var i=n(74848),d=n(28453);const r={title:"sst_types",keywords:["ComponentId_t","StatisticId_t","LinkId_t","Cycle_t","SimTime_t","Time_t","watts","joules","farad","volts","LIKELY","UNLIKELY"]},c=void 0,l={},o=[{value:"Identifiers",id:"identifiers",level:2},{value:"Time",id:"time",level:2},{value:"Units",id:"units",level:2},{value:"Macros",id:"macros",level:2},{value:"Header",id:"header",level:2}];function a(e){const s={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:["SST defines a number of types that developers may encounter throughout the codebase. Several of these types are defined in the ",(0,i.jsx)(s.code,{children:"sst_types.h"})," header and described below."]}),"\n",(0,i.jsx)(s.h2,{id:"identifiers",children:"Identifiers"}),"\n",(0,i.jsx)(s.p,{children:"These types are used to uniquely tag SST objects."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"ComponentId_t"})," (uint64_t)"]}),"\n",(0,i.jsx)(s.p,{children:"A unique identifier assigned to each component and subcomponent in the simulation. SubComponent IDs share lower-order bits with their parent Component ID."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"StatisticId_t"})," (uint64_t)"]}),"\n",(0,i.jsx)(s.p,{children:"An identifier assigned to each statistic in the simulation"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"LinkId_t"})," (uint32_t)"]}),"\n",(0,i.jsx)(s.p,{children:"A unique identifier assigned to each link in the simulation"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"HandlerId_t"})," (uint64_t)"]}),"\n",(0,i.jsx)(s.p,{children:"A unique identifier assigned to handler functions (clock, link, etc.)"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"time",children:"Time"}),"\n",(0,i.jsx)(s.p,{children:"Several time types are used through SST."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Cycle_t"})," (uint64_t)"]}),"\n",(0,i.jsx)(s.p,{children:"A count of clock cycles"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"SimTime_t"})," (uint64_t)"]}),"\n",(0,i.jsx)(s.p,{children:"Time counted in the simulation's base time quanta. By default this is picoseconds (ps)."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Time_t"})," (double)"]}),"\n",(0,i.jsx)(s.p,{children:"Time in seconds"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"units",children:"Units"}),"\n",(0,i.jsx)(s.p,{children:"Typedefs are included for the following units."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"watts"})," (double)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"joules"})," (double)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"farads"})," (double)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"volts"})," (double)"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"macros",children:"Macros"}),"\n",(0,i.jsxs)(s.p,{children:["Lastly, ",(0,i.jsx)(s.code,{children:"sst_types.h"})," includes some macros for optimizing branch code."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-cpp",children:"#define LIKELY(x)   __builtin_expect((int)(x), 1)\n#define UNLIKELY(x) __builtin_expect((int)(x), 0)\n"})}),"\n",(0,i.jsx)(s.h2,{id:"header",children:"Header"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"sst_types.h"})," header file is included in many SST header files already but can also be included directly if needed."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-cpp",children:"#include <sst/core/sst_types.h>\n"})})]})}function h(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);