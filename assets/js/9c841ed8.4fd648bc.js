"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[87673],{28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>l});var n=i(96540);const s={},d=n.createContext(s);function r(e){const t=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(d.Provider,{value:t},e.children)}},60812:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"core/statoutput/getRegisteredField","title":"getRegisteredField","description":"Returns information about a registered field via a field handle.","source":"@site/../docs/core/statoutput/getRegisteredField.md","sourceDirName":"core/statoutput","slug":"/core/statoutput/getRegisteredField","permalink":"/sst-docs/docs/core/statoutput/getRegisteredField","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/statoutput/getRegisteredField.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"getRegisteredField"},"sidebar":"core","previous":{"title":"getRank","permalink":"/sst-docs/docs/core/statoutput/getRank"},"next":{"title":"getSimulationOutput","permalink":"/sst-docs/docs/core/statoutput/getSimulationOutput"}}');var s=i(74848),d=i(28453);const r={title:"getRegisteredField"},l=void 0,a={},o=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function c(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"StatisticFieldInfo* getRegisteredField(fieldHandle_t fieldHandle);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns information about a registered field via a field handle."}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"fieldHandle"})," (fieldHandle_t) A unique handler indicating the field"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"returns"})," (StatisticFieldInfo*) The StatisticFieldInfo object associated with the requested ",(0,s.jsx)(t.code,{children:"fieldHandle"})]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",metastring:'title="Using getRegisteredField() to print field information in outputField()"',children:'// m_outputBuffer is a class variable, type is std::string\nvoid outputField(fieldHandle_t field_handle, int32_t data) override\n{\n    std::string         buffer;\n    //highlight-next-line\n    StatisticFieldInfo* field_info = getRegisteredField(field_handle);\n\n    if ( nullptr != field_info ) {\n        const char* type_name = getFieldTypeShortName(field_info->getFieldType());\n\n        // Prints for example: "sum.d32 = 24;"\n        m_outputBuffer += format_string("%s.%s = %" PRId32";", field_info->getFieldName().c_str(), type_name, data);\n    }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/statapi/statoutput.h>\n"})})]})}function u(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);