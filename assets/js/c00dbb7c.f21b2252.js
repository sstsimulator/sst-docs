"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[92928],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(96540);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}},61898:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"core/eli/register/sst_eli_register_subcomponent_api","title":"SST_ELI_REGISTER_SUBCOMPONENT_API","description":"SubComponents implement a specific API and SubComponent slots require any SubComponents loaded into them to implement a specific API. This macro registers SubComponent APIs with SST Core. If a SubComponent API inherits from another registered SubComponent API (as opposed to, for example, SST::SubComponent directly), the API should instead register using the SSTELIREGISTERSUBCOMPONENTDERIVEDAPI macro.","source":"@site/../docs/core/eli/register/sst_eli_register_subcomponent_api.md","sourceDirName":"core/eli/register","slug":"/core/eli/register/sst_eli_register_subcomponent_api","permalink":"/sst-docs/docs/core/eli/register/sst_eli_register_subcomponent_api","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/eli/register/sst_eli_register_subcomponent_api.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"SST_ELI_REGISTER_SUBCOMPONENT_API","sidebar_label":"SubComponent API"},"sidebar":"core","previous":{"title":"SubComponent","permalink":"/sst-docs/docs/core/eli/register/sst_eli_register_subcomponent"},"next":{"title":"SubComponent Derived API","permalink":"/sst-docs/docs/core/eli/register/sst_eli_register_subcomponent_derived_api"}}');var o=n(74848),i=n(28453);const r={title:"SST_ELI_REGISTER_SUBCOMPONENT_API",sidebar_label:"SubComponent API"},a=void 0,c={},l=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"SST_ELI_REGISTER_SUBCOMPONENT_API(class_name)\n"})}),"\n",(0,o.jsxs)(t.p,{children:["SubComponents implement a specific API and SubComponent slots require any SubComponents loaded into them to implement a specific API. This macro registers SubComponent APIs with SST Core. If a SubComponent API inherits from another registered SubComponent API (as opposed to, for example, SST::SubComponent directly), the API should instead register using the ",(0,o.jsx)(t.a,{href:"sst_eli_register_subcomponent_derived_api",children:(0,o.jsx)(t.code,{children:"SST_ELI_REGISTER_SUBCOMPONENT_DERIVED_API"})})," macro."]}),"\n",(0,o.jsx)(t.admonition,{title:"Important",type:"info",children:(0,o.jsxs)(t.p,{children:["This macro must reside in a ",(0,o.jsx)(t.code,{children:"public"})," section of the SubComponent API's header file."]})}),"\n",(0,o.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"class_name"})," (class) The name of the SubComponent API class. This is not a string."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",metastring:'"Excerpt from sst-elements/src/sst/elements/basicSubComponent_subcomponent.h"',children:"class basicSubComponentAPI : public SST::SubComponent\n{\npublic:\n    /* \n     * Register this API with SST so that SST can match subcomponent slots to subcomponents \n     */\n     //highlight-next-line\n    SST_ELI_REGISTER_SUBCOMPONENT_API(SST::simpleElementExample::basicSubComponentAPI)\n \n    basicSubComponentAPI(ComponentId_t id, Params& params) : SubComponent(id) { }\n    virtual ~basicSubComponentAPI() { }\n\n    // These are the two functions described in the comment above\n    virtual int compute( int num ) =0;\n    virtual std::string compute( std::string comp) =0;\n};\n"})}),"\n",(0,o.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/subcomponent.h>\n"})})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);