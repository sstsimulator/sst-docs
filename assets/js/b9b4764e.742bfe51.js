"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9736],{28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>a});var n=r(96540);const s={},o=n.createContext(s);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:t},e.children)}},89242:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"core/rng/discrete","title":"Discrete Distribution","description":"The Discrete distribution returns values from a discrete probability distribution. The class accepts two parameters, an array of outcome probabilities and a count of the number of possible outcomes. Optionally, a random number generator can also be provided for sampling. If a random number generator is not provided, Mersenne will be used to sample the distribution.","source":"@site/../docs/core/rng/discrete.md","sourceDirName":"core/rng","slug":"/core/rng/discrete","permalink":"/sst-docs/docs/core/rng/discrete","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/rng/discrete.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"Discrete Distribution"},"sidebar":"core","previous":{"title":"Constant Distribution","permalink":"/sst-docs/docs/core/rng/constant"},"next":{"title":"Exponential Distribution","permalink":"/sst-docs/docs/core/rng/expon"}}');var s=r(74848),o=r(28453);const i={title:"Discrete Distribution"},a=void 0,c={},l=[{value:"Constructor",id:"constructor",level:2},{value:"Parameters",id:"parameters",level:4},{value:"getNextDouble",id:"getnextdouble",level:2},{value:"Parameters",id:"parameters-1",level:4},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The Discrete distribution returns values from a discrete probability distribution. The class accepts two parameters, an array of outcome probabilities and a count of the number of possible outcomes. Optionally, a random number generator can also be provided for sampling. If a random number generator is not provided, ",(0,s.jsx)(t.a,{href:"mersenne",children:"Mersenne"})," will be used to sample the distribution."]}),"\n",(0,s.jsx)(t.h2,{id:"constructor",children:"Constructor"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"DiscreteDistribution(const double* probs, const uint32_t probsCount);\nDiscreteDistribution(const double* probs, const uint32_t probsCount, SST:RNG::Random* baseRNG)\n"})}),"\n",(0,s.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"probs"})," (double*) Array of probabilities of each discrete outcome"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"probsCount"})," (uint32_t) Number of discrete outcomes"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"baseRNG"})," (SST::RNG::Random*) A random number generator for sampling the distribution"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"getnextdouble",children:"getNextDouble"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"double getNextDouble();\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return the next (random) double in the distribution. This will be a double converted from the outcome's probability array index."}),"\n",(0,s.jsx)(t.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"returns"})," (double) The next double in the distribution"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"// Create a distribution\n// Outcome  | Probability\n//    0     |   0.2\n//    1     |   0.05\n//    2     |   0.3\n//    3     |   0.15\n//    4     |   0.3\nuint32_t outcome_count = 5;\ndouble probabilities[] = { 0.2, 0.05, 0.3, 0.15, 0.3};\nSST::RNG::DiscreteDistribution* dist = new SST::RNG::DiscreteDistribution(5, &probabilities);\n\ndouble next;\nnext = dist->getNextDouble();\n"})}),"\n",(0,s.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/rng/discrete.h>\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);