"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[84923],{28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>o});var r=s(96540);const a={},n=r.createContext(a);function i(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(n.Provider,{value:t},e.children)}},86858:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"core/params/insert","title":"insert","description":"Insert a key/value pair or a set of parameters into this Params object. In the case of inserting a Params object, global parameters will be copied into the global params section of this Params object. All other inserted params will be inserted into the local params. The key/value variant of this function optionally takes a parameter to indicate whether the new key/value should overwrite an existing one if it already exists in the Params object. If overwrite=False and the parameter exists in the Params object already, this function will have no effect.","source":"@site/../docs/core/params/insert.md","sourceDirName":"core/params","slug":"/core/params/insert","permalink":"/sst-docs/docs/core/params/insert","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/params/insert.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"insert"},"sidebar":"core","previous":{"title":"getKeys","permalink":"/sst-docs/docs/core/params/getKeys"},"next":{"title":"size","permalink":"/sst-docs/docs/core/params/size"}}');var a=s(74848),n=s(28453);const i={title:"insert"},o=void 0,l={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:"void insert(const std::string& key ,const std::string& value, bool overwrite = true);\nvoid insert(const Params& params);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Insert a key/value pair or a set of parameters into this Params object. In the case of inserting a Params object, global parameters will be copied into the global params section of this Params object. All other inserted params will be inserted into the local params. The key/value variant of this function optionally takes a parameter to indicate whether the new key/value should overwrite an existing one if it already exists in the Params object. If ",(0,a.jsx)(t.code,{children:"overwrite=False"})," and the parameter exists in the Params object already, this function will have no effect."]}),"\n",(0,a.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"key"})," (std::string) New key to add to the Params"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"value"})," (std::string) New value set the new key to in the Params"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"overwrite"})," (bool) Whether this insert should overwrite an existing key in the Params. By default, the parameter is True."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"params"})," (Params) A set of params to add to the insert function. Inserted params that match an existing key will overwrite the existing one."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:'Params p;\np.insert("frequency", "2MHz"); \n'})}),"\n",(0,a.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,a.jsx)(t.p,{children:"The Params header file is included with any SST object that supports Params."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h> // or\n#include <sst/core/params.h> // if not included in base class\n"})})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);