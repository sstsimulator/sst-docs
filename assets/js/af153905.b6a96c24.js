"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[78309],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(96540);const l={},s=r.createContext(l);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),r.createElement(s.Provider,{value:t},e.children)}},76594:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"core/portmodule/interceptHandler","title":"interceptHandler","description":"This function must be implemented. When a PortModule is installed on the receive side of a port, this function will be called whenever an event is received. It will be called before the event is delivered to a port\'s handler. The function must do the following depending on what it does with the passed in event.","source":"@site/../docs/core/portmodule/interceptHandler.md","sourceDirName":"core/portmodule","slug":"/core/portmodule/interceptHandler","permalink":"/sst-docs/docs/core/portmodule/interceptHandler","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/portmodule/interceptHandler.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"interceptHandler"},"sidebar":"core","previous":{"title":"eventSent","permalink":"/sst-docs/docs/core/portmodule/eventSent"},"next":{"title":"installOnReceive","permalink":"/sst-docs/docs/core/portmodule/installOnReceive"}}');var l=n(74848),s=n(28453);const o={title:"interceptHandler"},i=void 0,d={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function a(e){const t={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-cpp",children:"virtual void interceptHandler(uintptr_t key, Event*& ev, bool& cancel) override = 0;\n"})}),"\n",(0,l.jsxs)(t.p,{children:["This function must be implemented. When a PortModule is installed on the ",(0,l.jsx)(t.em,{children:"receive"})," side of a port, this function will be called whenever an event is received. It will be called before the event is delivered to a port's handler. The function must do the following depending on what it does with the passed in event."]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Monitor"})," If the PortModule only monitors the event with no changes, it should set ",(0,l.jsx)(t.code,{children:"cancel"})," to false."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Modify"})," If the PortModule modifies the event, it should set ",(0,l.jsx)(t.code,{children:"cancel"})," to false."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Replace"})," If the PortModule replaces the event with another, it should set ",(0,l.jsx)(t.code,{children:"cancel"})," to false and must also use ",(0,l.jsx)(t.a,{href:"/sst-docs/docs/core/events/copyAllDeliveryInfo",children:"copyAllDeliveryInfo"})," to transfer metadata between the original and new events. The function must then delete the original event and set ",(0,l.jsx)(t.code,{children:"ev"})," to the new event."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Delete"})," If the PortModule deletes the event, it should set ",(0,l.jsx)(t.code,{children:"cancel"})," to true."]}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["The ",(0,l.jsx)(t.code,{children:"key"})," parameter is inherited from a generic underlying base API that PortModules use and can be ignored in PortModules."]}),"\n",(0,l.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"key"})," (uintptr_t) A key that identifies the PortModule attach site. This can be ignored and will always be 0 for PortModules."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"ev"})," (Event*&) A pointer to the event that was received."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"cancel"})," (bool&) Indicates whether delivery of the event should be cancelled. If set to True, then ",(0,l.jsx)(t.code,{children:"interceptHandler"})," must also delete the event."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-cpp",children:"void DropEvent::interceptHandler(uintptr_t key, Event*& ev, bool& cancel)\n{\n    uint32_t prob = (rng->getNextUInt32() % 100);\n    if (prob <= probability) { // Where 0 <= probability <= 100\n        delete ev;\n        ev = nullptr;\n        cancel = true;\n    } else {\n        cancel = false;\n    }\n}\n"})}),"\n",(0,l.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/portModule.h>\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}}}]);