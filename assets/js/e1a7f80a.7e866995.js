"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[53806],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var r=t(96540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},49052:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"core/iface/SimpleNetwork/send","title":"send","description":"Send a request to the network. The function returns whether the Request can be sent. If it returns false, the Request has been rejected and the endpoint must try again later (e.g., there is not enough buffer space to send). If it returns true, the Request has been accepted by the interface. The interface may buffer the event for some period of time, it is not required to send it immediately.","source":"@site/../docs/core/iface/SimpleNetwork/send.md","sourceDirName":"core/iface/SimpleNetwork","slug":"/core/iface/SimpleNetwork/send","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/send","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/SimpleNetwork/send.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"send"},"sidebar":"core","previous":{"title":"requestToReceive","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/requestToReceive"},"next":{"title":"sendUntimedData","permalink":"/sst-docs/docs/core/iface/SimpleNetwork/sendUntimedData"}}');var s=t(74848),i=t(28453);const o={title:"send"},d=void 0,a={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing send() in a SimpleNetwork interface",id:"example-1-implementing-send-in-a-simplenetwork-interface",level:3},{value:"Example 2: Sending a Request from an endpoint",id:"example-2-sending-a-request-from-an-endpoint",level:3},{value:"Header",id:"header",level:2}];function l(e){const n={br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"virtual bool send(Request* req, int vn) = 0;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Send a request to the network. The function returns whether the Request can be sent. If it returns ",(0,s.jsx)(n.code,{children:"false"}),", the Request has been rejected and the endpoint must try again later (e.g., there is not enough buffer space to send). If it returns ",(0,s.jsx)(n.code,{children:"true"}),", the Request has been accepted by the interface. The interface may buffer the event for some period of time, it is not required to send it immediately."]}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Network interface"})," \xa0",(0,s.jsx)(n.br,{}),"\n","When this function is called, determine whether the Request ",(0,s.jsx)(n.code,{children:"req"})," can be sent on the virtual network ",(0,s.jsx)(n.code,{children:"vn"}),". If so, accept the request and return ",(0,s.jsx)(n.code,{children:"true"}),". If not, do nothing with the request and return ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Endpoint"})," \xa0",(0,s.jsx)(n.br,{}),"\n","Use this function to send events during simulation. Must correctly handle rejected requests."]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"req"})," (Request*) Pointer to Request to send"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"vn"})," (int) Which virtual network to send the Request out on"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"returns"})," (bool) Whether the event was accepted (",(0,s.jsx)(n.code,{children:"true"}),") or not (",(0,s.jsx)(n.code,{children:"false"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"example-1-implementing-send-in-a-simplenetwork-interface",children:"Example 1: Implementing send() in a SimpleNetwork interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/merlin/interfaces/linkControl.cc"',children:"bool LinkControl::send(SimpleNetwork::Request* req, int vn)\n{\n    // Check to see if the VN is in range\n    if ( vn >= req_vns ) return false;\n    req->vn = vn;\n\n    ...\n    RtrEvent* ev = new RtrEvent(req, id, vn);\n    ev->computeSizeInFlits(flit_size);\n    int flits = ev->getSizeInFlits();\n\n    // Check to see if there are enough credits to send\n    if ( out_handle.credits < flits ) return false;\n\n    // Update credits and enqueue Request\n    out_handle.credits -= flits;\n    out_handle.queue.push(ev);\n\n    /* Update timing, congestion, do tracing here */\n    \n    return true;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-2-sending-a-request-from-an-endpoint",children:"Example 2: Sending a Request from an endpoint"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'SimpleNetwork::Request *req = new SimpleNetwork::Request();\nSST::Interfaces::StringEvent *strEv = new SST::Interfaces::StringEvent("hi!");\nreq->src = my_endpoint_id;\nreq->dest = a_destination_id;\nreq->size_in_bits = sizeof(strEv->getString()) * 8;\nreq->vn = vn;\nreq->givePayload(strEv);\n\nif (!net_iface->send(req, req->vn))\n{\n    // Try sending later\n    request_buffer.push_back(req);\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/interfaces/simpleNetwork.h>\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);