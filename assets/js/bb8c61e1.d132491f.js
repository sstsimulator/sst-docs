"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[55969],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var s=n(96540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}},37380:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"core/output/output","title":"output","description":"Output the message with formatting as specified by the format parameter. If called with CALL_INFO (line, file, func) parameters, the output will also prepend the Output object\'s prefix to the message.","source":"@site/../docs/core/output/output.md","sourceDirName":"core/output","slug":"/core/output/","permalink":"/sst-docs/docs/core/output/","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/output/output.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1675712938000,"frontMatter":{"title":"output"},"sidebar":"core","previous":{"title":"fatal","permalink":"/sst-docs/docs/core/output/fatal"},"next":{"title":"verbose","permalink":"/sst-docs/docs/core/output/verbose"}}');var r=n(74848),o=n(28453);const i={title:"output"},c=void 0,a={},l=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:3},{value:"Header",id:"header",level:2}];function u(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"void output(const char* format, ...) const;\nvoid output(uint32_t line, const char* file, const char* func, const char* format, ...) const;\n"})}),"\n",(0,r.jsx)(t.p,{children:"Output the message with formatting as specified by the format parameter. If called with CALL_INFO (line, file, func) parameters, the output will also prepend the Output object's prefix to the message."}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"line"})," (uint32_t) Line number of calling function (use CALL_INFO macro)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"file"})," (const char*) File name of calling function (use CALL_INFO macro)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"func"})," (const char*) Name of calling function (use CALL_INFO macro)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"format"})," (const char*) Format string. All valid formats for printf are available"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"..."})," (variable) Arguments for format string"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(t.h3,{id:"example-1",children:"Example 1"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:'//#1\nout.output(CALL_INFO,"Warn addr %" PRIx64 " ignored\\n", vec[i].addr);\n'})}),"\n",(0,r.jsx)(t.h3,{id:"example-2",children:"Example 2"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:'//#2\nout.output("WARNING:  Found dangling link: %s.  It is connected on one side to component %s.\\n",clink.name.c_str(),\n                    comps[clink.component[1]].name.c_str());\n'})}),"\n",(0,r.jsx)(t.h3,{id:"example-3",children:"Example 3"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:' schedout.output("toRun:\\n");\nfor (vector<Job*>::iterator it2 = intoRun -> begin(); !found && it2 != intoRun -> end(); it2++) {\n    schedout.output("%s\\n", (*it2) -> toString().c_str());\n}\nschedout.output("running:\\n");\nfor (vector<Job*>::iterator it2 = inrunning -> begin(); !found && it2 != inrunning -> end(); it2++) {\n    schedout.output("%s\\n", (*it2) -> toString().c_str());\n} \n'})}),"\n",(0,r.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/output.h>\n"})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);