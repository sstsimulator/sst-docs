"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[90810],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(96540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},57308:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>m});const o=JSON.parse('{"id":"core/component/component/primaryComponentOKToEndSim","title":"primaryComponentOKToEndSim","description":"Availability: Component","source":"@site/../docs/core/component/component/primaryComponentOKToEndSim.md","sourceDirName":"core/component/component","slug":"/core/component/component/primaryComponentOKToEndSim","permalink":"/sst-docs/docs/core/component/component/primaryComponentOKToEndSim","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/component/component/primaryComponentOKToEndSim.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"primaryComponentOKToEndSim"},"sidebar":"core","previous":{"title":"primaryComponentDoNotEndSim","permalink":"/sst-docs/docs/core/component/component/primaryComponentDoNotEndSim"},"next":{"title":"SST::SubComponent","permalink":"/sst-docs/docs/core/component/subcomponent/class"}}');var s=t(74848),i=t(28453);const r={title:"primaryComponentOKToEndSim"},c=void 0,a={},m=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void primaryComponentOKToEndSim();\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Availability"}),": Component"]}),"\n",(0,s.jsxs)(n.p,{children:["A primary component that has previous registered using ",(0,s.jsx)(n.a,{href:"registerAsPrimaryComponent",children:"registerAsPrimaryComponent()"})," calls this function to let the simulation know that it is currently OK to end simulation. Simulation will not end until all primary components have called this function."]}),"\n",(0,s.jsxs)(n.p,{children:["To change status and prevent simulation end, use ",(0,s.jsx)(n.a,{href:"primaryComponentDoNotEndSim",children:"primaryComponentDoNoEndSim()"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"returns"})," None"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="sst-elements/src/sst/elements/simpleElementExample/basicSimLifeCycle.h"',children:"#include <sst/core/component.h>\n#include <sst/core/link.h>\n\nclass basicSimLifeCycle : public SST::Component {\n  public:\n\t\n\t/** ELI removed for brevity, would be here **/\n\n\tbasicSimLifeCycle(SST::ComponentId_t id, SST::Params& params);\n\t~basicSimLifeCycle();\n\n\tvoid handleEvent(SST::Event* ev);\n\t\n\t/** Other public functions here */\n\n  private:\n\t// Parameters\n    unsigned eventsToSend;\t\t\t\t\t// Number of events we will send and receive\n    bool verbose;\n\n    // Component state\n    unsigned eventsReceived;                // Number of events we've received\n    unsigned eventsForwarded;               // Number of events we've forwarded\n    unsigned eventsSent;                    // Number of events we've sent (initiated)\n\n\t/** Other private class members here */\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:'title="sst-elements/src/sst/elements/simpleElementExample/basicSimLifeCycle.cc"',children:"#include \"sst_config.h\"\n#include \"basicSimLifeCycle.h\"\n\nbasicSimLifeCycle::basicSimLifeCycle( SST::ComponentId_t id, SST::Params& params ) : SST::Component(id) \n{\n\t/** Rest of constructor here */\n\n\t// Register as primary and prevent simulation end until we've received all the events we need\n\tregisterAsPrimaryComponent();\n\tprimaryComponentDoNotEndSim();\n}\n\n/* Event handler for use during SST's run loop */\nvoid basicSimLifeCycle::handleEvent(SST::Event* ev) {\n\tbasicLifeCycleEvent* event = dynamic_cast<basicLifeCycleEvent*>(ev);\n\n\tif (event && event->getStr() == getName()) {\n\t\teventsReceived++;\n\t\tdelete event;\n\n\t\t// We send the same number of events that we receive\n\t\t// If we've received all the events we expect, it's OK to end simulation\n\t\tif (eventsReceived == eventsToSend)\n\t\t\tprimaryComponentOKToEndSim();\n\t}\n\n\t/** Rest of handler here */\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/component.h>\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);