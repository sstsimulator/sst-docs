"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5675],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var r=s(96540);const d={},i=r.createContext(d);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),r.createElement(i.Provider,{value:n},e.children)}},61885:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"core/iface/StandardMem/req/readlock","title":"ReadLock","description":"Response Type StandardMem::ReadResp  &nbsp;","source":"@site/../docs/core/iface/StandardMem/req/readlock.md","sourceDirName":"core/iface/StandardMem/req","slug":"/core/iface/StandardMem/req/readlock","permalink":"/sst-docs/docs/core/iface/StandardMem/req/readlock","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/req/readlock.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"ReadLock"},"sidebar":"core","previous":{"title":"WriteResp","permalink":"/sst-docs/docs/core/iface/StandardMem/req/writeresp"},"next":{"title":"WriteUnlock","permalink":"/sst-docs/docs/core/iface/StandardMem/req/writeunlock"}}');var d=s(74848),i=s(28453);const t={title:"ReadLock"},c=void 0,l={},a=[{value:"Member variables",id:"member-variables",level:2},{value:"Member functions",id:"member-functions",level:2},{value:"Defined in <code>Request</code> base class",id:"defined-in-request-base-class",level:3},{value:"Virtual functions inherited from the <code>Request</code> base class",id:"virtual-functions-inherited-from-the-request-base-class",level:3},{value:"makeResponse",id:"makeresponse",level:4},{value:"needsResponse",id:"needsresponse",level:4},{value:"convert",id:"convert",level:4},{value:"handle",id:"handle",level:4},{value:"getString",id:"getstring",level:4},{value:"Header",id:"header",level:2}];function o(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"// Constructor\nSST::Interfaces::StandardMem::ReadLock(Addr pAddr, uint64_t size, flags_t flags = 0, Addr vAddr = 0, \n    Addr iPtr = 0, uint32_t tid = 0);\n"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Response Type"})," ",(0,d.jsx)(n.a,{href:"readresp",children:"StandardMem::ReadResp"}),"  \xa0",(0,d.jsx)(n.br,{}),"\n",(0,d.jsx)(n.strong,{children:"Needs Response"})," ",(0,d.jsx)(n.code,{children:"true"})]}),"\n",(0,d.jsxs)(n.p,{children:["The StandardMem::ReadLock request class defines a request to lock an address in the memory system and return the value of the line. A lock prevents access by any other processor and must be followed eventually by a StandardMem::WriteUnlock to release the lock on the line. Issuing multiple ReadLock requests consecutively without an intervening WriteUnlock for the same address is an error condition. An interface that receives this request should return a response containing the requested data. Fields for both a virtual and physical address are available, the interpretation of those fields is up to the underlying memory system model. ",(0,d.jsx)(n.code,{children:"physAddr"})," is however required in the constructor."]}),"\n",(0,d.jsx)(n.h2,{id:"member-variables",children:"Member variables"}),"\n",(0,d.jsxs)(n.p,{children:["Including those inherited from the ",(0,d.jsx)(n.code,{children:"StandardMem::Request"})," base class, ",(0,d.jsx)(n.code,{children:"StandardMem::ReadLock"})," includes the following member variables."]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"id"})," (id_t) A request or response identifier. A request and its response contain the same identifier."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"flags"})," (flags_t) A 32-bit vector indicating any special flags added to the request"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"pAddr"})," (Addr) The physical starting address for the bytes to be read and locked"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"vAddr"})," (Addr) The virtual (if any) starting address for the bytes to be read and locked"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"size"})," (uint64_t) The number of bytes to read and lock"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"iPtr"})," (Addr) An instruction pointer. This is optional metadata."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"tid"})," (uint32_t) An optional thread ID, can be used by memory systems if needed"]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"member-functions",children:"Member functions"}),"\n",(0,d.jsxs)(n.h3,{id:"defined-in-request-base-class",children:["Defined in ",(0,d.jsx)(n.a,{href:"class",children:(0,d.jsx)(n.code,{children:"Request"})})," base class"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"getId"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"setNoncacheable"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"unsetNoncacheable"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"getNoncacheable"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"setSuccess"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"unsetSuccess"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"getSuccess"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"setFail"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"unsetFail"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"getFail"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"setTrace"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"unsetTrace"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"getTrace"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"setFlag"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"unsetFlag"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"getFlag"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"clearAllFlags"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"getAllFlags"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"getFlagString"})}),"\n"]}),"\n",(0,d.jsxs)(n.h3,{id:"virtual-functions-inherited-from-the-request-base-class",children:["Virtual functions inherited from the ",(0,d.jsx)(n.a,{href:"class",children:(0,d.jsx)(n.code,{children:"Request"})})," base class"]}),"\n",(0,d.jsx)(n.h4,{id:"makeresponse",children:"makeResponse"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"Request* makeResponse();\n"})}),"\n",(0,d.jsxs)(n.p,{children:["Creates a ",(0,d.jsx)(n.a,{href:"readresp",children:"ReadResp"})," initialized as a response to this read request.\nInitializes the ",(0,d.jsx)(n.code,{children:"data"})," field in the response to be ",(0,d.jsx)(n.code,{children:"size"})," bytes with value ",(0,d.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,d.jsx)(n.admonition,{title:"Important",type:"info",children:(0,d.jsxs)(n.p,{children:["Interfaces ",(0,d.jsx)(n.em,{children:"must"})," set the ",(0,d.jsx)(n.code,{children:"data"})," field in the response after calling this function if the simulation uses data values. The ",(0,d.jsx)(n.code,{children:"makeResponse()"})," function only initializes the field to 0."]})}),"\n",(0,d.jsx)(n.h4,{id:"needsresponse",children:"needsResponse"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"bool needsResponse();\n"})}),"\n",(0,d.jsxs)(n.p,{children:["Returns ",(0,d.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,d.jsx)(n.h4,{id:"convert",children:"convert"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"SST::Event* convert(RequestConverter* converter);\n"})}),"\n",(0,d.jsxs)(n.p,{children:["Invokes ",(0,d.jsx)(n.code,{children:"convert()"})," on the supplied ",(0,d.jsx)(n.code,{children:"converter"})," visitor class to return an SST::Event in an implementation-specific format."]}),"\n",(0,d.jsx)(n.h4,{id:"handle",children:"handle"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"virtual void handle(RequestHandler* handler) =0;\n"})}),"\n",(0,d.jsxs)(n.p,{children:["Invokes ",(0,d.jsx)(n.code,{children:"handle()"})," on the supplied ",(0,d.jsx)(n.code,{children:"handler"})," visitor class to handle the event according to type."]}),"\n",(0,d.jsx)(n.h4,{id:"getstring",children:"getString"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"virtual std::string getString() =0;\n"})}),"\n",(0,d.jsx)(n.p,{children:"Returns a formatted string listing all fields of the ReadLock."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-sh",children:"Example Outputs:\nID: 133, Type: ReadLock, Flags: [], PhysAddr: 0x13158, VirtAddr: 0x13158, Size: 8, InstPtr: 0x10176, ThreadID: 0\nID: 206, Type: ReadLock, Flags: [F_TRACE], PhysAddr: 0x7ffffcf0, VirtAddr: 0x7ffffcf0, Size: 8, InstPtr: 0x103e2, ThreadID: 0\n"})}),"\n",(0,d.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/interfaces/stdMem.h>\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}}}]);