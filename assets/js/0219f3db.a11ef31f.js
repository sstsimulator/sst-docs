"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[80704],{2143:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"core/portmodule/serializeHandlerInterceptPointKey","title":"serializeHandlerInterceptPointKey","description":"This does not need to be implemented unless overriding registerHandlerIntercept. It is used to serialize the otherwise opaque key returned by that function.","source":"@site/../docs/core/portmodule/serializeHandlerInterceptPointKey.md","sourceDirName":"core/portmodule","slug":"/core/portmodule/serializeHandlerInterceptPointKey","permalink":"/sst-docs/docs/core/portmodule/serializeHandlerInterceptPointKey","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/portmodule/serializeHandlerInterceptPointKey.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"serializeHandlerInterceptPointKey"},"sidebar":"core","previous":{"title":"serializeEventAttachPointKey","permalink":"/sst-docs/docs/core/portmodule/serializeEventAttachPointKey"},"next":{"title":"getCoreTimeBase","permalink":"/sst-docs/docs/core/portmodule/getCoreTimeBase"}}');var i=t(74848),s=t(28453);const o={title:"serializeHandlerInterceptPointKey"},l=void 0,a={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function c(e){const r={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"virtual void serializeHandlerInterceptPointKey(SST::Core::Serialization::serializer& ser, uintptr_t& key);\n"})}),"\n",(0,i.jsxs)(r.p,{children:["This does not need to be implemented unless overriding ",(0,i.jsx)(r.a,{href:"/sst-docs/docs/core/portmodule/registerHandlerIntercept",children:(0,i.jsx)(r.code,{children:"registerHandlerIntercept"})}),". It is used to serialize the otherwise opaque ",(0,i.jsx)(r.code,{children:"key"})," returned by that function."]}),"\n",(0,i.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"ser"})," (serializer&) Serializer to use for serialization"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"key"})," (uintptr_t&) The key to serialize"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"void\nPortModule::serializeHandlerInterceptPointKey(SST::Core::Serialization::serializer& ser, uintptr_t& key)\n{\n    if ( ser.mode() == SST::Core::Serialization::serializer::UNPACK ) {\n        key = 0;\n    }\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"header",children:"Header"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"#include <sst/core/portModule.h>\n"})})]})}function p(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>l});var n=t(96540);const i={},s=n.createContext(i);function o(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);