"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[18865],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var c=n(96540);const s={},o=c.createContext(s);function i(e){const t=c.useContext(o);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),c.createElement(o.Provider,{value:t},e.children)}},41374:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>a});const c=JSON.parse('{"id":"core/statoutput/lock","title":"lock","description":"Use this function to protect against multithreading races if needed. The function will block until the lock is acquired. Any call to lock() needs to be paired with a call to unlock().","source":"@site/../docs/core/statoutput/lock.md","sourceDirName":"core/statoutput","slug":"/core/statoutput/lock","permalink":"/sst-docs/docs/core/statoutput/lock","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/statoutput/lock.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"lock"},"sidebar":"core","previous":{"title":"setStatisticOutputName","permalink":"/sst-docs/docs/core/statoutput/setStatisticOutputName"},"next":{"title":"unlock","permalink":"/sst-docs/docs/core/statoutput/unlock"}}');var s=n(74848),o=n(28453);const i={title:"lock"},r=void 0,l={},a=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"void lock();\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Use this function to protect against multithreading races if needed. The function will block until the lock is acquired. Any call to ",(0,s.jsx)(t.code,{children:"lock()"})," needs to be paired with a call to ",(0,s.jsx)(t.a,{href:"./unlock",children:(0,s.jsx)(t.code,{children:"unlock()"})}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Note that the lock ",(0,s.jsx)(t.em,{children:"has already been acquired"})," when SST calls ",(0,s.jsx)(t.code,{children:"implStartOutputEntries()"})," on a StatisticOutput object, which ensures that ",(0,s.jsx)(t.code,{children:"implStartOutputEntries()"}),", ",(0,s.jsx)(t.code,{children:"implStopOutputEntries()"})," and any intervening calls to ",(0,s.jsx)(t.code,{children:"outputField()"})," occur atomically for each statistic. Further, ",(0,s.jsx)(t.code,{children:"startOfSimulation()"})," and ",(0,s.jsx)(t.code,{children:"endOfSimulation()"})," are only called for thread 0 on each rank and locking is not necessary. Locking will typically only be required when inheriting from ",(0,s.jsx)(t.code,{children:"StatisticOutput"})," directly, rather than from ",(0,s.jsx)(t.code,{children:"StatisticFieldsOutput"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:'//highlight-next-line\nthis->lock();\nbuffer += "thing0";\nbuffer += "thing1";\nbuffer += "thing2";\nthis->unlock();\n'})}),"\n",(0,s.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/statapi/statoutput.h>\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);