"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3616],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var s=n(96540);const r={},c=s.createContext(r);function o(e){const t=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(c.Provider,{value:t},e.children)}},66676:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"core/events/clone","title":"clone","description":"clone() can be implemented by event classes for copying the event.","source":"@site/../docs/core/events/clone.md","sourceDirName":"core/events","slug":"/core/events/clone","permalink":"/sst-docs/docs/core/events/clone","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/events/clone.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"clone"},"sidebar":"core","previous":{"title":"serialize_order","permalink":"/sst-docs/docs/core/events/serialize_order"},"next":{"title":"generateUniqueId","permalink":"/sst-docs/docs/core/events/generateUniqueId"}}');var r=n(74848),c=n(28453);const o={title:"clone"},l=void 0,a={},i=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"virtual Event* clone();\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"clone()"})," can be implemented by event classes for copying the event."]}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"returns"})," A copy of the event"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/merlin/router.h"',children:"// Implement a clone function that can \n// be used to copy a RtrEvent for broadcasts\nvirtual RtrEvent* clone() override {\n    RtrEvent * ret = new RtrEvent(*this);\n    ret->request = this->request->clone(); // Clone the request that this event wraps\n    return ret;\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/event.h>\n"})})]})}function p(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);