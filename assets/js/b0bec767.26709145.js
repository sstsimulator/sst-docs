"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[55877],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var o=n(96540);const r={},c=o.createContext(r);function i(e){const t=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(c.Provider,{value:t},e.children)}},96960:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"core/timeconverter/convertToCoreTime","title":"convertToCoreTime","description":"This function converts from the local view of time to the count in the global view. For","source":"@site/../docs/core/timeconverter/convertToCoreTime.md","sourceDirName":"core/timeconverter","slug":"/core/timeconverter/convertToCoreTime","permalink":"/sst-docs/docs/core/timeconverter/convertToCoreTime","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/timeconverter/convertToCoreTime.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"convertToCoreTime"},"sidebar":"core","previous":{"title":"convertFromCoreTime","permalink":"/sst-docs/docs/core/timeconverter/convertFromCoreTime"},"next":{"title":"getFactor","permalink":"/sst-docs/docs/core/timeconverter/getFactor"}}');var r=n(74848),c=n(28453);const i={title:"convertToCoreTime"},s=void 0,l={},a=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function m(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"SimTime_t convertToCoreTime (SimTime_t time);\n"})}),"\n",(0,r.jsx)(t.p,{children:"This function converts from the local view of time to the count in the global view. For\nexample, if a local component counts time in 1ns quanta and its time is 250, the function would return\n250,000 if the core time base was 1ps (250ns * 1000 = 250,000ps). This function is used in Links when\nadding extra latency (specified in the local view of time) on an event send."}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"time"})," (SimTime_t) Local time to convert to core time"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"returns"})," (SimTime_t) Converted core time"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:'void example::exampleClockHandler(Cycle_t cycle) \n{\n    out->output("My clock is at cycle %" PRIu64 " which is %" PRIu64 " in the core time base units.\\n",\n        cycle, clockTimeConverter->convertToCoreTime(cycle));\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/timeConverter.h\n"})})]})}function d(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}}}]);