"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[51305],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(96540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},81775:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>x,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"core/rng/xorshift","title":"XOR-Shift RNG","description":"The XOR-shift generator is a very lightweight random number generator based on XOR shifts. See the Wikipedia article on Xorshift generators for more information.","source":"@site/../docs/core/rng/xorshift.md","sourceDirName":"core/rng","slug":"/core/rng/xorshift","permalink":"/sst-docs/docs/core/rng/xorshift","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/rng/xorshift.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1678138197000,"frontMatter":{"title":"XOR-Shift RNG"},"sidebar":"core","previous":{"title":"Mersenne RNG","permalink":"/sst-docs/docs/core/rng/mersenne"},"next":{"title":"SST::RandomDistribution","permalink":"/sst-docs/docs/core/rng/distrib"}}');var i=t(74848),s=t(28453);const a={title:"XOR-Shift RNG"},l=void 0,d={},c=[{value:"Constructor",id:"constructor",level:2},{value:"Parameters",id:"parameters",level:4},{value:"generateNextInt32",id:"generatenextint32",level:2},{value:"Parameters",id:"parameters-1",level:4},{value:"generateNextInt64",id:"generatenextint64",level:2},{value:"Parameters",id:"parameters-2",level:4},{value:"generateNextUInt32",id:"generatenextuint32",level:2},{value:"Parameters",id:"parameters-3",level:4},{value:"generateNextUInt64",id:"generatenextuint64",level:2},{value:"Parameters",id:"parameters-4",level:4},{value:"nextUniform",id:"nextuniform",level:2},{value:"Parameters",id:"parameters-5",level:4},{value:"seed",id:"seed",level:2},{value:"Parameters",id:"parameters-6",level:4},{value:"Examples",id:"examples",level:2},{value:"Example 1: generateNextInt32()",id:"example-1-generatenextint32",level:3},{value:"Example 2: generateNextUInt32()",id:"example-2-generatenextuint32",level:3},{value:"Example 3: generateNextUInt64()",id:"example-3-generatenextuint64",level:3},{value:"Header",id:"header",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The XOR-shift generator is a very lightweight random number generator based on XOR shifts. See the Wikipedia article on ",(0,i.jsx)(n.a,{href:"http://en.wikipedia.org/wiki/Xorshift",children:"Xorshift generators"})," for more information."]}),"\n",(0,i.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"// #1 - use a random seed based on time-of-day\n// NOTE: this will create variation between runs and between platforms.\nXORShiftRNG::XORShiftRNG();\n\n// #2 - use explicitly defined seed\nXORShiftRNG::XORShiftRNG(unsigned int seed);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Create a new XORShift random number generator."}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"returns"})," None"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"generatenextint32",children:"generateNextInt32"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int32_t generateNextInt32();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Generate the next signed 32-bit integer."}),"\n",(0,i.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"returns"})," (int32_t) The next signed 32-bit integer."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"generatenextint64",children:"generateNextInt64"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"int64_t generateNextInt64();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Generate the next signed 64-bit integer."}),"\n",(0,i.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"returns"})," (int64_t) The next signed 64-bit integer."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"generatenextuint32",children:"generateNextUInt32"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"uint32_t generateNextUInt32();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Generate the next unsigned 32-bit integer."}),"\n",(0,i.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"returns"})," (uint32_t) The next unsigned 32-bit integer."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"generatenextuint64",children:"generateNextUInt64"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"uint64_t generateNextUInt64();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Generate the next unsigned 64-bit integer."}),"\n",(0,i.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"returns"})," (uint64_t) The next unsigned 64-bit integer"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"nextuniform",children:"nextUniform"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"double  nextUniform();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Generate the next double within the range [0,1)."}),"\n",(0,i.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"returns"})," (double) The next double within the range [0,1)."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"seed",children:"seed"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"void seed(uint64_t newSeed);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Re-seed the random number generator."}),"\n",(0,i.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"newSeed"})," (uint64_t) A seed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"returns"})," None"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"example-1-generatenextint32",children:"Example 1: generateNextInt32()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"SST::RNG::XORShiftRNG* rng = new SST::RNG::XORShiftRNG(11);\n\nint rndNumber;\nrndNumber = (int)(rng->generateNextInt32());\nrndNumber = (rndNumber & 0x0000FFFF) ^ ((rndNumber & 0xFFFF0000) >> 16);\nrndNumber = abs((int)(rndNumber % 3));\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-2-generatenextuint32",children:"Example 2: generateNextUInt32()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"SST::RNG::XORShiftRNG randomGenerator = new SST::RNG::XORShiftRNG(11);\n\nint rndNumber;\nint index = randomGenerator.generateNextUInt32() % (numWays-1);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-3-generatenextuint64",children:"Example 3: generateNextUInt64()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"SST::RNG::XORShiftRNG rng = new SST::RNG::XORShiftRNG(11);\n\nuint64_t selectA = (rng.generateNextUInt64() % pageCount);\nuint64_t selectB = (rng.generateNextUInt64() % pageCount);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/rng/xorshift.h>\n"})})]})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);