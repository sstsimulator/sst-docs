"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[72397],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var r=n(96540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}},40053:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"core/component/time/getTimeConverter","title":"getTimeConverter","description":"Availability: Component, SubComponent, ComponentExtension","source":"@site/../docs/core/component/time/getTimeConverter.md","sourceDirName":"core/component/time","slug":"/core/component/time/getTimeConverter","permalink":"/sst-docs/docs/core/component/time/getTimeConverter","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/component/time/getTimeConverter.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"getTimeConverter"},"sidebar":"core","previous":{"title":"getDefaultTimeBase","permalink":"/sst-docs/docs/core/component/time/getDefaultTimeBase"},"next":{"title":"getCoreTimeBase","permalink":"/sst-docs/docs/core/component/time/getCoreTimeBase"}}');var o=n(74848),i=n(28453);const s={title:"getTimeConverter"},c=void 0,a={},l=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function m(e){const t={admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"// Deprecated, will be replaced in SST 16.0\nTimeConverter* getTimeConverter(const std::string& base);\nTimeConverter* getTimeConverter(const UnitAlgebra& base);\n// Will replace deprecated functions in SST 16.0\nTimeConverter getTimeConverter(const std::string& base);\nTimeConverter getTimeConverter(const UnitAlgebra& base);\n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.em,{children:"Availability:"})," Component, SubComponent, ComponentExtension"]}),"\n",(0,o.jsxs)(t.admonition,{title:"Deprecation",type:"warning",children:[(0,o.jsx)(t.p,{children:"Shared TimeConverters returned by SST-Core APIs will be removed in SST 16.0. All functions accepting TimeConverter* now accept TimeConverter instead. Elements using a TimeConverter* returned by SST-Core should create a local non-shared instance as shown:"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"// Old code\nTimeConverter* tc = function_that_returns_tc();\n// New code\nTimeConverter tc = function_that_returns_tc();\n"})})]}),"\n",(0,o.jsx)(t.p,{children:"Get a time converter object for the specified time base."}),"\n",(0,o.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"base"})," (string, UnitAlgebra) Time base, with SI units, to generate a time converter for"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"returns"})," (TimeConverter*) Handle to the created time converter"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:'TimeConverter tc0 = getTimeConverter("200ms");\nUnitAlgebra ua0 = UnitAlgebra("22GHz");\nTimeConverter tc1 = getTimeConverter(ua0);\n'})}),"\n",(0,o.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h>\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}}}]);