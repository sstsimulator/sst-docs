"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[95956],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(96540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},31675:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/dev/naming","title":"Element Naming Conventions","description":"Certain names in SST that are used as part of input configuration must follow naming conventions which essentially require that they be valid Python variable names.","source":"@site/../docs/guides/dev/naming.md","sourceDirName":"guides/dev","slug":"/guides/dev/naming","permalink":"/sst-docs/docs/guides/dev/naming","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/guides/dev/naming.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"Element Naming Conventions"},"sidebar":"guides","previous":{"title":"Creating a component","permalink":"/sst-docs/docs/guides/dev/devtutorial"},"next":{"title":"Contributing to SST","permalink":"/sst-docs/docs/guides/dev/contrib"}}');var t=i(74848),r=i(28453);const o={title:"Element Naming Conventions"},l=void 0,a={},d=[{value:"Restrictions",id:"restrictions",level:2},{value:"Valid Examples",id:"valid-examples",level:3},{value:"Invalid Examples",id:"invalid-examples",level:3},{value:"Exception for integer format specifiers",id:"exception-for-integer-format-specifiers",level:3}];function c(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Certain names in SST that are used as part of input configuration must follow naming conventions which essentially require that they be ",(0,t.jsx)(n.em,{children:"valid Python variable names"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"These restrictions apply to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["User-provided names for Links and Components in input configurations.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Example: The names given in a Python input file via ",(0,t.jsx)(n.code,{children:"sst.Link(name)"})," and ",(0,t.jsx)(n.code,{children:"sst.Component(name, lib.element)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Developer-provided names for Element Library Info (ELI) types for:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Elements (library, component, subcomponent, etc.)"}),"\n",(0,t.jsx)(n.li,{children:"Parameters"}),"\n",(0,t.jsx)(n.li,{children:"SubComponent slot names"}),"\n",(0,t.jsx)(n.li,{children:"Statistics"}),"\n",(0,t.jsx)(n.li,{children:"Ports"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"restrictions",children:"Restrictions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Names must start with a letter or single underscore."}),"\n",(0,t.jsxs)(n.li,{children:["Names may only contain alphanumeric characters and underscores.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Exception: An integer format specifier is allowed for port and parameter names and is treated as a number. See below."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Names may be scoped using a period/dot (.). Names on either side of the dot must be valid names (i.e., a dot may not be followed immediately by a number or multiple underscores)."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"valid-examples",children:"Valid Examples"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"link_bw"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"_latency"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"output.vc"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"port5"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"invalid-examples",children:"Invalid Examples"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"4example"})," (begins with a number)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"port.5"})," (",(0,t.jsx)(n.code,{children:"5"})," is not by itself a valid name)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"__vn"})," (begins with more than one underscore)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"exception-for-integer-format-specifiers",children:"Exception for integer format specifiers"}),"\n",(0,t.jsxs)(n.p,{children:["Parameters and port names may include an integer format specifier ",(0,t.jsx)(n.code,{children:"%d"})," which allows for a set of names with slight variations. In this case ",(0,t.jsx)(n.code,{children:"%d"})," is considered a number and must follow the naming restrictions for numbers (i.e., may not follow a dot). For example, an ELI name of ",(0,t.jsx)(n.code,{children:"port%d"})," is valid and would allow ports named ",(0,t.jsx)(n.code,{children:"port0"}),", ",(0,t.jsx)(n.code,{children:"port1"}),", etc. However, a port named ",(0,t.jsx)(n.code,{children:"port.%d"})," would not be allowed as the number follows a dot."]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);