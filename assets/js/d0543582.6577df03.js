"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[27110],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(96540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}},64545:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"elements/ember/OTF2Ember","title":"Capturing and using OTF2 Traces with Ember","description":"This page describes how to capture OTF2 traces and use them within Ember to drive traffic from application traces.","source":"@site/../docs/elements/ember/OTF2Ember.md","sourceDirName":"elements/ember","slug":"/elements/ember/OTF2Ember","permalink":"/sst-docs/docs/elements/ember/OTF2Ember","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/elements/ember/OTF2Ember.md","tags":[],"version":"current","lastUpdatedBy":"Dean Chester","lastUpdatedAt":1720783822000,"frontMatter":{"title":"Capturing and using OTF2 Traces with Ember"},"sidebar":"elements","previous":{"title":"Running Motifs","permalink":"/sst-docs/docs/elements/ember/RunningMotifs"},"next":{"title":"firefly","permalink":"/sst-docs/docs/elements/firefly/intro"}}');var i=n(74848),r=n(28453);const a={title:"Capturing and using OTF2 Traces with Ember"},o=void 0,c={},l=[{value:"Capturing OTF2 Traces",id:"capturing-otf2-traces",level:2},{value:"TAU",id:"tau",level:3},{value:"Score-P",id:"score-p",level:3},{value:"Building SST Elements for OTF2 Traces",id:"building-sst-elements-for-otf2-traces",level:2},{value:"Running the OTF2 Motif in SST",id:"running-the-otf2-motif-in-sst",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"This page describes how to capture OTF2 traces and use them within Ember to drive traffic from application traces."}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Utilising this functionality requires a change to the build configuration for SST Elements. See ",(0,i.jsx)(t.a,{href:"#building-sst-elements-for-otf2-traces",children:"Building SST Elements for OTF2 Traces"})]})}),"\n",(0,i.jsxs)(t.p,{children:["This file makes use of the ",(0,i.jsx)(t.a,{href:"https://github.com/sstsimulator/ember",children:"Ember Communication Pattern Library"})," for a test application."]}),"\n",(0,i.jsx)(t.h2,{id:"capturing-otf2-traces",children:"Capturing OTF2 Traces"}),"\n",(0,i.jsxs)(t.p,{children:["There are two methods to generate OTF traces, firstly using ",(0,i.jsx)(t.a,{href:"https://www.cs.uoregon.edu/research/tau/home.php",children:"TAU"}),"and the second option using ",(0,i.jsx)(t.a,{href:"https://www.vi-hps.org/projects/score-p/",children:"Score-P"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"This guide assumes that either TAU or Score-P are installed on the system."}),"\n",(0,i.jsx)(t.h3,{id:"tau",children:"TAU"}),"\n",(0,i.jsx)(t.p,{children:"TAU generates its own traces which can in turn be converted in to OTF2 traces."}),"\n",(0,i.jsx)(t.p,{children:"You must set the TAU_MAKEFILE environment variable to the machine specific makefile:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"$ export TAU_MAKEFILE=${TAU_INSTALL}/lib/Makefile.tau-intel-mpi-pthread-pdt\n"})}),"\n",(0,i.jsx)(t.p,{children:"The application needs to be compiled with the TAU wrapper like so:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"$ make CC=tau_cc.sh\n"})}),"\n",(0,i.jsx)(t.p,{children:"Once this built we can submit a parallel run to a cluster, with Slurm a script could look like:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",metastring:"title=Example Tau Slurm Script",children:"#!/bin/bash\n\n\n#SBATCH -N 2\n#SBATCH -n 1\n\nexport TAU_TRACE=1\nexport TRACEDIR=${HOME}/traces/halo3d-26\nsrun -n <tasks> -N <nodes> tau_exec halo3d-26\n"})}),"\n",(0,i.jsx)(t.p,{children:"When the application has been run the TAU traces will be located at ${HOME}/traces."}),"\n",(0,i.jsx)(t.p,{children:"They can then merge them:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"$ tau_merge -e events.*.edf -m halo3d-26.edf tautrace.*.trc halo3d-26.trc\n"})}),"\n",(0,i.jsx)(t.p,{children:"And finally convert those to OTF2:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ tau2otf2 halo3d-26.trc tau.edf halo3d26-traces\n"})}),"\n",(0,i.jsx)(t.h3,{id:"score-p",children:"Score-P"}),"\n",(0,i.jsx)(t.p,{children:"TBC"}),"\n",(0,i.jsx)(t.h2,{id:"building-sst-elements-for-otf2-traces",children:"Building SST Elements for OTF2 Traces"}),"\n",(0,i.jsxs)(t.p,{children:["When configuring SST Elements to the use the OTF2 Motif you must enable it with the following configuration flag ",(0,i.jsx)(t.code,{children:"--with-otf2"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ ../configure --with-otf2=${OTF2_INSTALL_PATH} --prefix=$SST_ELEMENTS_HOME --with-sst-core=$SST_CORE_HOME\n"})}),"\n",(0,i.jsx)(t.h2,{id:"running-the-otf2-motif-in-sst",children:"Running the OTF2 Motif in SST"}),"\n",(0,i.jsx)(t.p,{children:"This document assumes that a system has been configured in SST, and is ready to use and will just define how to configure the endpoint in python."}),"\n",(0,i.jsx)(t.p,{children:"Add the motif to an endpoint like so:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'ep.addMotif("OTF2 tracePrefix=path/to/trace/halo3d26-traces.otf2")\n'})}),"\n",(0,i.jsx)(t.p,{children:"The number of endpoints must match that of the trace:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'ep = EmberMPIJob(0, 2, 1, 1)\nep.addMotif("Init")\nep.addMotif("OTF2 tracePrefix=halo3d26-traces.otf2")\nep.addMotif("Fini")\n# Turn on Verbosity for this endpoint\nep.ember.verbose = 1\n'})}),"\n",(0,i.jsx)(t.p,{children:"The path to the traces can be absolute or relative."}),"\n",(0,i.jsx)(t.p,{children:"Currently there is an issue with linking to OTF2; so you must set LD_PRELOAD to the OTF2 lib prior to running SST:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ export LD_PRELOAD=${OTF2_INSTALL_PATH}/lib/libotf2.so\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);