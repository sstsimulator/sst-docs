"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[80194],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var o=t(96540);const s={},i=o.createContext(s);function l(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(i.Provider,{value:n},e.children)}},63699:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"guides/concepts/glossary","title":"Glossary of SST Terms","description":"Anonymous subcomponent","source":"@site/../docs/guides/concepts/glossary.md","sourceDirName":"guides/concepts","slug":"/guides/concepts/glossary","permalink":"/sst-docs/docs/guides/concepts/glossary","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/guides/concepts/glossary.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1727462588000,"frontMatter":{"title":"Glossary of SST Terms"},"sidebar":"guides","previous":{"title":"Time in SST","permalink":"/sst-docs/docs/guides/concepts/time"},"next":{"title":"Features","permalink":"/sst-docs/docs/category/features"}}');var s=t(74848),i=t(28453);const l={title:"Glossary of SST Terms"},c=void 0,r={},a=[{value:"Anonymous subcomponent",id:"anonymous-subcomponent",level:2},{value:"AutoTester",id:"autotester",level:2},{value:"Clock",id:"clock",level:2},{value:"Component",id:"component",level:2},{value:"Component extension",id:"component-extension",level:2},{value:"Component tree",id:"component-tree",level:2},{value:"Core",id:"core",level:2},{value:"Config file",id:"config-file",level:2},{value:"Element",id:"element",level:2},{value:"Element library",id:"element-library",level:2},{value:"ELI",id:"eli",level:2},{value:"Event",id:"event",level:2},{value:"Link",id:"link",level:2},{value:"Module",id:"module",level:2},{value:"Port",id:"port",level:2},{value:"Self-link",id:"self-link",level:2},{value:"Subcomponent",id:"subcomponent",level:2},{value:"Time base",id:"time-base",level:2},{value:"Time vortex",id:"time-vortex",level:2},{value:"User subcomponent",id:"user-subcomponent",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"anonymous-subcomponent",children:"Anonymous subcomponent"}),"\n",(0,s.jsx)(n.p,{children:"A subcomponent that is not directly instantiated in the simulation configuration file but rather instantiated by another element in its component tree."}),"\n",(0,s.jsx)(n.h2,{id:"autotester",children:"AutoTester"}),"\n",(0,s.jsx)(n.p,{children:"SST's continuous integration (CI) and testing infrastructure."}),"\n",(0,s.jsx)(n.h2,{id:"clock",children:"Clock"}),"\n",(0,s.jsx)(n.p,{children:"An event that is triggered on a regular cadence (frequency) by calling a clock handler."}),"\n",(0,s.jsx)(n.h2,{id:"component",children:"Component"}),"\n",(0,s.jsx)(n.p,{children:'The basic building block of an SST simulation. Components are simulation models and multiple components can be connected to form simulated systems. Components together with their subcomponents and extensions are called a "component tree".'}),"\n",(0,s.jsx)(n.h2,{id:"component-extension",children:"Component extension"}),"\n",(0,s.jsxs)(n.p,{children:["A class derived from ",(0,s.jsx)(n.code,{children:"SST::ComponentExtension"})," that is conceptually part of a component. Used when it makes sense from a code-organization perspective to break a component into multiple classes. Unlike subcomponents, component extensions are not dynamically loadable."]}),"\n",(0,s.jsx)(n.h2,{id:"component-tree",children:"Component tree"}),"\n",(0,s.jsx)(n.p,{children:"A component together with any subcomponents and component extensions it loads. Conceptually, SST treats a component tree as if it were a component, despite it potentially being comprised of multiple elements."}),"\n",(0,s.jsx)(n.h2,{id:"core",children:"Core"}),"\n",(0,s.jsx)(n.p,{children:'Generally refers to "SST-Core", SST\'s discrete-event simulation framework.'}),"\n",(0,s.jsx)(n.h2,{id:"config-file",children:"Config file"}),"\n",(0,s.jsx)(n.p,{children:"The input provided to SST which defines the components to simulate, how to connect those components, and what statistics should be generated by the simulation. Most often this is a Python script but other inputs such as JSON are possible too."}),"\n",(0,s.jsx)(n.h2,{id:"element",children:"Element"}),"\n",(0,s.jsx)(n.p,{children:"An SST object that can be used to build simulations. Elements include components, subcomponents, modules, and component extensions."}),"\n",(0,s.jsx)(n.h2,{id:"element-library",children:"Element library"}),"\n",(0,s.jsx)(n.p,{children:"A group of elements that are compiled together into a single dynamic library."}),"\n",(0,s.jsx)(n.h2,{id:"eli",children:"ELI"}),"\n",(0,s.jsx)(n.p,{children:'"Element Library Information". Metadata including name, description, supported parameters, ports, etc. about an SST element that is registered with the SST-Core.'}),"\n",(0,s.jsx)(n.h2,{id:"event",children:"Event"}),"\n",(0,s.jsx)(n.p,{children:"The unit of communication between component trees."}),"\n",(0,s.jsx)(n.h2,{id:"link",children:"Link"}),"\n",(0,s.jsx)(n.p,{children:"Links represent connectivity between two component trees. Component trees interact with each other by sending Events over Links."}),"\n",(0,s.jsx)(n.h2,{id:"module",children:"Module"}),"\n",(0,s.jsx)(n.p,{children:"A dynamically-loadable class that does not have access to SST's Component APIs (see subcomponent for contrast)."}),"\n",(0,s.jsx)(n.h2,{id:"port",children:"Port"}),"\n",(0,s.jsx)(n.p,{children:"A named connection point for a Link in a component or subcomponent."}),"\n",(0,s.jsx)(n.h2,{id:"self-link",children:"Self-link"}),"\n",(0,s.jsx)(n.p,{children:"A special case of Link where both endpoints of the link connect to the same component tree."}),"\n",(0,s.jsx)(n.h2,{id:"subcomponent",children:"Subcomponent"}),"\n",(0,s.jsx)(n.p,{children:"A class that can be dynamically loaded into a component or another subcomponent and that has access to SST's Component APIs. Subcomponents are considered part of their parent (sub)component and may communicate with their parent or child (sub)components via function calls in addition to Links."}),"\n",(0,s.jsx)(n.h2,{id:"time-base",children:"Time base"}),"\n",(0,s.jsx)(n.p,{children:"Units of time."}),"\n",(0,s.jsx)(n.h2,{id:"time-vortex",children:"Time vortex"}),"\n",(0,s.jsx)(n.p,{children:"The data structure in SST-Core that manages event delivery and ordering."}),"\n",(0,s.jsx)(n.h2,{id:"user-subcomponent",children:"User subcomponent"}),"\n",(0,s.jsx)(n.p,{children:"A subcomponent that is explicitly instantiated in an SST configuration file."})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);