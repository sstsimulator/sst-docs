"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7215],{28453:(t,e,n)=>{n.d(e,{R:()=>u,x:()=>a});var i=n(96540);const s={},r=i.createContext(s);function u(t){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:u(t.components),i.createElement(r.Provider,{value:e},t.children)}},37816:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>u,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"core/statoutput/implStopOutputEntries","title":"implStopOutputEntries","description":"This function must be implemented.","source":"@site/../docs/core/statoutput/implStopOutputEntries.md","sourceDirName":"core/statoutput","slug":"/core/statoutput/implStopOutputEntries","permalink":"/sst-docs/docs/core/statoutput/implStopOutputEntries","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/statoutput/implStopOutputEntries.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"implStopOutputEntries"},"sidebar":"core","previous":{"title":"implStartOutputEntries","permalink":"/sst-docs/docs/core/statoutput/implStartOutputEntries"},"next":{"title":"outputField","permalink":"/sst-docs/docs/core/statoutput/outputField"}}');var s=n(74848),r=n(28453);const u={title:"implStopOutputEntries"},a=void 0,o={},p=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Header",id:"header",level:2}];function l(t){const e={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"virtual void implStopOutputEntries() =0;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["This function ",(0,s.jsx)(e.em,{children:"must"})," be implemented."]}),"\n",(0,s.jsxs)(e.p,{children:["The function is called once a Statistic has finished generating its output and indicates that the output object can finish generating the output for that statistic. For example, if the output objects ",(0,s.jsx)(e.code,{children:"outputFields"})," functions were buffering data from the statistic, this function would be used to drain that data in the desired format to file, stdout, etc."]}),"\n",(0,s.jsx)(e.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(e.h3,{id:"example-1",children:"Example 1"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",metastring:'title="Finishing text output to stdout"',children:'void implStopOutputEntries() override\n{\n    // implStartOutputEntries() and outputFields() append data to a string \'output_string_\'. Print it.\n    printf("%s\\n", output_string_.c_str());\n    output_string_ = ""; // Clear string for next output\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"example-2",children:"Example 2"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",metastring:'title="Finishing CSV output to file"',children:'void implStopOutputEntries() override\n{\n    // implStartOutputEntries() saved some metadata about the statistic\n    // outputFields() filled the relevant fields in `m_OutputBufferArray` with data from the statistic\n    // Combine these in CSV format and print using a local function \'print\'\n\n    // Output metadata identifying the stat and current simulation time\n    print("%s,", m_currentComponentName.c_str());\n    print("%s,", m_currentStatisticName.c_str());\n    print("%s,", m_currentStatisticSubId.c_str());\n    print("%s,", m_currentStatisticType.c_str());\n    print("%" PRIu64",", getCurrentSimCycle());\n\n    // Output the data filled out by the statistic\n    uint32_t x = 0;\n    while ( x < m_OutputBufferArray.size() ) {\n        print("%s", m_OutputBufferArray[x].c_str());\n        x++;\n        if ( x != m_OutputBufferArray.size() ) {\n            print(",");\n        }\n    }\n    print("\\n");\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:"#include <sst/core/statapi/statoutput.h>\n"})})]})}function c(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(l,{...t})}):l(t)}}}]);