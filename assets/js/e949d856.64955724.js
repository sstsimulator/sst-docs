"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[23025],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(96540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},93191:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"core/component/time/getDefaultTimeBase","title":"getDefaultTimeBase","description":"Availability: Component, SubComponent, ComponentExtension","source":"@site/../docs/core/component/time/getDefaultTimeBase.md","sourceDirName":"core/component/time","slug":"/core/component/time/getDefaultTimeBase","permalink":"/sst-docs/docs/core/component/time/getDefaultTimeBase","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/component/time/getDefaultTimeBase.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"getDefaultTimeBase"},"sidebar":"core","previous":{"title":"setDefaultTimeBase","permalink":"/sst-docs/docs/core/component/time/setDefaultTimeBase"},"next":{"title":"getTimeConverter","permalink":"/sst-docs/docs/core/component/time/getTimeConverter"}}');var o=t(74848),s=t(28453);const i={title:"getDefaultTimeBase"},a=void 0,c={},l=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function m(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"// Deprecated, will be removed in SST 16.0\nTimeConverter* getDefaultTimeBase();\nconst TimeConverter* getDefaultTimeBase() const;\n// Will replace deprecated functions in SST 16.0\nTimeConverter getDefaultTimeBase();\nconst TimeConverter getDefaultTimeBase() const;\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Availability:"})," Component, SubComponent, ComponentExtension"]}),"\n",(0,o.jsxs)(n.admonition,{title:"Deprecation",type:"warning",children:[(0,o.jsx)(n.p,{children:"Shared TimeConverters returned by SST-Core APIs will be removed in SST 16.0. All functions accepting TimeConverter* now accept TimeConverter instead. Elements using a TimeConverter* returned by SST-Core should create a local non-shared instance as shown:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"// Old code\nTimeConverter* tc = function_that_returns_tc();\n// New code\nTimeConverter tc = function_that_returns_tc();\n"})})]}),"\n",(0,o.jsx)(n.p,{children:"Return the default time base for the calling (Sub)Component."}),"\n",(0,o.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"returns"})," (TimeConverter*) Default time base"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/memHierarchy/standardInterface.cc"',children:'StandardInterface::StandardInterface(SST::ComponentId_t id, Params& params, TimeConverter* time,\n    HandlerBase* handler) : StandardMem(id, params, time, handler)\n{\n    /** Begin configuration code here */\n\n    // Pass our default time base to our child subcomponent\n    //highlight-next-line\n    link_ = loadUserSubComponent<MemLinkBase>("lowlink", ComponentInfo::SHARE_NONE, getDefaultTimeBase());\n\n    /** Remaining configuration here */\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h>\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}}}]);