"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[66560],{28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>c});var o=s(96540);const r={},n=o.createContext(r);function a(e){const t=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(n.Provider,{value:t},e.children)}},93955:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"core/output/setVerboseMask","title":"setVerboseMask","description":"Sets the Output\'s verbosemask for debug() and verbose(). Output object will only output the message if the set bits of those calls\' outputbits parameter are also set in the verbose_mask.","source":"@site/../docs/core/output/setVerboseMask.md","sourceDirName":"core/output","slug":"/core/output/setVerboseMask","permalink":"/sst-docs/docs/core/output/setVerboseMask","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/output/setVerboseMask.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"setVerboseMask"},"sidebar":"core","previous":{"title":"getVerboseMask","permalink":"/sst-docs/docs/core/output/getVerboseMask"},"next":{"title":"getDefaultObject","permalink":"/sst-docs/docs/core/output/getDefaultObject"}}');var r=s(74848),n=s(28453);const a={title:"setVerboseMask"},c=void 0,l={},u=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function i(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"void setVerboseMask(uint32_t verbose_mask);\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Sets the Output's verbose_mask for ",(0,r.jsx)(t.a,{href:"debug",children:(0,r.jsx)(t.code,{children:"debug()"})})," and ",(0,r.jsx)(t.a,{href:"verbose",children:(0,r.jsx)(t.code,{children:"verbose()"})}),". Output object will only output the message if the set bits of those calls' ",(0,r.jsx)(t.code,{children:"output_bits"})," parameter are also set in the verbose_mask."]}),"\n",(0,r.jsxs)(t.p,{children:["The logic is:\nif (",(0,r.jsx)(t.code,{children:"verbose_mask & output_bits == 0"}),") then output is enabled"]}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"verbose_mask"})," (uint32_t) The mask to set the Output's verbose_mask to"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"out->setVerboseMask(3); // Output will only occur on debug/verbose if the mask bits match\n"})}),"\n",(0,r.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/output.h>\n"})})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}}}]);