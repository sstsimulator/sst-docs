"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[41235],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(96540);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}},68015:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"core/link/setFunctor","title":"setFunctor","description":"Set the callback handler for events arriving on a link. Does not delete the previous handler that was registered to the Link.","source":"@site/../docs/core/link/setFunctor.md","sourceDirName":"core/link","slug":"/core/link/setFunctor","permalink":"/sst-docs/docs/core/link/setFunctor","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/link/setFunctor.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1716583959000,"frontMatter":{"title":"setFunctor"},"sidebar":"core","previous":{"title":"recv","permalink":"/sst-docs/docs/core/link/recv"},"next":{"title":"replaceFunctor","permalink":"/sst-docs/docs/core/link/replaceFunctor"}}');var s=t(74848),o=t(28453);const a={title:"setFunctor"},l=void 0,i={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void setFunctor(Event::HandlerBase* functor);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Set the callback handler for events arriving on a link. Does not delete the previous handler that was registered to the Link."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"This function cannot be used on a Link that was configured as a polling link (i.e., configured without a handler)."})}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"functor"})," (Event::HandlerBase*) Event handler to invoke for event arrivals"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"// Configure a link connected to a port named 'port' \nEvent::HandlerBase* handler = new Event::Handler2<example,&example::handleEvent>(this);\nSST::Link* link = configureLink(\"port\", handler);\n\n// Change the link to call otherHandleEvent() instead of handleEvent() when an event arrives\n// setFunctor won't delete the existing handler so we can reuse it later if we want to swap again\n//highlight-next-line\nlink->setFunctor(new Event::Handler2<example,&example::otherHandleEvent>(this));\n"})}),"\n",(0,s.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/link.h>\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);