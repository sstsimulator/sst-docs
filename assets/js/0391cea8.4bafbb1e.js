"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[52553],{7120:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"core/unitalgebra/operatorsub","title":"operator-=","description":"Subtract something from this UnitAlgebra. If the argument is a UnitAlgebra and the units do not match, an error will occur. Otherwise, if the value is unitless (e.g., an int), it will be subtracted from the value of this UnitAlgebra.","source":"@site/../docs/core/unitalgebra/operatorsub.md","sourceDirName":"core/unitalgebra","slug":"/core/unitalgebra/operatorsub","permalink":"/sst-docs/docs/core/unitalgebra/operatorsub","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/unitalgebra/operatorsub.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"operator-="},"sidebar":"core","previous":{"title":"operator+=","permalink":"/sst-docs/docs/core/unitalgebra/operatoradd"},"next":{"title":"operator*=","permalink":"/sst-docs/docs/core/unitalgebra/operatormul"}}');var s=r(74848),a=r(28453);const o={title:"operator-="},i=void 0,l={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const t={code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"UnitAlgebra& operator-=(const UnitAlgebra& v);\ntemplate <typename T> UnitAlgebra& operator-= (const T& v);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Subtract something from this UnitAlgebra. If the argument is a UnitAlgebra and the units do not match, an error will occur. Otherwise, if the value is unitless (e.g., an ",(0,s.jsx)(t.code,{children:"int"}),"), it will be subtracted from the value of this UnitAlgebra."]}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"v"})," (UnitAlgebra) value to subtract"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"v"})," (typename T) value to subtract"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"returns"})," (UnitAlgebra&) This UnitAlgebra after the subtraction operation."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"throws"})," ",(0,s.jsx)(t.em,{children:"NonMatchingUnits"})," If object ",(0,s.jsx)(t.code,{children:"v"})," is a UnitAlgebra and its units do not match this UnitAlgebra's units."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:'SST::UnitAlgebra num0("8s");\nSST::UnitAlgebra num1("5s");\nnum0 -= num1;\n// num0 = 3s\n'})}),"\n",(0,s.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/unitalgebra.h>\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>i});var n=r(96540);const s={},a=n.createContext(s);function o(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);