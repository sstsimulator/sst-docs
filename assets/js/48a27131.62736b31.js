"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[61694],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(96540);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}},64978:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"core/unitalgebra/getValue","title":"getValue","description":"Return the value portion of the UnitAlgebra as an sstbignum, which is a decimal fixed point format used internally in SST. This discards the units and returns the value in its base units (without SI prefixes).","source":"@site/../docs/core/unitalgebra/getValue.md","sourceDirName":"core/unitalgebra","slug":"/core/unitalgebra/getValue","permalink":"/sst-docs/docs/core/unitalgebra/getValue","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/unitalgebra/getValue.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"getValue"},"sidebar":"core","previous":{"title":"getRoundedValue","permalink":"/sst-docs/docs/core/unitalgebra/getRoundedValue"},"next":{"title":"hasUnits","permalink":"/sst-docs/docs/core/unitalgebra/hasUnits"}}');var a=n(74848),r=n(28453);const i={title:"getValue"},l=void 0,o={},u=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function c(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:"sst_big_num getValue() const;\n"})}),"\n",(0,a.jsx)(t.p,{children:"Return the value portion of the UnitAlgebra as an sst_big_num, which is a decimal fixed point format used internally in SST. This discards the units and returns the value in its base units (without SI prefixes)."}),"\n",(0,a.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"returns"})," (sst_big_num) The value portion of the UnitAlgebra as an int64_t."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:'SST::UnitAlgebra* num = new UnitAlgebra("2GHz");\nsst_big_num hz = num->getRoundedValue();\n'})}),"\n",(0,a.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/unitalgebra.h>\n"})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);