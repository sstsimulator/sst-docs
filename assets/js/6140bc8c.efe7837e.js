"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[61930],{28453:(e,r,a)=>{a.d(r,{R:()=>o,x:()=>i});var s=a(96540);const t={},n=s.createContext(t);function o(e){const r=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(n.Provider,{value:r},e.children)}},80247:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"core/params/is_value_array","title":"is_value_array","description":"Returns whether the value associated with the given key is a valid array format (i.e., can be parsed correctly by findarray).","source":"@site/../docs/core/params/is_value_array.md","sourceDirName":"core/params","slug":"/core/params/is_value_array","permalink":"/sst-docs/docs/core/params/is_value_array","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/params/is_value_array.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"is_value_array"},"sidebar":"core","previous":{"title":"empty","permalink":"/sst-docs/docs/core/params/empty"},"next":{"title":"print_all_params","permalink":"/sst-docs/docs/core/params/print_all_params"}}');var t=a(74848),n=a(28453);const o={title:"is_value_array"},i=void 0,c={},l=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function d(e){const r={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"bool is_value_array(const std::string& key) const;\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Returns whether the value associated with the given key is a valid array format (i.e., can be parsed correctly by ",(0,t.jsx)(r.a,{href:"find_array",children:(0,t.jsx)(r.code,{children:"find_array"})}),")."]}),"\n",(0,t.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"key"})," (std::string) Key whose value should be checked"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"returns"})," (bool) Whether the corresponding value is an array format or not."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:'example::example(ComponentId_t id, Params& params) : Component(id)\n{\n    output = new SST::Output("", 1, 0, SST::Output::STDOUT);\n    //highlight-next-line\n    if (!params.is_value_array("names")) {\n        out->fatal(CALL_INFO, -1, "Error: The parameter \'names\' should be an array but is not formatted correctly. Is it enclosed in square brackets?");\n    }\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"header",children:"Header"}),"\n",(0,t.jsx)(r.p,{children:"The Params header file is included with any SST object that supports Params."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-cpp",children:"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h> // or\n#include <sst/core/params.h> // if not included in base class\n"})})]})}function p(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);