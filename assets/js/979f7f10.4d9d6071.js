"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8478],{88911:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var i=n(74848),r=n(28453);const o={title:"initiateInteractive"},s=void 0,c={id:"core/component/output/initiateInteractive",title:"initiateInteractive",description:"Tell the SST simulation to enter interactive mode and drop into a debug console. The simulation will enter interactive mode when control returns to SST from the current handler. The parameter msg will be passed to the console to aid the user in determining why the simulation entered interactive mode.",source:"@site/../docs/core/component/output/initiateInteractive.md",sourceDirName:"core/component/output",slug:"/core/component/output/initiateInteractive",permalink:"/sst-docs/docs/core/component/output/initiateInteractive",draft:!1,unlisted:!1,editUrl:"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/component/output/initiateInteractive.md",tags:[],version:"current",lastUpdatedBy:"grvosku",lastUpdatedAt:1729787241e3,frontMatter:{title:"initiateInteractive"},sidebar:"core",previous:{title:"getSimulationOutput",permalink:"/sst-docs/docs/core/component/output/getSimulationOutput"},next:{title:"sst_assert",permalink:"/sst-docs/docs/core/component/output/sst_assert"}},a={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function l(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-caution",children:"The interactive debugging feature is experimental and evolving. This API may change.\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"void initiateInteractive(const std::string& msg);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Tell the SST simulation to enter interactive mode and drop into a debug console. The simulation will enter interactive mode when control returns to SST from the current handler. The parameter ",(0,i.jsx)(t.code,{children:"msg"})," will be passed to the console to aid the user in determining why the simulation entered interactive mode."]}),"\n",(0,i.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"msg"})," (const std::string) Message stating the reason this function was called. Intended to aid the user in determining what triggered interactive mode."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"initiateInteractive(\"Component '%s' reached trigger point.\\n\", getName().c_str());\n"})}),"\n",(0,i.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/component.h> // or\n#include <sst/core/subcomponent.h> // or\n#include <sst/core/componentExtension.h>\n"})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var i=n(96540);const r={},o=i.createContext(r);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);