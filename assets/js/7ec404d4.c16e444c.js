"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6990],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var r=n(96540);const o={},a=r.createContext(o);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:t},e.children)}},91260:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"core/iface/StandardMem/reqconverter","title":"RequestConverter","description":"The StandardMem::Links. StandardMem implementations should derive from RequestConverter to define a conversion function for each built-in StandardMem request type. Upon receiving a request the StandardMem implementation can use the derived RequestConverter class to convert StandardMem requests by type.","source":"@site/../docs/core/iface/StandardMem/reqconverter.md","sourceDirName":"core/iface/StandardMem","slug":"/core/iface/StandardMem/reqconverter","permalink":"/sst-docs/docs/core/iface/StandardMem/reqconverter","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/reqconverter.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1695940750000,"frontMatter":{"title":"RequestConverter"},"sidebar":"core","previous":{"title":"CustomData","permalink":"/sst-docs/docs/core/iface/StandardMem/req/customdata"},"next":{"title":"RequestHandler","permalink":"/sst-docs/docs/core/iface/StandardMem/reqhandler"}}');var o=n(74848),a=n(28453);const s={title:"RequestConverter"},i=void 0,c={},d=[{value:"Constructor",id:"constructor",level:2},{value:"Required function implementations",id:"required-function-implementations",level:2},{value:"Header",id:"header",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"The StandardMem::RequestConverter class is a pure virtual visitor class that allows StandardMem implementations to convert an incoming StandardMem::Request type to an SST::Event type that can be passed over SST::Links. StandardMem implementations should derive from RequestConverter to define a conversion function for each built-in StandardMem request type. Upon receiving a request the StandardMem implementation can use the derived RequestConverter class to convert StandardMem requests by type."}),"\n",(0,o.jsxs)(t.p,{children:["If a memory system implementation does not support a particular request type, it may call (",(0,o.jsx)(t.a,{href:"../../component/output/fatal",children:"SubComponent::fatal"}),") in the corresponding conversion function or otherwise indicate an error."]}),"\n",(0,o.jsx)(t.h2,{id:"constructor",children:"Constructor"}),"\n",(0,o.jsx)(t.p,{children:"The RequestConverter provides an empty constructor and destructor."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"RequestConverter() {}\nvirtual ~RequestConverter() {}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"required-function-implementations",children:"Required function implementations"}),"\n",(0,o.jsx)(t.p,{children:"The following functions are pure virtual within the RequestConverter class and must be implemented. The implementation should either convert the incoming request into an appropriate SST::Event type, or return an error indicating that the request type is not supported by the StandardMem implementation."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"virtual SST::Event* convert(Read* request) = 0;\nvirtual SST::Event* convert(ReadResp* request) = 0;\nvirtual SST::Event* convert(Write* request) = 0;\nvirtual SST::Event* convert(WriteResp* request) = 0;\nvirtual SST::Event* convert(FlushAddr* request) = 0;\nvirtual SST::Event* convert(FlushResp* request) = 0;\nvirtual SST::Event* convert(ReadLock* request) = 0;\nvirtual SST::Event* convert(WriteUnlock* request) = 0;\nvirtual SST::Event* convert(LoadLink* request) = 0;\nvirtual SST::Event* convert(StoreConditional* request) = 0;\nvirtual SST::Event* convert(MoveData* request) = 0;\nvirtual SST::Event* convert(CustomReq* request) = 0;\nvirtual SST::Event* convert(CustomResp* request) = 0;\nvirtual SST::Event* convert(InvNotify* request) = 0;\n"})}),"\n",(0,o.jsx)(t.h2,{id:"header",children:"Header"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"#include <sst/core/interfaces/stdMem.h>\n"})})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);