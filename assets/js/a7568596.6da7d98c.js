"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7650],{28453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>a});var n=t(96540);const o={},i=n.createContext(o);function r(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(i.Provider,{value:s},e.children)}},42268:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"elements/golem/intro","title":"golem","description":"Golem is an SST element designed for simulating processing using memory (PUM)/in situ computing components. Currently Golem supports analog matrix vector multiplication (MVM) arrays. These arrays can be simulated either through ideal operation emulation or optionally use Sandia\'s CrossSim analog MVM array simulator to incorporate analog non-idealities. For integrating these arrays with other SST components, Golem provides implementations of the RoCC co-processor interface which can be directly connected to a Vanadis CPU core.","source":"@site/../docs/elements/golem/intro.md","sourceDirName":"elements/golem","slug":"/elements/golem/intro","permalink":"/sst-docs/docs/elements/golem/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/elements/golem/intro.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"golem"},"sidebar":"elements","previous":{"title":"gensa","permalink":"/sst-docs/docs/elements/gensa/intro"},"next":{"title":"hermes","permalink":"/sst-docs/docs/elements/hermes/intro"}}');var o=t(74848),i=t(28453);const r={title:"golem"},a=void 0,l={},c=[{value:"Using CrossSim",id:"using-crosssim",level:2},{value:"Required dependencies",id:"required-dependencies",level:3},{value:"Optional dependencies",id:"optional-dependencies",level:3}];function d(e){const s={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(s.p,{children:["Golem is an SST element designed for simulating processing using memory (PUM)/in situ computing components. Currently Golem supports analog matrix vector multiplication (MVM) arrays. These arrays can be simulated either through ideal operation emulation or optionally use Sandia's ",(0,o.jsx)(s.a,{href:"https://github.com/sandialabs/cross-sim",children:"CrossSim"})," analog MVM array simulator to incorporate analog non-idealities. For integrating these arrays with other SST components, Golem provides implementations of the RoCC co-processor interface which can be directly connected to a ",(0,o.jsx)(s.a,{href:"/sst-docs/docs/elements/vanadis/intro",children:"Vanadis CPU core"}),"."]}),"\n",(0,o.jsx)(s.h2,{id:"using-crosssim",children:"Using CrossSim"}),"\n",(0,o.jsxs)(s.p,{children:["Golem searches the ",(0,o.jsx)(s.code,{children:"PYTHONPATH"})," for CrossSim by default. This means CrossSim should be installed with the local python interpreter such that the command ",(0,o.jsx)(s.code,{children:"python3 -c 'import simulator'"})," runs without error. The only officially supported configuration is when the same python interpreter that is used for the SST-Core is used for CrossSim, but other configurations may work so long as both python interpreters are the same version."]}),"\n",(0,o.jsx)(s.admonition,{title:"At a Glance",type:"note",children:(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.strong,{children:"Source Code:"})," ",(0,o.jsx)(s.a,{href:"https://github.com/sstsimulator/sst-elements/tree/master/src/sst/elements/golem",children:"sst-elements/.../golem"})," \xa0",(0,o.jsx)(s.br,{}),"\n",(0,o.jsx)(s.strong,{children:"SST Name:"})," ",(0,o.jsx)(s.code,{children:"golem"})," \xa0",(0,o.jsx)(s.br,{}),"\n",(0,o.jsx)(s.strong,{children:"Maturity Level:"})," Prototype (2) \xa0",(0,o.jsx)(s.br,{}),"\n",(0,o.jsx)(s.strong,{children:"Development Path:"})," Active \xa0",(0,o.jsx)(s.br,{}),"\n",(0,o.jsx)(s.strong,{children:"Last Released:"})," 15.0"]})}),"\n",(0,o.jsx)(s.h3,{id:"required-dependencies",children:"Required dependencies"}),"\n",(0,o.jsx)(s.p,{children:(0,o.jsx)(s.em,{children:"None"})}),"\n",(0,o.jsx)(s.h3,{id:"optional-dependencies",children:"Optional dependencies"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsx)(s.li,{children:(0,o.jsx)(s.a,{href:"https://github.com/sandialabs/cross-sim",children:"CrossSim"})}),"\n"]})]})}function m(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);