"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[44533],{28453:(t,e,n)=>{n.d(e,{R:()=>a,x:()=>o});var i=n(96540);const r={},s=i.createContext(r);function a(t){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:a(t.components),i.createElement(s.Provider,{value:e},t.children)}},35102:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"core/statoutput/startOfSimulation","title":"startOfSimulation","description":"This function must be implemented.","source":"@site/../docs/core/statoutput/startOfSimulation.md","sourceDirName":"core/statoutput","slug":"/core/statoutput/startOfSimulation","permalink":"/sst-docs/docs/core/statoutput/startOfSimulation","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/statoutput/startOfSimulation.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"startOfSimulation"},"sidebar":"core","previous":{"title":"printUsage","permalink":"/sst-docs/docs/core/statoutput/printUsage"},"next":{"title":"endOfSimulation","permalink":"/sst-docs/docs/core/statoutput/endOfSimulation"}}');var r=n(74848),s=n(28453);const a={title:"startOfSimulation"},o=void 0,l={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Header",id:"header",level:2}];function u(t){const e={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"virtual void startOfSimulation() =0;\n"})}),"\n",(0,r.jsxs)(e.p,{children:["This function ",(0,r.jsx)(e.em,{children:"must"})," be implemented."]}),"\n",(0,r.jsx)(e.p,{children:"The function is called when SST has constructed the simulation objects and is ready to begin running the simulation. Any setup that needs to be done (e.g., creating files, initializing buffers, etc.) can be done in this function."}),"\n",(0,r.jsx)(e.admonition,{type:"info",children:(0,r.jsxs)(e.p,{children:["SST provides a global output directory per simulation which can be specified by the user via the ",(0,r.jsx)(e.code,{children:"--output-directory="})," command line option. StatisticOutput objects should use the ",(0,r.jsx)(e.a,{href:"./getAbsolutePathForOutputFile",children:(0,r.jsx)(e.code,{children:"getAbsolutePathForOutputFile"})})," function to place files in this directory. SST will have already checked the directory for write permissions."]})}),"\n",(0,r.jsx)(e.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(e.p,{children:["This is example shows a simplified version of SST's CSV StatisticOutput ",(0,r.jsx)(e.code,{children:"startOfSimulation"}),"."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",metastring:'title="Simulation start for SST\'s CSV output (simplified)"',children:'void startOfSimulation() override\n{\n    // Create a unique filename based on a user-provided base name\n    // Place it in SST\'s output directory\n    std::string filename = m_FilePath;\n    if ( 1 < getNumRanks().rank > ) { // multi-rank, append rank number to filename\n        std::string rankstr = "_" + std::to_string(getRank().rank);\n\n        // Insert rank just before extension or at end of filename if no extension\n        size_t index = m_FilePath.find_last_of(".");\n        if ( std::string::npos != index ) {\n            filename.insert(index, rankstr);\n        } else {\n            filename += rankstr;\n        }\n    }\n    filename = getAbsolutePathForOutputFile(filename);\n\n    // Open the CSV file for writing\n    m_hFile = fopen(filename.c_str(), "w");\n    if ( nullptr == m_hFile ) {\n        getSimulationOutput().fatal(CALL_INFO, 1, " : StatisticOutputCSV: Problem opening file %s - %s\\n", m_FilePath.c_str(), strerror(errno));\n    }\n\n    // Initialize the OutputBufferArray with std::string objects\n    for ( FieldInfoArray_t::iterator it_v = getFieldInfoArray().begin(); it_v != getFieldInfoArray().end(); it_v++ ) {\n        m_OutputBufferArray.push_back(std::string(""));\n    }\n\n    // Print out a CSV header if requested\n    if ( true == m_outputTopHeader ) {\n        fprintf(m_hFile, "ComponentName%s", m_Separator.c_str());\n        fprintf(m_hFile, "StatisticName%s", m_Separator.c_str());\n        fprintf(m_hFile, "StatisticSubId%s", m_Separator.c_str());\n        fprintf(m_hFile, "StatisticType%s", m_Separator.c_str());\n\n        if ( true == m_outputSimTime ) fprintf(m_hFile, "SimTime%s", m_Separator.c_str());\n        if ( true == m_outputRank ) fprintf(m_hFile, "Rank%s", m_Separator.c_str());\n\n        // Output field headers from the registered statistics\n        FieldInfoArray_t::iterator it_v = getFieldInfoArray().begin();\n        StatisticFieldInfo* statField = *it_v;\n\n        while ( it_v != getFieldInfoArray().end() ) {\n            statField    = *it_v;\n            fprintf(m_hFile, "%s.%s", statField->getFieldName().c_str(), statField->getFieldType().c_str());\n\n            it_v++;\n            // If not the last field, tack on a separator\n            if ( it_v != getFieldInfoArray().end() ) {\n                fprintf(m_hFile, "%s", m_Separator.c_str());\n            }\n        }\n        fprint(m_hFile, "\\n");\n    }\n    // Done - file opened and header printed\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"#include <sst/core/statapi/statoutput.h>\n"})})]})}function c(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(u,{...t})}):u(t)}}}]);