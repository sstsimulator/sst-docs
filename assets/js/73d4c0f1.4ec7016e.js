"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[57511],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},32551:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"core/iface/StandardMem/setup","title":"setup","description":"See setup() for a description of SST\'s setup phase and the use of this function. The (Sub)Component that loaded a StandardMem interface should call this function during its own setup() function. A StandardMem interface may implement this function if needed, but it is not required.","source":"@site/../docs/core/iface/StandardMem/setup.md","sourceDirName":"core/iface/StandardMem","slug":"/core/iface/StandardMem/setup","permalink":"/sst-docs/docs/core/iface/StandardMem/setup","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/core/iface/StandardMem/setup.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1684522150000,"frontMatter":{"title":"setup"},"sidebar":"core","previous":{"title":"init","permalink":"/sst-docs/docs/core/iface/StandardMem/init"},"next":{"title":"complete","permalink":"/sst-docs/docs/core/iface/StandardMem/complete"}}');var i=t(74848),r=t(28453);const a={title:"setup"},d=void 0,o={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Example 1: Implementing setup() in StandardMem",id:"example-1-implementing-setup-in-standardmem",level:3},{value:"Example 2: Supporting setup() at an endpoint",id:"example-2-supporting-setup-at-an-endpoint",level:3},{value:"Header",id:"header",level:2}];function l(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"virtual void setup();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"../../component/lifecycle/setup",children:(0,i.jsx)(n.code,{children:"setup()"})})," for a description of SST's setup phase and the use of this function. The (Sub)Component that loaded a StandardMem interface should call this function during its own ",(0,i.jsx)(n.code,{children:"setup()"})," function. A StandardMem interface may implement this function if needed, but it is not required."]}),"\n",(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Memory interface"})," \xa0",(0,i.jsx)(n.br,{}),"\n","This function may be optionally implemented."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Endpoint"})," \xa0",(0,i.jsx)(n.br,{}),"\n","Call ",(0,i.jsx)(n.code,{children:"setup()"})," on the interface during the ",(0,i.jsx)(n.code,{children:"setup()"})," phase as SST does not automatically call this function on SubComponents."]}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"returns"})," none"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"example-1-implementing-setup-in-standardmem",children:"Example 1: Implementing setup() in StandardMem"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="Excerpt from sst-elements/src/sst/elements/memHierarchy/standardInterface.cc"',children:'void StandardInterface::setup() { \n    /* Report some debug information about the interface setup */\n    debug.debug(_L9_, "%s, INFO: Line size: %" PRIu64 ", Mask: 0x%" PRIx64 "\\n", getName().c_str(), lineSize_, baseAddrMask_);\n    if (noncacheableRegions.empty()) {\n        debug.debug(_L9_, "%s, INFO: No noncacheable regions discovered\\n", getName().c_str());\n    } else {\n        std::ostringstream regstr;\n        regstr << getName() << ", INFO: Discovered noncacheable regions:";\n        for (std::multimap<Addr, MemRegion>::iterator it = noncacheableRegions.begin(); it != noncacheableRegions.end(); it++) {\n            regstr << " [" << it->second.toString() << "]";\n        }\n        debug.debug(_L9_, "%s\\n", regstr.str().c_str());\n    }\n    /* Call setup() on SubComponents */\n    link_->setup();\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"example-2-supporting-setup-at-an-endpoint",children:"Example 2: Supporting setup() at an endpoint"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"void Endpoint::setup() \n{\n    mem_iface->setup();\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"#include <sst/core/interfaces/stdMem.h>\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);