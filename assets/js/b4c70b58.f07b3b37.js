"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[35598],{7027:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"elements/miranda/intro","title":"miranda","description":"Miranda is a state-machine based core model. The model is split into a core model and an instruction stream generator. Built-in generators include patterns such as SPMV, GUPS, Stream kernels, and stencils. Additionally, the Stake generator integrates with the Spike RISC-V functional simulator to provide timing simulation. The Miranda core accepts memory instructions; other instructions are simulated via timing delays only. Dependencies between instructions are observed. The processor interfaces with memory via the SST::StandardMem interface.","source":"@site/../docs/elements/miranda/intro.md","sourceDirName":"elements/miranda","slug":"/elements/miranda/intro","permalink":"/sst-docs/docs/elements/miranda/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/sstsimulator/sst-docs/edit/master/docs/../docs/elements/miranda/intro.md","tags":[],"version":"current","lastUpdatedBy":"grvosku","lastUpdatedAt":1747692370000,"frontMatter":{"title":"miranda"},"sidebar":"elements","previous":{"title":"messier","permalink":"/sst-docs/docs/elements/messier/intro"},"next":{"title":"mmu","permalink":"/sst-docs/docs/elements/mmu/intro"}}');var i=n(74848),r=n(28453);const a={title:"miranda"},o=void 0,d={},c=[{value:"Required dependencies",id:"required-dependencies",level:3},{value:"Optional dependencies",id:"optional-dependencies",level:3}];function l(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.em,{children:"Miranda"})," is a state-machine based core model. The model is split into a core model and an instruction stream generator. Built-in generators include patterns such as SPMV, GUPS, Stream kernels, and stencils. Additionally, the Stake generator integrates with the Spike RISC-V functional simulator to provide timing simulation. The Miranda core accepts memory instructions; other instructions are simulated via timing delays only. Dependencies between instructions are observed. The processor interfaces with memory via the ",(0,i.jsx)(t.a,{href:"../../core/iface/StandardMem/class",children:"SST::StandardMem"})," interface."]}),"\n",(0,i.jsx)(t.admonition,{title:"At a Glance",type:"note",children:(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Source Code:"})," ",(0,i.jsx)(t.a,{href:"https://github.com/sstsimulator/sst-elements/tree/master/src/sst/elements/miranda",children:"sst-elements/.../miranda"})," \xa0",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"SST Name:"})," ",(0,i.jsx)(t.code,{children:"miranda"})," \xa0",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Maturity Level:"})," Mature (3) \xa0",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Development Path:"})," Active \xa0",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"Last Released:"})," SST 15.0"]})}),"\n",(0,i.jsx)(t.h3,{id:"required-dependencies",children:"Required dependencies"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"None"})}),"\n",(0,i.jsx)(t.h3,{id:"optional-dependencies",children:"Optional dependencies"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/riscv-software-src/riscv-isa-sim",children:(0,i.jsx)(t.strong,{children:"Spike"})})," Miranda's ",(0,i.jsx)(t.em,{children:"Stake"})," generator takes input from the Spike RISC-V functional simulator rather than synthetically generating instructions."]}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(96540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);